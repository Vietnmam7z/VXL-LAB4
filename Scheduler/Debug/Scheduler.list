
Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080039ac  080039ac  000139ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039d0  080039d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080039d0  080039d0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039d0  080039d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039d0  080039d0  000139d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080039d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  2000000c  080039e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  080039e4  00020400  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009735  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be3  00000000  00000000  0002976a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  0002b350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a30  00000000  00000000  0002bea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000028a8  00000000  00000000  0002c8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0b0  00000000  00000000  0002f178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000829b4  00000000  00000000  0003b228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bdbdc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002be0  00000000  00000000  000bdc30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003994 	.word	0x08003994

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003994 	.word	0x08003994

0800014c <SCH_Update>:
	}
	Error_code_G = 0;
	Timer_init();
	Watchdog_init();
}
void SCH_Update(void){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	unsigned char Index;
	for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e05c      	b.n	8000212 <SCH_Update+0xc6>
		if(SCH_tasks_G[Index].pTask){
 8000158:	79fa      	ldrb	r2, [r7, #7]
 800015a:	4932      	ldr	r1, [pc, #200]	; (8000224 <SCH_Update+0xd8>)
 800015c:	4613      	mov	r3, r2
 800015e:	009b      	lsls	r3, r3, #2
 8000160:	4413      	add	r3, r2
 8000162:	009b      	lsls	r3, r3, #2
 8000164:	440b      	add	r3, r1
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	2b00      	cmp	r3, #0
 800016a:	d04f      	beq.n	800020c <SCH_Update+0xc0>
			if(SCH_tasks_G[Index].Delay == 0){
 800016c:	79fa      	ldrb	r2, [r7, #7]
 800016e:	492d      	ldr	r1, [pc, #180]	; (8000224 <SCH_Update+0xd8>)
 8000170:	4613      	mov	r3, r2
 8000172:	009b      	lsls	r3, r3, #2
 8000174:	4413      	add	r3, r2
 8000176:	009b      	lsls	r3, r3, #2
 8000178:	440b      	add	r3, r1
 800017a:	3304      	adds	r3, #4
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d132      	bne.n	80001e8 <SCH_Update+0x9c>
				SCH_tasks_G[Index].RunMe += 1;
 8000182:	79fa      	ldrb	r2, [r7, #7]
 8000184:	4927      	ldr	r1, [pc, #156]	; (8000224 <SCH_Update+0xd8>)
 8000186:	4613      	mov	r3, r2
 8000188:	009b      	lsls	r3, r3, #2
 800018a:	4413      	add	r3, r2
 800018c:	009b      	lsls	r3, r3, #2
 800018e:	440b      	add	r3, r1
 8000190:	330c      	adds	r3, #12
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	79fa      	ldrb	r2, [r7, #7]
 8000196:	3301      	adds	r3, #1
 8000198:	b2d8      	uxtb	r0, r3
 800019a:	4922      	ldr	r1, [pc, #136]	; (8000224 <SCH_Update+0xd8>)
 800019c:	4613      	mov	r3, r2
 800019e:	009b      	lsls	r3, r3, #2
 80001a0:	4413      	add	r3, r2
 80001a2:	009b      	lsls	r3, r3, #2
 80001a4:	440b      	add	r3, r1
 80001a6:	330c      	adds	r3, #12
 80001a8:	4602      	mov	r2, r0
 80001aa:	701a      	strb	r2, [r3, #0]
				if(SCH_tasks_G[Index].Period){
 80001ac:	79fa      	ldrb	r2, [r7, #7]
 80001ae:	491d      	ldr	r1, [pc, #116]	; (8000224 <SCH_Update+0xd8>)
 80001b0:	4613      	mov	r3, r2
 80001b2:	009b      	lsls	r3, r3, #2
 80001b4:	4413      	add	r3, r2
 80001b6:	009b      	lsls	r3, r3, #2
 80001b8:	440b      	add	r3, r1
 80001ba:	3308      	adds	r3, #8
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d024      	beq.n	800020c <SCH_Update+0xc0>
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 80001c2:	79f9      	ldrb	r1, [r7, #7]
 80001c4:	79fa      	ldrb	r2, [r7, #7]
 80001c6:	4817      	ldr	r0, [pc, #92]	; (8000224 <SCH_Update+0xd8>)
 80001c8:	460b      	mov	r3, r1
 80001ca:	009b      	lsls	r3, r3, #2
 80001cc:	440b      	add	r3, r1
 80001ce:	009b      	lsls	r3, r3, #2
 80001d0:	4403      	add	r3, r0
 80001d2:	3308      	adds	r3, #8
 80001d4:	6819      	ldr	r1, [r3, #0]
 80001d6:	4813      	ldr	r0, [pc, #76]	; (8000224 <SCH_Update+0xd8>)
 80001d8:	4613      	mov	r3, r2
 80001da:	009b      	lsls	r3, r3, #2
 80001dc:	4413      	add	r3, r2
 80001de:	009b      	lsls	r3, r3, #2
 80001e0:	4403      	add	r3, r0
 80001e2:	3304      	adds	r3, #4
 80001e4:	6019      	str	r1, [r3, #0]
 80001e6:	e011      	b.n	800020c <SCH_Update+0xc0>
				}
			}
			else{
				SCH_tasks_G[Index].Delay--;
 80001e8:	79fa      	ldrb	r2, [r7, #7]
 80001ea:	490e      	ldr	r1, [pc, #56]	; (8000224 <SCH_Update+0xd8>)
 80001ec:	4613      	mov	r3, r2
 80001ee:	009b      	lsls	r3, r3, #2
 80001f0:	4413      	add	r3, r2
 80001f2:	009b      	lsls	r3, r3, #2
 80001f4:	440b      	add	r3, r1
 80001f6:	3304      	adds	r3, #4
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	1e59      	subs	r1, r3, #1
 80001fc:	4809      	ldr	r0, [pc, #36]	; (8000224 <SCH_Update+0xd8>)
 80001fe:	4613      	mov	r3, r2
 8000200:	009b      	lsls	r3, r3, #2
 8000202:	4413      	add	r3, r2
 8000204:	009b      	lsls	r3, r3, #2
 8000206:	4403      	add	r3, r0
 8000208:	3304      	adds	r3, #4
 800020a:	6019      	str	r1, [r3, #0]
	for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	3301      	adds	r3, #1
 8000210:	71fb      	strb	r3, [r7, #7]
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	2b27      	cmp	r3, #39	; 0x27
 8000216:	d99f      	bls.n	8000158 <SCH_Update+0xc>
			}
		}
	}
}
 8000218:	bf00      	nop
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr
 8000224:	20000094 	.word	0x20000094

08000228 <SCH_Add_Task>:
unsigned char SCH_Add_Task(void(*pFunction)() , unsigned int DELAY,unsigned int PERIOD){
 8000228:	b480      	push	{r7}
 800022a:	b087      	sub	sp, #28
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	607a      	str	r2, [r7, #4]
	unsigned char Index = 0;
 8000234:	2300      	movs	r3, #0
 8000236:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)){
 8000238:	e002      	b.n	8000240 <SCH_Add_Task+0x18>
		Index++;
 800023a:	7dfb      	ldrb	r3, [r7, #23]
 800023c:	3301      	adds	r3, #1
 800023e:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)){
 8000240:	7dfa      	ldrb	r2, [r7, #23]
 8000242:	4920      	ldr	r1, [pc, #128]	; (80002c4 <SCH_Add_Task+0x9c>)
 8000244:	4613      	mov	r3, r2
 8000246:	009b      	lsls	r3, r3, #2
 8000248:	4413      	add	r3, r2
 800024a:	009b      	lsls	r3, r3, #2
 800024c:	440b      	add	r3, r1
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d002      	beq.n	800025a <SCH_Add_Task+0x32>
 8000254:	7dfb      	ldrb	r3, [r7, #23]
 8000256:	2b27      	cmp	r3, #39	; 0x27
 8000258:	d9ef      	bls.n	800023a <SCH_Add_Task+0x12>
	}
	if(Index == SCH_MAX_TASKS){
 800025a:	7dfb      	ldrb	r3, [r7, #23]
 800025c:	2b28      	cmp	r3, #40	; 0x28
 800025e:	d104      	bne.n	800026a <SCH_Add_Task+0x42>
		Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 8000260:	4b19      	ldr	r3, [pc, #100]	; (80002c8 <SCH_Add_Task+0xa0>)
 8000262:	2201      	movs	r2, #1
 8000264:	701a      	strb	r2, [r3, #0]
		return SCH_MAX_TASKS;
 8000266:	2328      	movs	r3, #40	; 0x28
 8000268:	e027      	b.n	80002ba <SCH_Add_Task+0x92>
	}
	SCH_tasks_G[Index].pTask = pFunction;
 800026a:	7dfa      	ldrb	r2, [r7, #23]
 800026c:	4915      	ldr	r1, [pc, #84]	; (80002c4 <SCH_Add_Task+0x9c>)
 800026e:	4613      	mov	r3, r2
 8000270:	009b      	lsls	r3, r3, #2
 8000272:	4413      	add	r3, r2
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	440b      	add	r3, r1
 8000278:	68fa      	ldr	r2, [r7, #12]
 800027a:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Delay = DELAY;
 800027c:	7dfa      	ldrb	r2, [r7, #23]
 800027e:	4911      	ldr	r1, [pc, #68]	; (80002c4 <SCH_Add_Task+0x9c>)
 8000280:	4613      	mov	r3, r2
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	4413      	add	r3, r2
 8000286:	009b      	lsls	r3, r3, #2
 8000288:	440b      	add	r3, r1
 800028a:	3304      	adds	r3, #4
 800028c:	68ba      	ldr	r2, [r7, #8]
 800028e:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Period = PERIOD;
 8000290:	7dfa      	ldrb	r2, [r7, #23]
 8000292:	490c      	ldr	r1, [pc, #48]	; (80002c4 <SCH_Add_Task+0x9c>)
 8000294:	4613      	mov	r3, r2
 8000296:	009b      	lsls	r3, r3, #2
 8000298:	4413      	add	r3, r2
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	440b      	add	r3, r1
 800029e:	3308      	adds	r3, #8
 80002a0:	687a      	ldr	r2, [r7, #4]
 80002a2:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].RunMe = 0;
 80002a4:	7dfa      	ldrb	r2, [r7, #23]
 80002a6:	4907      	ldr	r1, [pc, #28]	; (80002c4 <SCH_Add_Task+0x9c>)
 80002a8:	4613      	mov	r3, r2
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	4413      	add	r3, r2
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	440b      	add	r3, r1
 80002b2:	330c      	adds	r3, #12
 80002b4:	2200      	movs	r2, #0
 80002b6:	701a      	strb	r2, [r3, #0]
	return Index;
 80002b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	371c      	adds	r7, #28
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	20000094 	.word	0x20000094
 80002c8:	20000028 	.word	0x20000028

080002cc <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
	unsigned char Index ;
	for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 80002d2:	2300      	movs	r3, #0
 80002d4:	71fb      	strb	r3, [r7, #7]
 80002d6:	e039      	b.n	800034c <SCH_Dispatch_Tasks+0x80>
		if(SCH_tasks_G [Index].RunMe > 0){
 80002d8:	79fa      	ldrb	r2, [r7, #7]
 80002da:	4922      	ldr	r1, [pc, #136]	; (8000364 <SCH_Dispatch_Tasks+0x98>)
 80002dc:	4613      	mov	r3, r2
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	4413      	add	r3, r2
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	440b      	add	r3, r1
 80002e6:	330c      	adds	r3, #12
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d02b      	beq.n	8000346 <SCH_Dispatch_Tasks+0x7a>
			(*SCH_tasks_G[Index].pTask)();
 80002ee:	79fa      	ldrb	r2, [r7, #7]
 80002f0:	491c      	ldr	r1, [pc, #112]	; (8000364 <SCH_Dispatch_Tasks+0x98>)
 80002f2:	4613      	mov	r3, r2
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	4413      	add	r3, r2
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	440b      	add	r3, r1
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4798      	blx	r3
			SCH_tasks_G[Index].RunMe--;
 8000300:	79fa      	ldrb	r2, [r7, #7]
 8000302:	4918      	ldr	r1, [pc, #96]	; (8000364 <SCH_Dispatch_Tasks+0x98>)
 8000304:	4613      	mov	r3, r2
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	4413      	add	r3, r2
 800030a:	009b      	lsls	r3, r3, #2
 800030c:	440b      	add	r3, r1
 800030e:	330c      	adds	r3, #12
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	3b01      	subs	r3, #1
 8000314:	b2d8      	uxtb	r0, r3
 8000316:	4913      	ldr	r1, [pc, #76]	; (8000364 <SCH_Dispatch_Tasks+0x98>)
 8000318:	4613      	mov	r3, r2
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	4413      	add	r3, r2
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	440b      	add	r3, r1
 8000322:	330c      	adds	r3, #12
 8000324:	4602      	mov	r2, r0
 8000326:	701a      	strb	r2, [r3, #0]
			if(SCH_tasks_G[Index].Period == 0){
 8000328:	79fa      	ldrb	r2, [r7, #7]
 800032a:	490e      	ldr	r1, [pc, #56]	; (8000364 <SCH_Dispatch_Tasks+0x98>)
 800032c:	4613      	mov	r3, r2
 800032e:	009b      	lsls	r3, r3, #2
 8000330:	4413      	add	r3, r2
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	440b      	add	r3, r1
 8000336:	3308      	adds	r3, #8
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d103      	bne.n	8000346 <SCH_Dispatch_Tasks+0x7a>
				SCH_Delete_Task(Index);
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	4618      	mov	r0, r3
 8000342:	f000 f811 	bl	8000368 <SCH_Delete_Task>
	for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	3301      	adds	r3, #1
 800034a:	71fb      	strb	r3, [r7, #7]
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	2b27      	cmp	r3, #39	; 0x27
 8000350:	d9c2      	bls.n	80002d8 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
	SCH_Report_Status();
 8000352:	f000 f857 	bl	8000404 <SCH_Report_Status>
	SCH_Go_To_Sleep();
 8000356:	f000 f84f 	bl	80003f8 <SCH_Go_To_Sleep>
}
 800035a:	bf00      	nop
 800035c:	3708      	adds	r7, #8
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000094 	.word	0x20000094

08000368 <SCH_Delete_Task>:
uint8_t SCH_Delete_Task(const uint32_t TASK_INDEX){
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	unsigned char Return_code;
	if(SCH_tasks_G[TASK_INDEX].pTask == 0){
 8000370:	491f      	ldr	r1, [pc, #124]	; (80003f0 <SCH_Delete_Task+0x88>)
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	4613      	mov	r3, r2
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	4413      	add	r3, r2
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	440b      	add	r3, r1
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d105      	bne.n	8000390 <SCH_Delete_Task+0x28>
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 8000384:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <SCH_Delete_Task+0x8c>)
 8000386:	2208      	movs	r2, #8
 8000388:	701a      	strb	r2, [r3, #0]
		Return_code = RETURN_ERROR;
 800038a:	2309      	movs	r3, #9
 800038c:	73fb      	strb	r3, [r7, #15]
 800038e:	e001      	b.n	8000394 <SCH_Delete_Task+0x2c>
	}
	else{
		Return_code = RETURN_NORMAL;
 8000390:	230a      	movs	r3, #10
 8000392:	73fb      	strb	r3, [r7, #15]
	}
	SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 8000394:	4916      	ldr	r1, [pc, #88]	; (80003f0 <SCH_Delete_Task+0x88>)
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	4613      	mov	r3, r2
 800039a:	009b      	lsls	r3, r3, #2
 800039c:	4413      	add	r3, r2
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	440b      	add	r3, r1
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Delay = 0;
 80003a6:	4912      	ldr	r1, [pc, #72]	; (80003f0 <SCH_Delete_Task+0x88>)
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	4613      	mov	r3, r2
 80003ac:	009b      	lsls	r3, r3, #2
 80003ae:	4413      	add	r3, r2
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	440b      	add	r3, r1
 80003b4:	3304      	adds	r3, #4
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Period = 0;
 80003ba:	490d      	ldr	r1, [pc, #52]	; (80003f0 <SCH_Delete_Task+0x88>)
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	4613      	mov	r3, r2
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	4413      	add	r3, r2
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	440b      	add	r3, r1
 80003c8:	3308      	adds	r3, #8
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].RunMe = 0;
 80003ce:	4908      	ldr	r1, [pc, #32]	; (80003f0 <SCH_Delete_Task+0x88>)
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	4613      	mov	r3, r2
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	4413      	add	r3, r2
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	440b      	add	r3, r1
 80003dc:	330c      	adds	r3, #12
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
	return Return_code;
 80003e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	3714      	adds	r7, #20
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	20000094 	.word	0x20000094
 80003f4:	20000028 	.word	0x20000028

080003f8 <SCH_Go_To_Sleep>:
void SCH_Go_To_Sleep(void){
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
//todo
}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr

08000404 <SCH_Report_Status>:
void SCH_Report_Status(void){
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
				Error_code_G = 0;
			}
		}
	}
#endif
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr

08000410 <SetMode>:
int mode4_flag = 0;
int save_counterTimeSet = 0;
int save_mode = 0;
int counter_x = 0;
int counter_y = 0;
void SetMode(void){
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	if(ProcessButton3() == 1){
 8000414:	f001 f900 	bl	8001618 <ProcessButton3>
 8000418:	4603      	mov	r3, r0
 800041a:	2b01      	cmp	r3, #1
 800041c:	d135      	bne.n	800048a <SetMode+0x7a>
		if(counterMode == 2){
 800041e:	4b1c      	ldr	r3, [pc, #112]	; (8000490 <SetMode+0x80>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2b02      	cmp	r3, #2
 8000424:	d10c      	bne.n	8000440 <SetMode+0x30>
			mode2_flag = 1;
 8000426:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <SetMode+0x84>)
 8000428:	2201      	movs	r2, #1
 800042a:	601a      	str	r2, [r3, #0]
			mode3_flag = 0;
 800042c:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <SetMode+0x88>)
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
			mode4_flag = 0;
 8000432:	4b1a      	ldr	r3, [pc, #104]	; (800049c <SetMode+0x8c>)
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
			save_counterTimeSet = counterTimeSet;
 8000438:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <SetMode+0x90>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a19      	ldr	r2, [pc, #100]	; (80004a4 <SetMode+0x94>)
 800043e:	6013      	str	r3, [r2, #0]
		}
		if(counterMode == 3){
 8000440:	4b13      	ldr	r3, [pc, #76]	; (8000490 <SetMode+0x80>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b03      	cmp	r3, #3
 8000446:	d10c      	bne.n	8000462 <SetMode+0x52>
			mode2_flag = 0;
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <SetMode+0x84>)
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
			mode3_flag = 1;
 800044e:	4b12      	ldr	r3, [pc, #72]	; (8000498 <SetMode+0x88>)
 8000450:	2201      	movs	r2, #1
 8000452:	601a      	str	r2, [r3, #0]
			mode4_flag = 0;
 8000454:	4b11      	ldr	r3, [pc, #68]	; (800049c <SetMode+0x8c>)
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
			save_counterTimeSet = counterTimeSet;
 800045a:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <SetMode+0x90>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a11      	ldr	r2, [pc, #68]	; (80004a4 <SetMode+0x94>)
 8000460:	6013      	str	r3, [r2, #0]
		}
		if(counterMode == 4){
 8000462:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <SetMode+0x80>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2b04      	cmp	r3, #4
 8000468:	d10f      	bne.n	800048a <SetMode+0x7a>
			mode1_flag = 1;
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <SetMode+0x98>)
 800046c:	2201      	movs	r2, #1
 800046e:	601a      	str	r2, [r3, #0]
			mode2_flag = 0;
 8000470:	4b08      	ldr	r3, [pc, #32]	; (8000494 <SetMode+0x84>)
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
			mode3_flag = 0;
 8000476:	4b08      	ldr	r3, [pc, #32]	; (8000498 <SetMode+0x88>)
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
			mode4_flag = 1;
 800047c:	4b07      	ldr	r3, [pc, #28]	; (800049c <SetMode+0x8c>)
 800047e:	2201      	movs	r2, #1
 8000480:	601a      	str	r2, [r3, #0]
			save_counterTimeSet = counterTimeSet;
 8000482:	4b07      	ldr	r3, [pc, #28]	; (80004a0 <SetMode+0x90>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a07      	ldr	r2, [pc, #28]	; (80004a4 <SetMode+0x94>)
 8000488:	6013      	str	r3, [r2, #0]
		}
	}
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	20000068 	.word	0x20000068
 8000494:	20000034 	.word	0x20000034
 8000498:	20000038 	.word	0x20000038
 800049c:	2000003c 	.word	0x2000003c
 80004a0:	2000006c 	.word	0x2000006c
 80004a4:	20000040 	.word	0x20000040
 80004a8:	20000030 	.word	0x20000030

080004ac <ChangeModeX>:
void ChangeModeX(void){
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	if(counterMode == 1){
 80004b0:	4b1a      	ldr	r3, [pc, #104]	; (800051c <ChangeModeX+0x70>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d102      	bne.n	80004be <ChangeModeX+0x12>
		mode4_flag = 0;
 80004b8:	4b19      	ldr	r3, [pc, #100]	; (8000520 <ChangeModeX+0x74>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
	}
	if(counterMode == 2){
 80004be:	4b17      	ldr	r3, [pc, #92]	; (800051c <ChangeModeX+0x70>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	2b02      	cmp	r3, #2
 80004c4:	d108      	bne.n	80004d8 <ChangeModeX+0x2c>
		if(mode2_flag == 0){
 80004c6:	4b17      	ldr	r3, [pc, #92]	; (8000524 <ChangeModeX+0x78>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d104      	bne.n	80004d8 <ChangeModeX+0x2c>
			statusx = CONF_RED;
 80004ce:	4b16      	ldr	r3, [pc, #88]	; (8000528 <ChangeModeX+0x7c>)
 80004d0:	220b      	movs	r2, #11
 80004d2:	601a      	str	r2, [r3, #0]
			InitLED();
 80004d4:	f001 fc94 	bl	8001e00 <InitLED>
		}
	}
	if(counterMode == 3){
 80004d8:	4b10      	ldr	r3, [pc, #64]	; (800051c <ChangeModeX+0x70>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b03      	cmp	r3, #3
 80004de:	d10b      	bne.n	80004f8 <ChangeModeX+0x4c>
		mode2_flag = 0;
 80004e0:	4b10      	ldr	r3, [pc, #64]	; (8000524 <ChangeModeX+0x78>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
		if(mode3_flag == 0){
 80004e6:	4b11      	ldr	r3, [pc, #68]	; (800052c <ChangeModeX+0x80>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d104      	bne.n	80004f8 <ChangeModeX+0x4c>
			statusx = CONF_GREEN;
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <ChangeModeX+0x7c>)
 80004f0:	220c      	movs	r2, #12
 80004f2:	601a      	str	r2, [r3, #0]
			InitLED();
 80004f4:	f001 fc84 	bl	8001e00 <InitLED>
		}
	}
	if(counterMode == 4){
 80004f8:	4b08      	ldr	r3, [pc, #32]	; (800051c <ChangeModeX+0x70>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b04      	cmp	r3, #4
 80004fe:	d10b      	bne.n	8000518 <ChangeModeX+0x6c>
		mode3_flag = 0;
 8000500:	4b0a      	ldr	r3, [pc, #40]	; (800052c <ChangeModeX+0x80>)
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
		if(mode4_flag == 0){
 8000506:	4b06      	ldr	r3, [pc, #24]	; (8000520 <ChangeModeX+0x74>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d104      	bne.n	8000518 <ChangeModeX+0x6c>
			statusx = CONF_YELLOW;
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <ChangeModeX+0x7c>)
 8000510:	220d      	movs	r2, #13
 8000512:	601a      	str	r2, [r3, #0]
			InitLED();
 8000514:	f001 fc74 	bl	8001e00 <InitLED>
		}
	}
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000068 	.word	0x20000068
 8000520:	2000003c 	.word	0x2000003c
 8000524:	20000034 	.word	0x20000034
 8000528:	20000054 	.word	0x20000054
 800052c:	20000038 	.word	0x20000038

08000530 <ChangeModeY>:
void ChangeModeY(void){
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	if(counterMode == 1){
 8000534:	4b2f      	ldr	r3, [pc, #188]	; (80005f4 <ChangeModeY+0xc4>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d12b      	bne.n	8000594 <ChangeModeY+0x64>
		mode4_flag = 0;
 800053c:	4b2e      	ldr	r3, [pc, #184]	; (80005f8 <ChangeModeY+0xc8>)
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
		if(mode1_flag == 1){
 8000542:	4b2e      	ldr	r3, [pc, #184]	; (80005fc <ChangeModeY+0xcc>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d124      	bne.n	8000594 <ChangeModeY+0x64>
			mode1_flag = 0;
 800054a:	4b2c      	ldr	r3, [pc, #176]	; (80005fc <ChangeModeY+0xcc>)
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
			statusx = AUTO_RED;
 8000550:	4b2b      	ldr	r3, [pc, #172]	; (8000600 <ChangeModeY+0xd0>)
 8000552:	2202      	movs	r2, #2
 8000554:	601a      	str	r2, [r3, #0]
			counter_x = 50;
 8000556:	4b2b      	ldr	r3, [pc, #172]	; (8000604 <ChangeModeY+0xd4>)
 8000558:	2232      	movs	r2, #50	; 0x32
 800055a:	601a      	str	r2, [r3, #0]
			number_clock1 = counter_x/10;
 800055c:	4b29      	ldr	r3, [pc, #164]	; (8000604 <ChangeModeY+0xd4>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a29      	ldr	r2, [pc, #164]	; (8000608 <ChangeModeY+0xd8>)
 8000562:	fb82 1203 	smull	r1, r2, r2, r3
 8000566:	1092      	asrs	r2, r2, #2
 8000568:	17db      	asrs	r3, r3, #31
 800056a:	1ad3      	subs	r3, r2, r3
 800056c:	4a27      	ldr	r2, [pc, #156]	; (800060c <ChangeModeY+0xdc>)
 800056e:	6013      	str	r3, [r2, #0]
			statusy = AUTO_GREEN;
 8000570:	4b27      	ldr	r3, [pc, #156]	; (8000610 <ChangeModeY+0xe0>)
 8000572:	2203      	movs	r2, #3
 8000574:	601a      	str	r2, [r3, #0]
			counter_y = 30;
 8000576:	4b27      	ldr	r3, [pc, #156]	; (8000614 <ChangeModeY+0xe4>)
 8000578:	221e      	movs	r2, #30
 800057a:	601a      	str	r2, [r3, #0]
			number_clock2 = counter_y/10;
 800057c:	4b25      	ldr	r3, [pc, #148]	; (8000614 <ChangeModeY+0xe4>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a21      	ldr	r2, [pc, #132]	; (8000608 <ChangeModeY+0xd8>)
 8000582:	fb82 1203 	smull	r1, r2, r2, r3
 8000586:	1092      	asrs	r2, r2, #2
 8000588:	17db      	asrs	r3, r3, #31
 800058a:	1ad3      	subs	r3, r2, r3
 800058c:	4a22      	ldr	r2, [pc, #136]	; (8000618 <ChangeModeY+0xe8>)
 800058e:	6013      	str	r3, [r2, #0]
			InitLED();
 8000590:	f001 fc36 	bl	8001e00 <InitLED>
		}
	}
	if(counterMode == 2){
 8000594:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <ChangeModeY+0xc4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b02      	cmp	r3, #2
 800059a:	d108      	bne.n	80005ae <ChangeModeY+0x7e>
		if(mode2_flag == 0){
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <ChangeModeY+0xec>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d104      	bne.n	80005ae <ChangeModeY+0x7e>
			statusy = CONF_RED;
 80005a4:	4b1a      	ldr	r3, [pc, #104]	; (8000610 <ChangeModeY+0xe0>)
 80005a6:	220b      	movs	r2, #11
 80005a8:	601a      	str	r2, [r3, #0]
			InitLED();
 80005aa:	f001 fc29 	bl	8001e00 <InitLED>
		}
	}
	if(counterMode == 3){
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <ChangeModeY+0xc4>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b03      	cmp	r3, #3
 80005b4:	d10b      	bne.n	80005ce <ChangeModeY+0x9e>
		mode2_flag = 0;
 80005b6:	4b19      	ldr	r3, [pc, #100]	; (800061c <ChangeModeY+0xec>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
		if(mode3_flag == 0){
 80005bc:	4b18      	ldr	r3, [pc, #96]	; (8000620 <ChangeModeY+0xf0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d104      	bne.n	80005ce <ChangeModeY+0x9e>
			statusy = CONF_GREEN;
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <ChangeModeY+0xe0>)
 80005c6:	220c      	movs	r2, #12
 80005c8:	601a      	str	r2, [r3, #0]
			InitLED();
 80005ca:	f001 fc19 	bl	8001e00 <InitLED>
		}
	}
	if(counterMode == 4){
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <ChangeModeY+0xc4>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b04      	cmp	r3, #4
 80005d4:	d10b      	bne.n	80005ee <ChangeModeY+0xbe>
		mode3_flag = 0;
 80005d6:	4b12      	ldr	r3, [pc, #72]	; (8000620 <ChangeModeY+0xf0>)
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
		if(mode4_flag == 0){
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <ChangeModeY+0xc8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d104      	bne.n	80005ee <ChangeModeY+0xbe>
			statusy = CONF_YELLOW;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <ChangeModeY+0xe0>)
 80005e6:	220d      	movs	r2, #13
 80005e8:	601a      	str	r2, [r3, #0]
			InitLED();
 80005ea:	f001 fc09 	bl	8001e00 <InitLED>
		}
	}
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000068 	.word	0x20000068
 80005f8:	2000003c 	.word	0x2000003c
 80005fc:	20000030 	.word	0x20000030
 8000600:	20000054 	.word	0x20000054
 8000604:	20000044 	.word	0x20000044
 8000608:	66666667 	.word	0x66666667
 800060c:	2000005c 	.word	0x2000005c
 8000610:	20000058 	.word	0x20000058
 8000614:	20000048 	.word	0x20000048
 8000618:	20000060 	.word	0x20000060
 800061c:	20000034 	.word	0x20000034
 8000620:	20000038 	.word	0x20000038

08000624 <fsm_clock>:
void fsm_clock(void){
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	if(statusx != CONF_GREEN && statusx != CONF_RED && statusx != CONF_YELLOW){
 8000628:	4b33      	ldr	r3, [pc, #204]	; (80006f8 <fsm_clock+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b0c      	cmp	r3, #12
 800062e:	d061      	beq.n	80006f4 <fsm_clock+0xd0>
 8000630:	4b31      	ldr	r3, [pc, #196]	; (80006f8 <fsm_clock+0xd4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b0b      	cmp	r3, #11
 8000636:	d05d      	beq.n	80006f4 <fsm_clock+0xd0>
 8000638:	4b2f      	ldr	r3, [pc, #188]	; (80006f8 <fsm_clock+0xd4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b0d      	cmp	r3, #13
 800063e:	d059      	beq.n	80006f4 <fsm_clock+0xd0>
		if(DisplayCounter == 0){
 8000640:	4b2e      	ldr	r3, [pc, #184]	; (80006fc <fsm_clock+0xd8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d10b      	bne.n	8000660 <fsm_clock+0x3c>
			Display7Seg(number_clock2/10);
 8000648:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <fsm_clock+0xdc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a2d      	ldr	r2, [pc, #180]	; (8000704 <fsm_clock+0xe0>)
 800064e:	fb82 1203 	smull	r1, r2, r2, r3
 8000652:	1092      	asrs	r2, r2, #2
 8000654:	17db      	asrs	r3, r3, #31
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	4618      	mov	r0, r3
 800065a:	f001 f8cb 	bl	80017f4 <Display7Seg>
 800065e:	e038      	b.n	80006d2 <fsm_clock+0xae>
		}
		else if(DisplayCounter == 1){
 8000660:	4b26      	ldr	r3, [pc, #152]	; (80006fc <fsm_clock+0xd8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d110      	bne.n	800068a <fsm_clock+0x66>
			Display7Seg(number_clock2%10);
 8000668:	4b25      	ldr	r3, [pc, #148]	; (8000700 <fsm_clock+0xdc>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <fsm_clock+0xe0>)
 800066e:	fb83 1302 	smull	r1, r3, r3, r2
 8000672:	1099      	asrs	r1, r3, #2
 8000674:	17d3      	asrs	r3, r2, #31
 8000676:	1ac9      	subs	r1, r1, r3
 8000678:	460b      	mov	r3, r1
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	440b      	add	r3, r1
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	1ad1      	subs	r1, r2, r3
 8000682:	4608      	mov	r0, r1
 8000684:	f001 f8b6 	bl	80017f4 <Display7Seg>
 8000688:	e023      	b.n	80006d2 <fsm_clock+0xae>
		}
		else if(DisplayCounter == 2){
 800068a:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <fsm_clock+0xd8>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b02      	cmp	r3, #2
 8000690:	d10b      	bne.n	80006aa <fsm_clock+0x86>

			Display7Seg(number_clock1/10);
 8000692:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <fsm_clock+0xe4>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a1b      	ldr	r2, [pc, #108]	; (8000704 <fsm_clock+0xe0>)
 8000698:	fb82 1203 	smull	r1, r2, r2, r3
 800069c:	1092      	asrs	r2, r2, #2
 800069e:	17db      	asrs	r3, r3, #31
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 f8a6 	bl	80017f4 <Display7Seg>
 80006a8:	e013      	b.n	80006d2 <fsm_clock+0xae>
		}
		else if(DisplayCounter == 3){
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <fsm_clock+0xd8>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d10f      	bne.n	80006d2 <fsm_clock+0xae>
			Display7Seg(number_clock1%10);
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <fsm_clock+0xe4>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <fsm_clock+0xe0>)
 80006b8:	fb83 1302 	smull	r1, r3, r3, r2
 80006bc:	1099      	asrs	r1, r3, #2
 80006be:	17d3      	asrs	r3, r2, #31
 80006c0:	1ac9      	subs	r1, r1, r3
 80006c2:	460b      	mov	r3, r1
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	440b      	add	r3, r1
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	1ad1      	subs	r1, r2, r3
 80006cc:	4608      	mov	r0, r1
 80006ce:	f001 f891 	bl	80017f4 <Display7Seg>

		}
		Display(DisplayCounter);
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <fsm_clock+0xd8>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 fa52 	bl	8001b80 <Display>
		DisplayCounter++;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <fsm_clock+0xd8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	3301      	adds	r3, #1
 80006e2:	4a06      	ldr	r2, [pc, #24]	; (80006fc <fsm_clock+0xd8>)
 80006e4:	6013      	str	r3, [r2, #0]
		if(DisplayCounter > 4){
 80006e6:	4b05      	ldr	r3, [pc, #20]	; (80006fc <fsm_clock+0xd8>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	dd02      	ble.n	80006f4 <fsm_clock+0xd0>
			DisplayCounter = 0;
 80006ee:	4b03      	ldr	r3, [pc, #12]	; (80006fc <fsm_clock+0xd8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
		}
	}
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000054 	.word	0x20000054
 80006fc:	2000002c 	.word	0x2000002c
 8000700:	20000060 	.word	0x20000060
 8000704:	66666667 	.word	0x66666667
 8000708:	2000005c 	.word	0x2000005c

0800070c <clockX>:
void clockX(void){
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
	if(statusx != CONF_GREEN && statusx != CONF_RED && statusx != CONF_YELLOW){
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <clockX+0x4c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b0c      	cmp	r3, #12
 8000716:	d01b      	beq.n	8000750 <clockX+0x44>
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <clockX+0x4c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b0b      	cmp	r3, #11
 800071e:	d017      	beq.n	8000750 <clockX+0x44>
 8000720:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <clockX+0x4c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b0d      	cmp	r3, #13
 8000726:	d013      	beq.n	8000750 <clockX+0x44>
		number_clock1--;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <clockX+0x50>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	3b01      	subs	r3, #1
 800072e:	4a0b      	ldr	r2, [pc, #44]	; (800075c <clockX+0x50>)
 8000730:	6013      	str	r3, [r2, #0]
		if(number_clock1 <= 0){
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <clockX+0x50>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	dc0a      	bgt.n	8000750 <clockX+0x44>
			number_clock1 = counter_x/10 + 1;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <clockX+0x54>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a09      	ldr	r2, [pc, #36]	; (8000764 <clockX+0x58>)
 8000740:	fb82 1203 	smull	r1, r2, r2, r3
 8000744:	1092      	asrs	r2, r2, #2
 8000746:	17db      	asrs	r3, r3, #31
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	3301      	adds	r3, #1
 800074c:	4a03      	ldr	r2, [pc, #12]	; (800075c <clockX+0x50>)
 800074e:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	20000054 	.word	0x20000054
 800075c:	2000005c 	.word	0x2000005c
 8000760:	20000044 	.word	0x20000044
 8000764:	66666667 	.word	0x66666667

08000768 <clockY>:
void clockY(void){
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
	if(statusx != CONF_GREEN && statusx != CONF_RED && statusx != CONF_YELLOW){
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <clockY+0x4c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b0c      	cmp	r3, #12
 8000772:	d01b      	beq.n	80007ac <clockY+0x44>
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <clockY+0x4c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b0b      	cmp	r3, #11
 800077a:	d017      	beq.n	80007ac <clockY+0x44>
 800077c:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <clockY+0x4c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b0d      	cmp	r3, #13
 8000782:	d013      	beq.n	80007ac <clockY+0x44>
		number_clock2--;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <clockY+0x50>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3b01      	subs	r3, #1
 800078a:	4a0b      	ldr	r2, [pc, #44]	; (80007b8 <clockY+0x50>)
 800078c:	6013      	str	r3, [r2, #0]
		if(number_clock2 <= 0){
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <clockY+0x50>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	dc0a      	bgt.n	80007ac <clockY+0x44>
			number_clock2 = counter_y/10 + 1;
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <clockY+0x54>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a09      	ldr	r2, [pc, #36]	; (80007c0 <clockY+0x58>)
 800079c:	fb82 1203 	smull	r1, r2, r2, r3
 80007a0:	1092      	asrs	r2, r2, #2
 80007a2:	17db      	asrs	r3, r3, #31
 80007a4:	1ad3      	subs	r3, r2, r3
 80007a6:	3301      	adds	r3, #1
 80007a8:	4a03      	ldr	r2, [pc, #12]	; (80007b8 <clockY+0x50>)
 80007aa:	6013      	str	r3, [r2, #0]
		}
	}
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	20000054 	.word	0x20000054
 80007b8:	20000060 	.word	0x20000060
 80007bc:	20000048 	.word	0x20000048
 80007c0:	66666667 	.word	0x66666667

080007c4 <fsm_mode>:
void fsm_mode(void){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	if(statusx == CONF_GREEN || statusx == CONF_RED || statusx == CONF_YELLOW){
 80007c8:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <fsm_mode+0xb0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b0c      	cmp	r3, #12
 80007ce:	d007      	beq.n	80007e0 <fsm_mode+0x1c>
 80007d0:	4b28      	ldr	r3, [pc, #160]	; (8000874 <fsm_mode+0xb0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b0b      	cmp	r3, #11
 80007d6:	d003      	beq.n	80007e0 <fsm_mode+0x1c>
 80007d8:	4b26      	ldr	r3, [pc, #152]	; (8000874 <fsm_mode+0xb0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b0d      	cmp	r3, #13
 80007de:	d146      	bne.n	800086e <fsm_mode+0xaa>
		Display(DisplayCounter);
 80007e0:	4b25      	ldr	r3, [pc, #148]	; (8000878 <fsm_mode+0xb4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f001 f9cb 	bl	8001b80 <Display>
		if(DisplayCounter == 0){
 80007ea:	4b23      	ldr	r3, [pc, #140]	; (8000878 <fsm_mode+0xb4>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d103      	bne.n	80007fa <fsm_mode+0x36>
			Display7Seg(0);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f000 fffe 	bl	80017f4 <Display7Seg>
 80007f8:	e02d      	b.n	8000856 <fsm_mode+0x92>
		}
		else if(DisplayCounter == 1){
 80007fa:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <fsm_mode+0xb4>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d105      	bne.n	800080e <fsm_mode+0x4a>
			Display7Seg(counterMode);
 8000802:	4b1e      	ldr	r3, [pc, #120]	; (800087c <fsm_mode+0xb8>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fff4 	bl	80017f4 <Display7Seg>
 800080c:	e023      	b.n	8000856 <fsm_mode+0x92>
		}
		else if(DisplayCounter == 2){
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <fsm_mode+0xb4>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b02      	cmp	r3, #2
 8000814:	d10b      	bne.n	800082e <fsm_mode+0x6a>
			Display7Seg(counterTimeSet/10);
 8000816:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <fsm_mode+0xbc>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a1a      	ldr	r2, [pc, #104]	; (8000884 <fsm_mode+0xc0>)
 800081c:	fb82 1203 	smull	r1, r2, r2, r3
 8000820:	1092      	asrs	r2, r2, #2
 8000822:	17db      	asrs	r3, r3, #31
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f000 ffe4 	bl	80017f4 <Display7Seg>
 800082c:	e013      	b.n	8000856 <fsm_mode+0x92>
		}
		else if(DisplayCounter == 3){
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <fsm_mode+0xb4>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b03      	cmp	r3, #3
 8000834:	d10f      	bne.n	8000856 <fsm_mode+0x92>
			Display7Seg(counterTimeSet%10);
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <fsm_mode+0xbc>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <fsm_mode+0xc0>)
 800083c:	fb83 1302 	smull	r1, r3, r3, r2
 8000840:	1099      	asrs	r1, r3, #2
 8000842:	17d3      	asrs	r3, r2, #31
 8000844:	1ac9      	subs	r1, r1, r3
 8000846:	460b      	mov	r3, r1
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	440b      	add	r3, r1
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	1ad1      	subs	r1, r2, r3
 8000850:	4608      	mov	r0, r1
 8000852:	f000 ffcf 	bl	80017f4 <Display7Seg>
		}
		DisplayCounter++;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <fsm_mode+0xb4>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	3301      	adds	r3, #1
 800085c:	4a06      	ldr	r2, [pc, #24]	; (8000878 <fsm_mode+0xb4>)
 800085e:	6013      	str	r3, [r2, #0]
		if(DisplayCounter > 4){
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <fsm_mode+0xb4>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b04      	cmp	r3, #4
 8000866:	dd02      	ble.n	800086e <fsm_mode+0xaa>
			DisplayCounter = 0;
 8000868:	4b03      	ldr	r3, [pc, #12]	; (8000878 <fsm_mode+0xb4>)
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
		}
	}
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000054 	.word	0x20000054
 8000878:	2000002c 	.word	0x2000002c
 800087c:	20000068 	.word	0x20000068
 8000880:	2000006c 	.word	0x2000006c
 8000884:	66666667 	.word	0x66666667

08000888 <fsm_automatic_runx>:
void fsm_automatic_runx(){
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	switch(statusx){
 800088c:	4b7b      	ldr	r3, [pc, #492]	; (8000a7c <fsm_automatic_runx+0x1f4>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	3b01      	subs	r3, #1
 8000892:	2b03      	cmp	r3, #3
 8000894:	f200 80df 	bhi.w	8000a56 <fsm_automatic_runx+0x1ce>
 8000898:	a201      	add	r2, pc, #4	; (adr r2, 80008a0 <fsm_automatic_runx+0x18>)
 800089a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800089e:	bf00      	nop
 80008a0:	080008b1 	.word	0x080008b1
 80008a4:	080008d3 	.word	0x080008d3
 80008a8:	08000931 	.word	0x08000931
 80008ac:	0800098f 	.word	0x0800098f
	case INIT:
		statusx = AUTO_RED;
 80008b0:	4b72      	ldr	r3, [pc, #456]	; (8000a7c <fsm_automatic_runx+0x1f4>)
 80008b2:	2202      	movs	r2, #2
 80008b4:	601a      	str	r2, [r3, #0]
		counter_x = 50;
 80008b6:	4b72      	ldr	r3, [pc, #456]	; (8000a80 <fsm_automatic_runx+0x1f8>)
 80008b8:	2232      	movs	r2, #50	; 0x32
 80008ba:	601a      	str	r2, [r3, #0]
		number_clock1 = counter_x/10;
 80008bc:	4b70      	ldr	r3, [pc, #448]	; (8000a80 <fsm_automatic_runx+0x1f8>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a70      	ldr	r2, [pc, #448]	; (8000a84 <fsm_automatic_runx+0x1fc>)
 80008c2:	fb82 1203 	smull	r1, r2, r2, r3
 80008c6:	1092      	asrs	r2, r2, #2
 80008c8:	17db      	asrs	r3, r3, #31
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	4a6e      	ldr	r2, [pc, #440]	; (8000a88 <fsm_automatic_runx+0x200>)
 80008ce:	6013      	str	r3, [r2, #0]
		break;
 80008d0:	e0c8      	b.n	8000a64 <fsm_automatic_runx+0x1dc>
	case AUTO_RED:
		DisplayREDX();
 80008d2:	f001 f9d3 	bl	8001c7c <DisplayREDX>
		SetMode();
 80008d6:	f7ff fd9b 	bl	8000410 <SetMode>
		ChangeModeX();
 80008da:	f7ff fde7 	bl	80004ac <ChangeModeX>
		if(counter_x == 0){
 80008de:	4b68      	ldr	r3, [pc, #416]	; (8000a80 <fsm_automatic_runx+0x1f8>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	f040 80b9 	bne.w	8000a5a <fsm_automatic_runx+0x1d2>
			if(mode3_flag == 1){
 80008e8:	4b68      	ldr	r3, [pc, #416]	; (8000a8c <fsm_automatic_runx+0x204>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d118      	bne.n	8000922 <fsm_automatic_runx+0x9a>
				InitLED();
 80008f0:	f001 fa86 	bl	8001e00 <InitLED>
				statusx = MAN_GREEN;
 80008f4:	4b61      	ldr	r3, [pc, #388]	; (8000a7c <fsm_automatic_runx+0x1f4>)
 80008f6:	2209      	movs	r2, #9
 80008f8:	601a      	str	r2, [r3, #0]
				counter_x = save_counterTimeSet*10;
 80008fa:	4b65      	ldr	r3, [pc, #404]	; (8000a90 <fsm_automatic_runx+0x208>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4613      	mov	r3, r2
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	461a      	mov	r2, r3
 8000908:	4b5d      	ldr	r3, [pc, #372]	; (8000a80 <fsm_automatic_runx+0x1f8>)
 800090a:	601a      	str	r2, [r3, #0]
				number_clock1 = counter_x/10;
 800090c:	4b5c      	ldr	r3, [pc, #368]	; (8000a80 <fsm_automatic_runx+0x1f8>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a5c      	ldr	r2, [pc, #368]	; (8000a84 <fsm_automatic_runx+0x1fc>)
 8000912:	fb82 1203 	smull	r1, r2, r2, r3
 8000916:	1092      	asrs	r2, r2, #2
 8000918:	17db      	asrs	r3, r3, #31
 800091a:	1ad3      	subs	r3, r2, r3
 800091c:	4a5a      	ldr	r2, [pc, #360]	; (8000a88 <fsm_automatic_runx+0x200>)
 800091e:	6013      	str	r3, [r2, #0]
			else{
				statusx = AUTO_GREEN;
				counter_x = 30;
			}
		}
		break;
 8000920:	e09b      	b.n	8000a5a <fsm_automatic_runx+0x1d2>
				statusx = AUTO_GREEN;
 8000922:	4b56      	ldr	r3, [pc, #344]	; (8000a7c <fsm_automatic_runx+0x1f4>)
 8000924:	2203      	movs	r2, #3
 8000926:	601a      	str	r2, [r3, #0]
				counter_x = 30;
 8000928:	4b55      	ldr	r3, [pc, #340]	; (8000a80 <fsm_automatic_runx+0x1f8>)
 800092a:	221e      	movs	r2, #30
 800092c:	601a      	str	r2, [r3, #0]
		break;
 800092e:	e094      	b.n	8000a5a <fsm_automatic_runx+0x1d2>
	case AUTO_GREEN:
		DisplayGREENX();
 8000930:	f001 f9d0 	bl	8001cd4 <DisplayGREENX>
		SetMode();
 8000934:	f7ff fd6c 	bl	8000410 <SetMode>
		ChangeModeX();
 8000938:	f7ff fdb8 	bl	80004ac <ChangeModeX>
		if(counter_x == 0){
 800093c:	4b50      	ldr	r3, [pc, #320]	; (8000a80 <fsm_automatic_runx+0x1f8>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	f040 808c 	bne.w	8000a5e <fsm_automatic_runx+0x1d6>
			if(mode4_flag == 1){
 8000946:	4b53      	ldr	r3, [pc, #332]	; (8000a94 <fsm_automatic_runx+0x20c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d118      	bne.n	8000980 <fsm_automatic_runx+0xf8>
				InitLED();
 800094e:	f001 fa57 	bl	8001e00 <InitLED>
				statusx = MAN_YELLOW;
 8000952:	4b4a      	ldr	r3, [pc, #296]	; (8000a7c <fsm_automatic_runx+0x1f4>)
 8000954:	220a      	movs	r2, #10
 8000956:	601a      	str	r2, [r3, #0]
				counter_x = save_counterTimeSet*10;
 8000958:	4b4d      	ldr	r3, [pc, #308]	; (8000a90 <fsm_automatic_runx+0x208>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4613      	mov	r3, r2
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	4413      	add	r3, r2
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	461a      	mov	r2, r3
 8000966:	4b46      	ldr	r3, [pc, #280]	; (8000a80 <fsm_automatic_runx+0x1f8>)
 8000968:	601a      	str	r2, [r3, #0]
				number_clock1 = counter_x/10;
 800096a:	4b45      	ldr	r3, [pc, #276]	; (8000a80 <fsm_automatic_runx+0x1f8>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a45      	ldr	r2, [pc, #276]	; (8000a84 <fsm_automatic_runx+0x1fc>)
 8000970:	fb82 1203 	smull	r1, r2, r2, r3
 8000974:	1092      	asrs	r2, r2, #2
 8000976:	17db      	asrs	r3, r3, #31
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	4a43      	ldr	r2, [pc, #268]	; (8000a88 <fsm_automatic_runx+0x200>)
 800097c:	6013      	str	r3, [r2, #0]
			else{
				statusx = AUTO_YELLOW;
				counter_x = 20;
			}
		}
		break;
 800097e:	e06e      	b.n	8000a5e <fsm_automatic_runx+0x1d6>
				statusx = AUTO_YELLOW;
 8000980:	4b3e      	ldr	r3, [pc, #248]	; (8000a7c <fsm_automatic_runx+0x1f4>)
 8000982:	2204      	movs	r2, #4
 8000984:	601a      	str	r2, [r3, #0]
				counter_x = 20;
 8000986:	4b3e      	ldr	r3, [pc, #248]	; (8000a80 <fsm_automatic_runx+0x1f8>)
 8000988:	2214      	movs	r2, #20
 800098a:	601a      	str	r2, [r3, #0]
		break;
 800098c:	e067      	b.n	8000a5e <fsm_automatic_runx+0x1d6>
	case AUTO_YELLOW:
		DisplayYELLOWX();
 800098e:	f001 f98b 	bl	8001ca8 <DisplayYELLOWX>
		SetMode();
 8000992:	f7ff fd3d 	bl	8000410 <SetMode>
		ChangeModeX();
 8000996:	f7ff fd89 	bl	80004ac <ChangeModeX>
		if(counter_x == 0){
 800099a:	4b39      	ldr	r3, [pc, #228]	; (8000a80 <fsm_automatic_runx+0x1f8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d15f      	bne.n	8000a62 <fsm_automatic_runx+0x1da>
			if(mode2_flag == 1){
 80009a2:	4b3d      	ldr	r3, [pc, #244]	; (8000a98 <fsm_automatic_runx+0x210>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d118      	bne.n	80009dc <fsm_automatic_runx+0x154>
				InitLED();
 80009aa:	f001 fa29 	bl	8001e00 <InitLED>
				statusx = MAN_RED;
 80009ae:	4b33      	ldr	r3, [pc, #204]	; (8000a7c <fsm_automatic_runx+0x1f4>)
 80009b0:	2208      	movs	r2, #8
 80009b2:	601a      	str	r2, [r3, #0]
				counter_x = save_counterTimeSet*10;
 80009b4:	4b36      	ldr	r3, [pc, #216]	; (8000a90 <fsm_automatic_runx+0x208>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4613      	mov	r3, r2
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	4413      	add	r3, r2
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b2f      	ldr	r3, [pc, #188]	; (8000a80 <fsm_automatic_runx+0x1f8>)
 80009c4:	601a      	str	r2, [r3, #0]
				number_clock1 = counter_x/10;
 80009c6:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <fsm_automatic_runx+0x1f8>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a2e      	ldr	r2, [pc, #184]	; (8000a84 <fsm_automatic_runx+0x1fc>)
 80009cc:	fb82 1203 	smull	r1, r2, r2, r3
 80009d0:	1092      	asrs	r2, r2, #2
 80009d2:	17db      	asrs	r3, r3, #31
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	4a2c      	ldr	r2, [pc, #176]	; (8000a88 <fsm_automatic_runx+0x200>)
 80009d8:	6013      	str	r3, [r2, #0]
			else{
				statusx = AUTO_RED;
				counter_x = 50;
			}
		}
		break;
 80009da:	e042      	b.n	8000a62 <fsm_automatic_runx+0x1da>
			else if(mode3_flag == 1){
 80009dc:	4b2b      	ldr	r3, [pc, #172]	; (8000a8c <fsm_automatic_runx+0x204>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d116      	bne.n	8000a12 <fsm_automatic_runx+0x18a>
				statusx = AUTO_RED;
 80009e4:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <fsm_automatic_runx+0x1f4>)
 80009e6:	2202      	movs	r2, #2
 80009e8:	601a      	str	r2, [r3, #0]
				counter_x = save_counterTimeSet*10 + 20;
 80009ea:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <fsm_automatic_runx+0x208>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	4613      	mov	r3, r2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	4413      	add	r3, r2
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	3314      	adds	r3, #20
 80009f8:	4a21      	ldr	r2, [pc, #132]	; (8000a80 <fsm_automatic_runx+0x1f8>)
 80009fa:	6013      	str	r3, [r2, #0]
				number_clock1 = counter_x/10;
 80009fc:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <fsm_automatic_runx+0x1f8>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a20      	ldr	r2, [pc, #128]	; (8000a84 <fsm_automatic_runx+0x1fc>)
 8000a02:	fb82 1203 	smull	r1, r2, r2, r3
 8000a06:	1092      	asrs	r2, r2, #2
 8000a08:	17db      	asrs	r3, r3, #31
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	4a1e      	ldr	r2, [pc, #120]	; (8000a88 <fsm_automatic_runx+0x200>)
 8000a0e:	6013      	str	r3, [r2, #0]
		break;
 8000a10:	e027      	b.n	8000a62 <fsm_automatic_runx+0x1da>
			else if(mode4_flag == 1){
 8000a12:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <fsm_automatic_runx+0x20c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d116      	bne.n	8000a48 <fsm_automatic_runx+0x1c0>
				statusx = AUTO_RED;
 8000a1a:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <fsm_automatic_runx+0x1f4>)
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	601a      	str	r2, [r3, #0]
				counter_x = save_counterTimeSet*10 + 30;
 8000a20:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <fsm_automatic_runx+0x208>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4613      	mov	r3, r2
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	4413      	add	r3, r2
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	331e      	adds	r3, #30
 8000a2e:	4a14      	ldr	r2, [pc, #80]	; (8000a80 <fsm_automatic_runx+0x1f8>)
 8000a30:	6013      	str	r3, [r2, #0]
				number_clock1 = counter_x/10;
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <fsm_automatic_runx+0x1f8>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a13      	ldr	r2, [pc, #76]	; (8000a84 <fsm_automatic_runx+0x1fc>)
 8000a38:	fb82 1203 	smull	r1, r2, r2, r3
 8000a3c:	1092      	asrs	r2, r2, #2
 8000a3e:	17db      	asrs	r3, r3, #31
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	4a11      	ldr	r2, [pc, #68]	; (8000a88 <fsm_automatic_runx+0x200>)
 8000a44:	6013      	str	r3, [r2, #0]
		break;
 8000a46:	e00c      	b.n	8000a62 <fsm_automatic_runx+0x1da>
				statusx = AUTO_RED;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <fsm_automatic_runx+0x1f4>)
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	601a      	str	r2, [r3, #0]
				counter_x = 50;
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <fsm_automatic_runx+0x1f8>)
 8000a50:	2232      	movs	r2, #50	; 0x32
 8000a52:	601a      	str	r2, [r3, #0]
		break;
 8000a54:	e005      	b.n	8000a62 <fsm_automatic_runx+0x1da>
	default:
		break;
 8000a56:	bf00      	nop
 8000a58:	e004      	b.n	8000a64 <fsm_automatic_runx+0x1dc>
		break;
 8000a5a:	bf00      	nop
 8000a5c:	e002      	b.n	8000a64 <fsm_automatic_runx+0x1dc>
		break;
 8000a5e:	bf00      	nop
 8000a60:	e000      	b.n	8000a64 <fsm_automatic_runx+0x1dc>
		break;
 8000a62:	bf00      	nop
	}
	if(counter_x > 0){
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <fsm_automatic_runx+0x1f8>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	dd04      	ble.n	8000a76 <fsm_automatic_runx+0x1ee>
		counter_x--;
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <fsm_automatic_runx+0x1f8>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	3b01      	subs	r3, #1
 8000a72:	4a03      	ldr	r2, [pc, #12]	; (8000a80 <fsm_automatic_runx+0x1f8>)
 8000a74:	6013      	str	r3, [r2, #0]
	}
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000054 	.word	0x20000054
 8000a80:	20000044 	.word	0x20000044
 8000a84:	66666667 	.word	0x66666667
 8000a88:	2000005c 	.word	0x2000005c
 8000a8c:	20000038 	.word	0x20000038
 8000a90:	20000040 	.word	0x20000040
 8000a94:	2000003c 	.word	0x2000003c
 8000a98:	20000034 	.word	0x20000034

08000a9c <fsm_automatic_runy>:
void fsm_automatic_runy(){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	switch(statusy){
 8000aa0:	4ba5      	ldr	r3, [pc, #660]	; (8000d38 <fsm_automatic_runy+0x29c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	2b03      	cmp	r3, #3
 8000aa8:	f200 8133 	bhi.w	8000d12 <fsm_automatic_runy+0x276>
 8000aac:	a201      	add	r2, pc, #4	; (adr r2, 8000ab4 <fsm_automatic_runy+0x18>)
 8000aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab2:	bf00      	nop
 8000ab4:	08000ac5 	.word	0x08000ac5
 8000ab8:	08000ae7 	.word	0x08000ae7
 8000abc:	08000b7d 	.word	0x08000b7d
 8000ac0:	08000c13 	.word	0x08000c13
	case INIT:
		statusy = AUTO_GREEN;
 8000ac4:	4b9c      	ldr	r3, [pc, #624]	; (8000d38 <fsm_automatic_runy+0x29c>)
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	601a      	str	r2, [r3, #0]
		counter_y = 30;
 8000aca:	4b9c      	ldr	r3, [pc, #624]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000acc:	221e      	movs	r2, #30
 8000ace:	601a      	str	r2, [r3, #0]
		number_clock2 = counter_y/10;
 8000ad0:	4b9a      	ldr	r3, [pc, #616]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a9a      	ldr	r2, [pc, #616]	; (8000d40 <fsm_automatic_runy+0x2a4>)
 8000ad6:	fb82 1203 	smull	r1, r2, r2, r3
 8000ada:	1092      	asrs	r2, r2, #2
 8000adc:	17db      	asrs	r3, r3, #31
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	4a98      	ldr	r2, [pc, #608]	; (8000d44 <fsm_automatic_runy+0x2a8>)
 8000ae2:	6013      	str	r3, [r2, #0]
		break;
 8000ae4:	e11c      	b.n	8000d20 <fsm_automatic_runy+0x284>
	case AUTO_RED:
		DisplayREDY();
 8000ae6:	f001 f90b 	bl	8001d00 <DisplayREDY>
		SetMode();
 8000aea:	f7ff fc91 	bl	8000410 <SetMode>
		ChangeModeY();
 8000aee:	f7ff fd1f 	bl	8000530 <ChangeModeY>
		if(mode2_flag == 1){
 8000af2:	4b95      	ldr	r3, [pc, #596]	; (8000d48 <fsm_automatic_runy+0x2ac>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d117      	bne.n	8000b2a <fsm_automatic_runy+0x8e>
			InitLED();
 8000afa:	f001 f981 	bl	8001e00 <InitLED>
			statusy = MAN_RED;
 8000afe:	4b8e      	ldr	r3, [pc, #568]	; (8000d38 <fsm_automatic_runy+0x29c>)
 8000b00:	2208      	movs	r2, #8
 8000b02:	601a      	str	r2, [r3, #0]
			counter_y = save_counterTimeSet*10;
 8000b04:	4b91      	ldr	r3, [pc, #580]	; (8000d4c <fsm_automatic_runy+0x2b0>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	4413      	add	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b8a      	ldr	r3, [pc, #552]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000b14:	601a      	str	r2, [r3, #0]
			number_clock2 = counter_y/10;
 8000b16:	4b89      	ldr	r3, [pc, #548]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a89      	ldr	r2, [pc, #548]	; (8000d40 <fsm_automatic_runy+0x2a4>)
 8000b1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b20:	1092      	asrs	r2, r2, #2
 8000b22:	17db      	asrs	r3, r3, #31
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	4a87      	ldr	r2, [pc, #540]	; (8000d44 <fsm_automatic_runy+0x2a8>)
 8000b28:	6013      	str	r3, [r2, #0]
		}
		if(counter_y == 0){
 8000b2a:	4b84      	ldr	r3, [pc, #528]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f040 80f1 	bne.w	8000d16 <fsm_automatic_runy+0x27a>
			if(mode4_flag == 1){
 8000b34:	4b86      	ldr	r3, [pc, #536]	; (8000d50 <fsm_automatic_runy+0x2b4>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d118      	bne.n	8000b6e <fsm_automatic_runy+0xd2>
				InitLED();
 8000b3c:	f001 f960 	bl	8001e00 <InitLED>
				statusy = MAN_GREEN;
 8000b40:	4b7d      	ldr	r3, [pc, #500]	; (8000d38 <fsm_automatic_runy+0x29c>)
 8000b42:	2209      	movs	r2, #9
 8000b44:	601a      	str	r2, [r3, #0]
				counter_y = save_counterTimeSet*10;
 8000b46:	4b81      	ldr	r3, [pc, #516]	; (8000d4c <fsm_automatic_runy+0x2b0>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	461a      	mov	r2, r3
 8000b54:	4b79      	ldr	r3, [pc, #484]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000b56:	601a      	str	r2, [r3, #0]
				number_clock2 = counter_y/10;
 8000b58:	4b78      	ldr	r3, [pc, #480]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a78      	ldr	r2, [pc, #480]	; (8000d40 <fsm_automatic_runy+0x2a4>)
 8000b5e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b62:	1092      	asrs	r2, r2, #2
 8000b64:	17db      	asrs	r3, r3, #31
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	4a76      	ldr	r2, [pc, #472]	; (8000d44 <fsm_automatic_runy+0x2a8>)
 8000b6a:	6013      	str	r3, [r2, #0]
			else{
			statusy = AUTO_GREEN;
			counter_y = 30;
			}
		}
		break;
 8000b6c:	e0d3      	b.n	8000d16 <fsm_automatic_runy+0x27a>
			statusy = AUTO_GREEN;
 8000b6e:	4b72      	ldr	r3, [pc, #456]	; (8000d38 <fsm_automatic_runy+0x29c>)
 8000b70:	2203      	movs	r2, #3
 8000b72:	601a      	str	r2, [r3, #0]
			counter_y = 30;
 8000b74:	4b71      	ldr	r3, [pc, #452]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000b76:	221e      	movs	r2, #30
 8000b78:	601a      	str	r2, [r3, #0]
		break;
 8000b7a:	e0cc      	b.n	8000d16 <fsm_automatic_runy+0x27a>
	case AUTO_GREEN:
		DisplayGREENY();
 8000b7c:	f001 f8ec 	bl	8001d58 <DisplayGREENY>
		SetMode();
 8000b80:	f7ff fc46 	bl	8000410 <SetMode>
		ChangeModeY();
 8000b84:	f7ff fcd4 	bl	8000530 <ChangeModeY>
		if(mode3_flag == 1){
 8000b88:	4b72      	ldr	r3, [pc, #456]	; (8000d54 <fsm_automatic_runy+0x2b8>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d117      	bne.n	8000bc0 <fsm_automatic_runy+0x124>
			InitLED();
 8000b90:	f001 f936 	bl	8001e00 <InitLED>
			statusy = MAN_GREEN;
 8000b94:	4b68      	ldr	r3, [pc, #416]	; (8000d38 <fsm_automatic_runy+0x29c>)
 8000b96:	2209      	movs	r2, #9
 8000b98:	601a      	str	r2, [r3, #0]
			counter_y = save_counterTimeSet*10;
 8000b9a:	4b6c      	ldr	r3, [pc, #432]	; (8000d4c <fsm_automatic_runy+0x2b0>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4413      	add	r3, r2
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b64      	ldr	r3, [pc, #400]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000baa:	601a      	str	r2, [r3, #0]
			number_clock2 = counter_y/10;
 8000bac:	4b63      	ldr	r3, [pc, #396]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a63      	ldr	r2, [pc, #396]	; (8000d40 <fsm_automatic_runy+0x2a4>)
 8000bb2:	fb82 1203 	smull	r1, r2, r2, r3
 8000bb6:	1092      	asrs	r2, r2, #2
 8000bb8:	17db      	asrs	r3, r3, #31
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	4a61      	ldr	r2, [pc, #388]	; (8000d44 <fsm_automatic_runy+0x2a8>)
 8000bbe:	6013      	str	r3, [r2, #0]
		}
		if(counter_y == 0){
 8000bc0:	4b5e      	ldr	r3, [pc, #376]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f040 80a8 	bne.w	8000d1a <fsm_automatic_runy+0x27e>
			if(mode4_flag == 1){
 8000bca:	4b61      	ldr	r3, [pc, #388]	; (8000d50 <fsm_automatic_runy+0x2b4>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d118      	bne.n	8000c04 <fsm_automatic_runy+0x168>
				InitLED();
 8000bd2:	f001 f915 	bl	8001e00 <InitLED>
				statusy = MAN_YELLOW;
 8000bd6:	4b58      	ldr	r3, [pc, #352]	; (8000d38 <fsm_automatic_runy+0x29c>)
 8000bd8:	220a      	movs	r2, #10
 8000bda:	601a      	str	r2, [r3, #0]
				counter_y = save_counterTimeSet*10;
 8000bdc:	4b5b      	ldr	r3, [pc, #364]	; (8000d4c <fsm_automatic_runy+0x2b0>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4613      	mov	r3, r2
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	4413      	add	r3, r2
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b54      	ldr	r3, [pc, #336]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000bec:	601a      	str	r2, [r3, #0]
				number_clock2 = counter_y/10;
 8000bee:	4b53      	ldr	r3, [pc, #332]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a53      	ldr	r2, [pc, #332]	; (8000d40 <fsm_automatic_runy+0x2a4>)
 8000bf4:	fb82 1203 	smull	r1, r2, r2, r3
 8000bf8:	1092      	asrs	r2, r2, #2
 8000bfa:	17db      	asrs	r3, r3, #31
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	4a51      	ldr	r2, [pc, #324]	; (8000d44 <fsm_automatic_runy+0x2a8>)
 8000c00:	6013      	str	r3, [r2, #0]
			else{
			statusy = AUTO_YELLOW;
			counter_y = 20;
			}
		}
		break;
 8000c02:	e08a      	b.n	8000d1a <fsm_automatic_runy+0x27e>
			statusy = AUTO_YELLOW;
 8000c04:	4b4c      	ldr	r3, [pc, #304]	; (8000d38 <fsm_automatic_runy+0x29c>)
 8000c06:	2204      	movs	r2, #4
 8000c08:	601a      	str	r2, [r3, #0]
			counter_y = 20;
 8000c0a:	4b4c      	ldr	r3, [pc, #304]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000c0c:	2214      	movs	r2, #20
 8000c0e:	601a      	str	r2, [r3, #0]
		break;
 8000c10:	e083      	b.n	8000d1a <fsm_automatic_runy+0x27e>
	case AUTO_YELLOW:
		DisplayYELLOWY();
 8000c12:	f001 f88b 	bl	8001d2c <DisplayYELLOWY>
		SetMode();
 8000c16:	f7ff fbfb 	bl	8000410 <SetMode>
		ChangeModeY();
 8000c1a:	f7ff fc89 	bl	8000530 <ChangeModeY>
		if(mode4_flag == 1){
 8000c1e:	4b4c      	ldr	r3, [pc, #304]	; (8000d50 <fsm_automatic_runy+0x2b4>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d117      	bne.n	8000c56 <fsm_automatic_runy+0x1ba>
			InitLED();
 8000c26:	f001 f8eb 	bl	8001e00 <InitLED>
			statusy = MAN_YELLOW;
 8000c2a:	4b43      	ldr	r3, [pc, #268]	; (8000d38 <fsm_automatic_runy+0x29c>)
 8000c2c:	220a      	movs	r2, #10
 8000c2e:	601a      	str	r2, [r3, #0]
			counter_y = save_counterTimeSet*10;
 8000c30:	4b46      	ldr	r3, [pc, #280]	; (8000d4c <fsm_automatic_runy+0x2b0>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4613      	mov	r3, r2
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	4413      	add	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b3f      	ldr	r3, [pc, #252]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000c40:	601a      	str	r2, [r3, #0]
			number_clock2 = counter_y/10;
 8000c42:	4b3e      	ldr	r3, [pc, #248]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a3e      	ldr	r2, [pc, #248]	; (8000d40 <fsm_automatic_runy+0x2a4>)
 8000c48:	fb82 1203 	smull	r1, r2, r2, r3
 8000c4c:	1092      	asrs	r2, r2, #2
 8000c4e:	17db      	asrs	r3, r3, #31
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	4a3c      	ldr	r2, [pc, #240]	; (8000d44 <fsm_automatic_runy+0x2a8>)
 8000c54:	6013      	str	r3, [r2, #0]
		}
		if(counter_y == 0){
 8000c56:	4b39      	ldr	r3, [pc, #228]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d15f      	bne.n	8000d1e <fsm_automatic_runy+0x282>
			if(mode2_flag == 1){
 8000c5e:	4b3a      	ldr	r3, [pc, #232]	; (8000d48 <fsm_automatic_runy+0x2ac>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d118      	bne.n	8000c98 <fsm_automatic_runy+0x1fc>
				InitLED();
 8000c66:	f001 f8cb 	bl	8001e00 <InitLED>
				statusy = MAN_RED;
 8000c6a:	4b33      	ldr	r3, [pc, #204]	; (8000d38 <fsm_automatic_runy+0x29c>)
 8000c6c:	2208      	movs	r2, #8
 8000c6e:	601a      	str	r2, [r3, #0]
				counter_y = save_counterTimeSet*10;
 8000c70:	4b36      	ldr	r3, [pc, #216]	; (8000d4c <fsm_automatic_runy+0x2b0>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4613      	mov	r3, r2
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	4413      	add	r3, r2
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b2f      	ldr	r3, [pc, #188]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000c80:	601a      	str	r2, [r3, #0]
				number_clock2 = counter_y/10;
 8000c82:	4b2e      	ldr	r3, [pc, #184]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a2e      	ldr	r2, [pc, #184]	; (8000d40 <fsm_automatic_runy+0x2a4>)
 8000c88:	fb82 1203 	smull	r1, r2, r2, r3
 8000c8c:	1092      	asrs	r2, r2, #2
 8000c8e:	17db      	asrs	r3, r3, #31
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	4a2c      	ldr	r2, [pc, #176]	; (8000d44 <fsm_automatic_runy+0x2a8>)
 8000c94:	6013      	str	r3, [r2, #0]
			else{
			statusy = AUTO_RED;
			counter_y = 50;
			}
		}
		break;
 8000c96:	e042      	b.n	8000d1e <fsm_automatic_runy+0x282>
			else if(mode3_flag == 1){
 8000c98:	4b2e      	ldr	r3, [pc, #184]	; (8000d54 <fsm_automatic_runy+0x2b8>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d116      	bne.n	8000cce <fsm_automatic_runy+0x232>
				statusy = AUTO_RED;
 8000ca0:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <fsm_automatic_runy+0x29c>)
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	601a      	str	r2, [r3, #0]
				counter_y = save_counterTimeSet*10 + 20;
 8000ca6:	4b29      	ldr	r3, [pc, #164]	; (8000d4c <fsm_automatic_runy+0x2b0>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	4613      	mov	r3, r2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	4413      	add	r3, r2
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	3314      	adds	r3, #20
 8000cb4:	4a21      	ldr	r2, [pc, #132]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000cb6:	6013      	str	r3, [r2, #0]
				number_clock2 = counter_y/10;
 8000cb8:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a20      	ldr	r2, [pc, #128]	; (8000d40 <fsm_automatic_runy+0x2a4>)
 8000cbe:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc2:	1092      	asrs	r2, r2, #2
 8000cc4:	17db      	asrs	r3, r3, #31
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	4a1e      	ldr	r2, [pc, #120]	; (8000d44 <fsm_automatic_runy+0x2a8>)
 8000cca:	6013      	str	r3, [r2, #0]
		break;
 8000ccc:	e027      	b.n	8000d1e <fsm_automatic_runy+0x282>
			else if(mode4_flag == 1){
 8000cce:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <fsm_automatic_runy+0x2b4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d116      	bne.n	8000d04 <fsm_automatic_runy+0x268>
				statusy = AUTO_RED;
 8000cd6:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <fsm_automatic_runy+0x29c>)
 8000cd8:	2202      	movs	r2, #2
 8000cda:	601a      	str	r2, [r3, #0]
				counter_y = save_counterTimeSet*10 + 30;
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <fsm_automatic_runy+0x2b0>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	331e      	adds	r3, #30
 8000cea:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000cec:	6013      	str	r3, [r2, #0]
				number_clock2 = counter_y/10;
 8000cee:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <fsm_automatic_runy+0x2a4>)
 8000cf4:	fb82 1203 	smull	r1, r2, r2, r3
 8000cf8:	1092      	asrs	r2, r2, #2
 8000cfa:	17db      	asrs	r3, r3, #31
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	4a11      	ldr	r2, [pc, #68]	; (8000d44 <fsm_automatic_runy+0x2a8>)
 8000d00:	6013      	str	r3, [r2, #0]
		break;
 8000d02:	e00c      	b.n	8000d1e <fsm_automatic_runy+0x282>
			statusy = AUTO_RED;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <fsm_automatic_runy+0x29c>)
 8000d06:	2202      	movs	r2, #2
 8000d08:	601a      	str	r2, [r3, #0]
			counter_y = 50;
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000d0c:	2232      	movs	r2, #50	; 0x32
 8000d0e:	601a      	str	r2, [r3, #0]
		break;
 8000d10:	e005      	b.n	8000d1e <fsm_automatic_runy+0x282>
	default:
		break;
 8000d12:	bf00      	nop
 8000d14:	e004      	b.n	8000d20 <fsm_automatic_runy+0x284>
		break;
 8000d16:	bf00      	nop
 8000d18:	e002      	b.n	8000d20 <fsm_automatic_runy+0x284>
		break;
 8000d1a:	bf00      	nop
 8000d1c:	e000      	b.n	8000d20 <fsm_automatic_runy+0x284>
		break;
 8000d1e:	bf00      	nop
	}
	if(counter_y > 0){
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	dd04      	ble.n	8000d32 <fsm_automatic_runy+0x296>
		counter_y--;
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	4a03      	ldr	r2, [pc, #12]	; (8000d3c <fsm_automatic_runy+0x2a0>)
 8000d30:	6013      	str	r3, [r2, #0]
	}
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000058 	.word	0x20000058
 8000d3c:	20000048 	.word	0x20000048
 8000d40:	66666667 	.word	0x66666667
 8000d44:	20000060 	.word	0x20000060
 8000d48:	20000034 	.word	0x20000034
 8000d4c:	20000040 	.word	0x20000040
 8000d50:	2000003c 	.word	0x2000003c
 8000d54:	20000038 	.word	0x20000038

08000d58 <fsm_manual_run1>:
#include "led_display.h"
#include "input_processing.h"
#include "fsm_automatic.h"
int counter_led_x = 0;
int counter_led_y = 0;
void fsm_manual_run1(void){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	switch(statusx){
 8000d5c:	4b8e      	ldr	r3, [pc, #568]	; (8000f98 <fsm_manual_run1+0x240>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3b08      	subs	r3, #8
 8000d62:	2b05      	cmp	r3, #5
 8000d64:	f200 81c5 	bhi.w	80010f2 <fsm_manual_run1+0x39a>
 8000d68:	a201      	add	r2, pc, #4	; (adr r2, 8000d70 <fsm_manual_run1+0x18>)
 8000d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6e:	bf00      	nop
 8000d70:	08000e19 	.word	0x08000e19
 8000d74:	08000f1d 	.word	0x08000f1d
 8000d78:	08001065 	.word	0x08001065
 8000d7c:	08000d89 	.word	0x08000d89
 8000d80:	08000e8d 	.word	0x08000e8d
 8000d84:	08000fc9 	.word	0x08000fc9
	case CONF_RED:
		if(counter_led_x == 0){
 8000d88:	4b84      	ldr	r3, [pc, #528]	; (8000f9c <fsm_manual_run1+0x244>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d104      	bne.n	8000d9a <fsm_manual_run1+0x42>
			DisplayMAN_REDX();
 8000d90:	f000 fff8 	bl	8001d84 <DisplayMAN_REDX>
			counter_led_x = 5;
 8000d94:	4b81      	ldr	r3, [pc, #516]	; (8000f9c <fsm_manual_run1+0x244>)
 8000d96:	2205      	movs	r2, #5
 8000d98:	601a      	str	r2, [r3, #0]
		}
		if(counterMode == 3){
 8000d9a:	4b81      	ldr	r3, [pc, #516]	; (8000fa0 <fsm_manual_run1+0x248>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d104      	bne.n	8000dac <fsm_manual_run1+0x54>
			statusx = CONF_GREEN;
 8000da2:	4b7d      	ldr	r3, [pc, #500]	; (8000f98 <fsm_manual_run1+0x240>)
 8000da4:	220c      	movs	r2, #12
 8000da6:	601a      	str	r2, [r3, #0]
			InitLED();
 8000da8:	f001 f82a 	bl	8001e00 <InitLED>
		}
		SetMode();
 8000dac:	f7ff fb30 	bl	8000410 <SetMode>
		if(mode2_flag == 1){
 8000db0:	4b7c      	ldr	r3, [pc, #496]	; (8000fa4 <fsm_manual_run1+0x24c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	f040 819e 	bne.w	80010f6 <fsm_manual_run1+0x39e>
			statusx = MAN_RED;
 8000dba:	4b77      	ldr	r3, [pc, #476]	; (8000f98 <fsm_manual_run1+0x240>)
 8000dbc:	2208      	movs	r2, #8
 8000dbe:	601a      	str	r2, [r3, #0]
			counter_x = save_counterTimeSet*10;
 8000dc0:	4b79      	ldr	r3, [pc, #484]	; (8000fa8 <fsm_manual_run1+0x250>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b77      	ldr	r3, [pc, #476]	; (8000fac <fsm_manual_run1+0x254>)
 8000dd0:	601a      	str	r2, [r3, #0]
			number_clock1 = counter_x/10;
 8000dd2:	4b76      	ldr	r3, [pc, #472]	; (8000fac <fsm_manual_run1+0x254>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a76      	ldr	r2, [pc, #472]	; (8000fb0 <fsm_manual_run1+0x258>)
 8000dd8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ddc:	1092      	asrs	r2, r2, #2
 8000dde:	17db      	asrs	r3, r3, #31
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	4a74      	ldr	r2, [pc, #464]	; (8000fb4 <fsm_manual_run1+0x25c>)
 8000de4:	6013      	str	r3, [r2, #0]
			statusy = AUTO_GREEN;
 8000de6:	4b74      	ldr	r3, [pc, #464]	; (8000fb8 <fsm_manual_run1+0x260>)
 8000de8:	2203      	movs	r2, #3
 8000dea:	601a      	str	r2, [r3, #0]
			counter_y = save_counterTimeSet*10 - 20;
 8000dec:	4b6e      	ldr	r3, [pc, #440]	; (8000fa8 <fsm_manual_run1+0x250>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4613      	mov	r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	3b14      	subs	r3, #20
 8000dfa:	4a70      	ldr	r2, [pc, #448]	; (8000fbc <fsm_manual_run1+0x264>)
 8000dfc:	6013      	str	r3, [r2, #0]
			number_clock2 = counter_y/10;
 8000dfe:	4b6f      	ldr	r3, [pc, #444]	; (8000fbc <fsm_manual_run1+0x264>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a6b      	ldr	r2, [pc, #428]	; (8000fb0 <fsm_manual_run1+0x258>)
 8000e04:	fb82 1203 	smull	r1, r2, r2, r3
 8000e08:	1092      	asrs	r2, r2, #2
 8000e0a:	17db      	asrs	r3, r3, #31
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	4a6c      	ldr	r2, [pc, #432]	; (8000fc0 <fsm_manual_run1+0x268>)
 8000e10:	6013      	str	r3, [r2, #0]
			InitLED();
 8000e12:	f000 fff5 	bl	8001e00 <InitLED>
		}
		break;
 8000e16:	e16e      	b.n	80010f6 <fsm_manual_run1+0x39e>
	case MAN_RED:
		if(counterMode != 2){
 8000e18:	4b61      	ldr	r3, [pc, #388]	; (8000fa0 <fsm_manual_run1+0x248>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d002      	beq.n	8000e26 <fsm_manual_run1+0xce>
			DisplayREDX();
 8000e20:	f000 ff2c 	bl	8001c7c <DisplayREDX>
 8000e24:	e008      	b.n	8000e38 <fsm_manual_run1+0xe0>
		}
		else{
			if(counter_led_x == 0){
 8000e26:	4b5d      	ldr	r3, [pc, #372]	; (8000f9c <fsm_manual_run1+0x244>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d104      	bne.n	8000e38 <fsm_manual_run1+0xe0>
				DisplayMAN_REDX();
 8000e2e:	f000 ffa9 	bl	8001d84 <DisplayMAN_REDX>
				counter_led_x = 5;
 8000e32:	4b5a      	ldr	r3, [pc, #360]	; (8000f9c <fsm_manual_run1+0x244>)
 8000e34:	2205      	movs	r2, #5
 8000e36:	601a      	str	r2, [r3, #0]
			}
		}
		ChangeModeX();
 8000e38:	f7ff fb38 	bl	80004ac <ChangeModeX>
		fsm_clock();
 8000e3c:	f7ff fbf2 	bl	8000624 <fsm_clock>
		if(counter_x == 0){
 8000e40:	4b5a      	ldr	r3, [pc, #360]	; (8000fac <fsm_manual_run1+0x254>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	f040 8158 	bne.w	80010fa <fsm_manual_run1+0x3a2>
			InitLED();
 8000e4a:	f000 ffd9 	bl	8001e00 <InitLED>
			statusx = AUTO_GREEN;
 8000e4e:	4b52      	ldr	r3, [pc, #328]	; (8000f98 <fsm_manual_run1+0x240>)
 8000e50:	2203      	movs	r2, #3
 8000e52:	601a      	str	r2, [r3, #0]
			if(mode2_flag == 1){
 8000e54:	4b53      	ldr	r3, [pc, #332]	; (8000fa4 <fsm_manual_run1+0x24c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d109      	bne.n	8000e70 <fsm_manual_run1+0x118>
				counter_x = save_counterTimeSet*10 - 20;
 8000e5c:	4b52      	ldr	r3, [pc, #328]	; (8000fa8 <fsm_manual_run1+0x250>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4613      	mov	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	3b14      	subs	r3, #20
 8000e6a:	4a50      	ldr	r2, [pc, #320]	; (8000fac <fsm_manual_run1+0x254>)
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	e002      	b.n	8000e76 <fsm_manual_run1+0x11e>
			}
			else{
				counter_x = 30;
 8000e70:	4b4e      	ldr	r3, [pc, #312]	; (8000fac <fsm_manual_run1+0x254>)
 8000e72:	221e      	movs	r2, #30
 8000e74:	601a      	str	r2, [r3, #0]
			}
			number_clock1 = counter_x/10;
 8000e76:	4b4d      	ldr	r3, [pc, #308]	; (8000fac <fsm_manual_run1+0x254>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a4d      	ldr	r2, [pc, #308]	; (8000fb0 <fsm_manual_run1+0x258>)
 8000e7c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e80:	1092      	asrs	r2, r2, #2
 8000e82:	17db      	asrs	r3, r3, #31
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	4a4b      	ldr	r2, [pc, #300]	; (8000fb4 <fsm_manual_run1+0x25c>)
 8000e88:	6013      	str	r3, [r2, #0]
		}
		break;
 8000e8a:	e136      	b.n	80010fa <fsm_manual_run1+0x3a2>
	case CONF_GREEN:
		if(counter_led_x == 0){
 8000e8c:	4b43      	ldr	r3, [pc, #268]	; (8000f9c <fsm_manual_run1+0x244>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d104      	bne.n	8000e9e <fsm_manual_run1+0x146>
			DisplayMAN_GREENX();
 8000e94:	f000 ff8a 	bl	8001dac <DisplayMAN_GREENX>
			counter_led_x = 5;
 8000e98:	4b40      	ldr	r3, [pc, #256]	; (8000f9c <fsm_manual_run1+0x244>)
 8000e9a:	2205      	movs	r2, #5
 8000e9c:	601a      	str	r2, [r3, #0]
		}
		if(counterMode == 4){
 8000e9e:	4b40      	ldr	r3, [pc, #256]	; (8000fa0 <fsm_manual_run1+0x248>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	d104      	bne.n	8000eb0 <fsm_manual_run1+0x158>
			statusx = CONF_YELLOW;
 8000ea6:	4b3c      	ldr	r3, [pc, #240]	; (8000f98 <fsm_manual_run1+0x240>)
 8000ea8:	220d      	movs	r2, #13
 8000eaa:	601a      	str	r2, [r3, #0]
			InitLED();
 8000eac:	f000 ffa8 	bl	8001e00 <InitLED>
		}
		SetMode();
 8000eb0:	f7ff faae 	bl	8000410 <SetMode>
		if(mode3_flag == 1){
 8000eb4:	4b43      	ldr	r3, [pc, #268]	; (8000fc4 <fsm_manual_run1+0x26c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	f040 8120 	bne.w	80010fe <fsm_manual_run1+0x3a6>
			statusx = AUTO_RED;
 8000ebe:	4b36      	ldr	r3, [pc, #216]	; (8000f98 <fsm_manual_run1+0x240>)
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	601a      	str	r2, [r3, #0]
			counter_x = save_counterTimeSet*10 + 20;
 8000ec4:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <fsm_manual_run1+0x250>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	3314      	adds	r3, #20
 8000ed2:	4a36      	ldr	r2, [pc, #216]	; (8000fac <fsm_manual_run1+0x254>)
 8000ed4:	6013      	str	r3, [r2, #0]
			number_clock1 = counter_x/10;
 8000ed6:	4b35      	ldr	r3, [pc, #212]	; (8000fac <fsm_manual_run1+0x254>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a35      	ldr	r2, [pc, #212]	; (8000fb0 <fsm_manual_run1+0x258>)
 8000edc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ee0:	1092      	asrs	r2, r2, #2
 8000ee2:	17db      	asrs	r3, r3, #31
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	4a33      	ldr	r2, [pc, #204]	; (8000fb4 <fsm_manual_run1+0x25c>)
 8000ee8:	6013      	str	r3, [r2, #0]
			statusy = MAN_GREEN;
 8000eea:	4b33      	ldr	r3, [pc, #204]	; (8000fb8 <fsm_manual_run1+0x260>)
 8000eec:	2209      	movs	r2, #9
 8000eee:	601a      	str	r2, [r3, #0]
			counter_y = save_counterTimeSet*10;
 8000ef0:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <fsm_manual_run1+0x250>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b2f      	ldr	r3, [pc, #188]	; (8000fbc <fsm_manual_run1+0x264>)
 8000f00:	601a      	str	r2, [r3, #0]
			number_clock2 = counter_y/10;
 8000f02:	4b2e      	ldr	r3, [pc, #184]	; (8000fbc <fsm_manual_run1+0x264>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a2a      	ldr	r2, [pc, #168]	; (8000fb0 <fsm_manual_run1+0x258>)
 8000f08:	fb82 1203 	smull	r1, r2, r2, r3
 8000f0c:	1092      	asrs	r2, r2, #2
 8000f0e:	17db      	asrs	r3, r3, #31
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	4a2b      	ldr	r2, [pc, #172]	; (8000fc0 <fsm_manual_run1+0x268>)
 8000f14:	6013      	str	r3, [r2, #0]
			InitLED();
 8000f16:	f000 ff73 	bl	8001e00 <InitLED>
		}
		break;
 8000f1a:	e0f0      	b.n	80010fe <fsm_manual_run1+0x3a6>
	case MAN_GREEN:
		if(counterMode != 3){
 8000f1c:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <fsm_manual_run1+0x248>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d002      	beq.n	8000f2a <fsm_manual_run1+0x1d2>
			DisplayGREENX();
 8000f24:	f000 fed6 	bl	8001cd4 <DisplayGREENX>
 8000f28:	e008      	b.n	8000f3c <fsm_manual_run1+0x1e4>
		}
		else{
			if(counter_led_x == 0){
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <fsm_manual_run1+0x244>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d104      	bne.n	8000f3c <fsm_manual_run1+0x1e4>
				DisplayMAN_GREENX();
 8000f32:	f000 ff3b 	bl	8001dac <DisplayMAN_GREENX>
				counter_led_x = 5;
 8000f36:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <fsm_manual_run1+0x244>)
 8000f38:	2205      	movs	r2, #5
 8000f3a:	601a      	str	r2, [r3, #0]
			}
		}
		ChangeModeX();
 8000f3c:	f7ff fab6 	bl	80004ac <ChangeModeX>
		fsm_clock();
 8000f40:	f7ff fb70 	bl	8000624 <fsm_clock>
		if(counter_x == 0){
 8000f44:	4b19      	ldr	r3, [pc, #100]	; (8000fac <fsm_manual_run1+0x254>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f040 80da 	bne.w	8001102 <fsm_manual_run1+0x3aa>
			InitLED();
 8000f4e:	f000 ff57 	bl	8001e00 <InitLED>
			statusx = AUTO_YELLOW;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <fsm_manual_run1+0x240>)
 8000f54:	2204      	movs	r2, #4
 8000f56:	601a      	str	r2, [r3, #0]
			if(mode2_flag == 1){
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <fsm_manual_run1+0x24c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d10d      	bne.n	8000f7c <fsm_manual_run1+0x224>
				if(save_counterTimeSet < 2){
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <fsm_manual_run1+0x250>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	dc0c      	bgt.n	8000f82 <fsm_manual_run1+0x22a>
					counter_x = save_counterTimeSet*10;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <fsm_manual_run1+0x250>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	4413      	add	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <fsm_manual_run1+0x254>)
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	e002      	b.n	8000f82 <fsm_manual_run1+0x22a>
				}
			}
			else{
				counter_x = 20;
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <fsm_manual_run1+0x254>)
 8000f7e:	2214      	movs	r2, #20
 8000f80:	601a      	str	r2, [r3, #0]
			}
			number_clock1 = counter_x/10;
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <fsm_manual_run1+0x254>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <fsm_manual_run1+0x258>)
 8000f88:	fb82 1203 	smull	r1, r2, r2, r3
 8000f8c:	1092      	asrs	r2, r2, #2
 8000f8e:	17db      	asrs	r3, r3, #31
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	4a08      	ldr	r2, [pc, #32]	; (8000fb4 <fsm_manual_run1+0x25c>)
 8000f94:	6013      	str	r3, [r2, #0]
		}
		break;
 8000f96:	e0b4      	b.n	8001102 <fsm_manual_run1+0x3aa>
 8000f98:	20000054 	.word	0x20000054
 8000f9c:	2000004c 	.word	0x2000004c
 8000fa0:	20000068 	.word	0x20000068
 8000fa4:	20000034 	.word	0x20000034
 8000fa8:	20000040 	.word	0x20000040
 8000fac:	20000044 	.word	0x20000044
 8000fb0:	66666667 	.word	0x66666667
 8000fb4:	2000005c 	.word	0x2000005c
 8000fb8:	20000058 	.word	0x20000058
 8000fbc:	20000048 	.word	0x20000048
 8000fc0:	20000060 	.word	0x20000060
 8000fc4:	20000038 	.word	0x20000038
	case CONF_YELLOW:
		if(counter_led_x == 0){
 8000fc8:	4b56      	ldr	r3, [pc, #344]	; (8001124 <fsm_manual_run1+0x3cc>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d104      	bne.n	8000fda <fsm_manual_run1+0x282>
			DisplayMAN_YELLOWX();
 8000fd0:	f000 ff02 	bl	8001dd8 <DisplayMAN_YELLOWX>
			counter_led_x = 50;
 8000fd4:	4b53      	ldr	r3, [pc, #332]	; (8001124 <fsm_manual_run1+0x3cc>)
 8000fd6:	2232      	movs	r2, #50	; 0x32
 8000fd8:	601a      	str	r2, [r3, #0]
		}
		if(counterMode == 1){
 8000fda:	4b53      	ldr	r3, [pc, #332]	; (8001128 <fsm_manual_run1+0x3d0>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d111      	bne.n	8001006 <fsm_manual_run1+0x2ae>
			statusx = AUTO_RED;
 8000fe2:	4b52      	ldr	r3, [pc, #328]	; (800112c <fsm_manual_run1+0x3d4>)
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	601a      	str	r2, [r3, #0]
			counter_x = 50;
 8000fe8:	4b51      	ldr	r3, [pc, #324]	; (8001130 <fsm_manual_run1+0x3d8>)
 8000fea:	2232      	movs	r2, #50	; 0x32
 8000fec:	601a      	str	r2, [r3, #0]
			number_clock1 = counter_x/10;
 8000fee:	4b50      	ldr	r3, [pc, #320]	; (8001130 <fsm_manual_run1+0x3d8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a50      	ldr	r2, [pc, #320]	; (8001134 <fsm_manual_run1+0x3dc>)
 8000ff4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff8:	1092      	asrs	r2, r2, #2
 8000ffa:	17db      	asrs	r3, r3, #31
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	4a4e      	ldr	r2, [pc, #312]	; (8001138 <fsm_manual_run1+0x3e0>)
 8001000:	6013      	str	r3, [r2, #0]
			InitLED();
 8001002:	f000 fefd 	bl	8001e00 <InitLED>
		}
		SetMode();
 8001006:	f7ff fa03 	bl	8000410 <SetMode>
		if(mode4_flag == 1){
 800100a:	4b4c      	ldr	r3, [pc, #304]	; (800113c <fsm_manual_run1+0x3e4>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d179      	bne.n	8001106 <fsm_manual_run1+0x3ae>
			statusx = MAN_RED;
 8001012:	4b46      	ldr	r3, [pc, #280]	; (800112c <fsm_manual_run1+0x3d4>)
 8001014:	2208      	movs	r2, #8
 8001016:	601a      	str	r2, [r3, #0]
			counter_x = save_counterTimeSet*10 + 30;
 8001018:	4b49      	ldr	r3, [pc, #292]	; (8001140 <fsm_manual_run1+0x3e8>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	331e      	adds	r3, #30
 8001026:	4a42      	ldr	r2, [pc, #264]	; (8001130 <fsm_manual_run1+0x3d8>)
 8001028:	6013      	str	r3, [r2, #0]
			number_clock1 = counter_x/10;
 800102a:	4b41      	ldr	r3, [pc, #260]	; (8001130 <fsm_manual_run1+0x3d8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a41      	ldr	r2, [pc, #260]	; (8001134 <fsm_manual_run1+0x3dc>)
 8001030:	fb82 1203 	smull	r1, r2, r2, r3
 8001034:	1092      	asrs	r2, r2, #2
 8001036:	17db      	asrs	r3, r3, #31
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	4a3f      	ldr	r2, [pc, #252]	; (8001138 <fsm_manual_run1+0x3e0>)
 800103c:	6013      	str	r3, [r2, #0]
			statusy = AUTO_GREEN;
 800103e:	4b41      	ldr	r3, [pc, #260]	; (8001144 <fsm_manual_run1+0x3ec>)
 8001040:	2203      	movs	r2, #3
 8001042:	601a      	str	r2, [r3, #0]
			counter_y = 30;
 8001044:	4b40      	ldr	r3, [pc, #256]	; (8001148 <fsm_manual_run1+0x3f0>)
 8001046:	221e      	movs	r2, #30
 8001048:	601a      	str	r2, [r3, #0]
			number_clock2 = counter_y/10;
 800104a:	4b3f      	ldr	r3, [pc, #252]	; (8001148 <fsm_manual_run1+0x3f0>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a39      	ldr	r2, [pc, #228]	; (8001134 <fsm_manual_run1+0x3dc>)
 8001050:	fb82 1203 	smull	r1, r2, r2, r3
 8001054:	1092      	asrs	r2, r2, #2
 8001056:	17db      	asrs	r3, r3, #31
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	4a3c      	ldr	r2, [pc, #240]	; (800114c <fsm_manual_run1+0x3f4>)
 800105c:	6013      	str	r3, [r2, #0]
			InitLED();
 800105e:	f000 fecf 	bl	8001e00 <InitLED>
		}
		break;
 8001062:	e050      	b.n	8001106 <fsm_manual_run1+0x3ae>
	case MAN_YELLOW:
		if(counterMode != 4){
 8001064:	4b30      	ldr	r3, [pc, #192]	; (8001128 <fsm_manual_run1+0x3d0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b04      	cmp	r3, #4
 800106a:	d002      	beq.n	8001072 <fsm_manual_run1+0x31a>
			DisplayYELLOWX();
 800106c:	f000 fe1c 	bl	8001ca8 <DisplayYELLOWX>
 8001070:	e008      	b.n	8001084 <fsm_manual_run1+0x32c>
		}
		else{
			if(counter_led_x == 0){
 8001072:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <fsm_manual_run1+0x3cc>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d104      	bne.n	8001084 <fsm_manual_run1+0x32c>
				DisplayMAN_YELLOWX();
 800107a:	f000 fead 	bl	8001dd8 <DisplayMAN_YELLOWX>
				counter_led_x = 5;
 800107e:	4b29      	ldr	r3, [pc, #164]	; (8001124 <fsm_manual_run1+0x3cc>)
 8001080:	2205      	movs	r2, #5
 8001082:	601a      	str	r2, [r3, #0]
			}
		}
		ChangeModeX();
 8001084:	f7ff fa12 	bl	80004ac <ChangeModeX>
		fsm_clock();
 8001088:	f7ff facc 	bl	8000624 <fsm_clock>
		if(counter_x == 0){
 800108c:	4b28      	ldr	r3, [pc, #160]	; (8001130 <fsm_manual_run1+0x3d8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d13a      	bne.n	800110a <fsm_manual_run1+0x3b2>
			InitLED();
 8001094:	f000 feb4 	bl	8001e00 <InitLED>
			statusx = AUTO_RED;
 8001098:	4b24      	ldr	r3, [pc, #144]	; (800112c <fsm_manual_run1+0x3d4>)
 800109a:	2202      	movs	r2, #2
 800109c:	601a      	str	r2, [r3, #0]
			if(mode3_flag == 1){
 800109e:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <fsm_manual_run1+0x3f8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d109      	bne.n	80010ba <fsm_manual_run1+0x362>
				counter_x = save_counterTimeSet*10 + 20;
 80010a6:	4b26      	ldr	r3, [pc, #152]	; (8001140 <fsm_manual_run1+0x3e8>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	3314      	adds	r3, #20
 80010b4:	4a1e      	ldr	r2, [pc, #120]	; (8001130 <fsm_manual_run1+0x3d8>)
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	e010      	b.n	80010dc <fsm_manual_run1+0x384>
			}
			else if(mode4_flag == 1){
 80010ba:	4b20      	ldr	r3, [pc, #128]	; (800113c <fsm_manual_run1+0x3e4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d109      	bne.n	80010d6 <fsm_manual_run1+0x37e>
				counter_x = save_counterTimeSet*10 + 30;
 80010c2:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <fsm_manual_run1+0x3e8>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	4613      	mov	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	331e      	adds	r3, #30
 80010d0:	4a17      	ldr	r2, [pc, #92]	; (8001130 <fsm_manual_run1+0x3d8>)
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	e002      	b.n	80010dc <fsm_manual_run1+0x384>
			}
			else{
				counter_x = 50;
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <fsm_manual_run1+0x3d8>)
 80010d8:	2232      	movs	r2, #50	; 0x32
 80010da:	601a      	str	r2, [r3, #0]
			}
			number_clock1 = counter_x/10;
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <fsm_manual_run1+0x3d8>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a14      	ldr	r2, [pc, #80]	; (8001134 <fsm_manual_run1+0x3dc>)
 80010e2:	fb82 1203 	smull	r1, r2, r2, r3
 80010e6:	1092      	asrs	r2, r2, #2
 80010e8:	17db      	asrs	r3, r3, #31
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	4a12      	ldr	r2, [pc, #72]	; (8001138 <fsm_manual_run1+0x3e0>)
 80010ee:	6013      	str	r3, [r2, #0]
		}
		break;
 80010f0:	e00b      	b.n	800110a <fsm_manual_run1+0x3b2>
	default:
		break;
 80010f2:	bf00      	nop
 80010f4:	e00a      	b.n	800110c <fsm_manual_run1+0x3b4>
		break;
 80010f6:	bf00      	nop
 80010f8:	e008      	b.n	800110c <fsm_manual_run1+0x3b4>
		break;
 80010fa:	bf00      	nop
 80010fc:	e006      	b.n	800110c <fsm_manual_run1+0x3b4>
		break;
 80010fe:	bf00      	nop
 8001100:	e004      	b.n	800110c <fsm_manual_run1+0x3b4>
		break;
 8001102:	bf00      	nop
 8001104:	e002      	b.n	800110c <fsm_manual_run1+0x3b4>
		break;
 8001106:	bf00      	nop
 8001108:	e000      	b.n	800110c <fsm_manual_run1+0x3b4>
		break;
 800110a:	bf00      	nop
	}
	if(counter_led_x > 0){
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <fsm_manual_run1+0x3cc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	dd04      	ble.n	800111e <fsm_manual_run1+0x3c6>
		counter_led_x--;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <fsm_manual_run1+0x3cc>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	3b01      	subs	r3, #1
 800111a:	4a02      	ldr	r2, [pc, #8]	; (8001124 <fsm_manual_run1+0x3cc>)
 800111c:	6013      	str	r3, [r2, #0]
	}
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000004c 	.word	0x2000004c
 8001128:	20000068 	.word	0x20000068
 800112c:	20000054 	.word	0x20000054
 8001130:	20000044 	.word	0x20000044
 8001134:	66666667 	.word	0x66666667
 8001138:	2000005c 	.word	0x2000005c
 800113c:	2000003c 	.word	0x2000003c
 8001140:	20000040 	.word	0x20000040
 8001144:	20000058 	.word	0x20000058
 8001148:	20000048 	.word	0x20000048
 800114c:	20000060 	.word	0x20000060
 8001150:	20000038 	.word	0x20000038

08001154 <fsm_manual_run2>:
void fsm_manual_run2(void){
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	switch(statusy){
 8001158:	4b8e      	ldr	r3, [pc, #568]	; (8001394 <fsm_manual_run2+0x240>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	3b08      	subs	r3, #8
 800115e:	2b05      	cmp	r3, #5
 8001160:	f200 8100 	bhi.w	8001364 <fsm_manual_run2+0x210>
 8001164:	a201      	add	r2, pc, #4	; (adr r2, 800116c <fsm_manual_run2+0x18>)
 8001166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116a:	bf00      	nop
 800116c:	080011ad 	.word	0x080011ad
 8001170:	08001245 	.word	0x08001245
 8001174:	080012e9 	.word	0x080012e9
 8001178:	08001185 	.word	0x08001185
 800117c:	0800121d 	.word	0x0800121d
 8001180:	080012bd 	.word	0x080012bd
	case CONF_RED:
		if(counter_led_y == 0){
 8001184:	4b84      	ldr	r3, [pc, #528]	; (8001398 <fsm_manual_run2+0x244>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d104      	bne.n	8001196 <fsm_manual_run2+0x42>
			DisplayMAN_REDY();
 800118c:	f000 fe04 	bl	8001d98 <DisplayMAN_REDY>
			counter_led_y = 5;
 8001190:	4b81      	ldr	r3, [pc, #516]	; (8001398 <fsm_manual_run2+0x244>)
 8001192:	2205      	movs	r2, #5
 8001194:	601a      	str	r2, [r3, #0]
		}
		if(counterMode == 3){
 8001196:	4b81      	ldr	r3, [pc, #516]	; (800139c <fsm_manual_run2+0x248>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b03      	cmp	r3, #3
 800119c:	f040 80e4 	bne.w	8001368 <fsm_manual_run2+0x214>
			statusy = CONF_GREEN;
 80011a0:	4b7c      	ldr	r3, [pc, #496]	; (8001394 <fsm_manual_run2+0x240>)
 80011a2:	220c      	movs	r2, #12
 80011a4:	601a      	str	r2, [r3, #0]
			InitLED();
 80011a6:	f000 fe2b 	bl	8001e00 <InitLED>
		}
		break;
 80011aa:	e0dd      	b.n	8001368 <fsm_manual_run2+0x214>
	case MAN_RED:
		if(counterMode != 2){
 80011ac:	4b7b      	ldr	r3, [pc, #492]	; (800139c <fsm_manual_run2+0x248>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d002      	beq.n	80011ba <fsm_manual_run2+0x66>
			DisplayREDY();
 80011b4:	f000 fda4 	bl	8001d00 <DisplayREDY>
 80011b8:	e008      	b.n	80011cc <fsm_manual_run2+0x78>
		}
		else{
			if(counter_led_y == 0){
 80011ba:	4b77      	ldr	r3, [pc, #476]	; (8001398 <fsm_manual_run2+0x244>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d104      	bne.n	80011cc <fsm_manual_run2+0x78>
				DisplayMAN_REDY();
 80011c2:	f000 fde9 	bl	8001d98 <DisplayMAN_REDY>
				counter_led_y = 5;
 80011c6:	4b74      	ldr	r3, [pc, #464]	; (8001398 <fsm_manual_run2+0x244>)
 80011c8:	2205      	movs	r2, #5
 80011ca:	601a      	str	r2, [r3, #0]
			}
		}
		ChangeModeY();
 80011cc:	f7ff f9b0 	bl	8000530 <ChangeModeY>
		if(counter_y == 0){
 80011d0:	4b73      	ldr	r3, [pc, #460]	; (80013a0 <fsm_manual_run2+0x24c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f040 80c9 	bne.w	800136c <fsm_manual_run2+0x218>
			InitLED();
 80011da:	f000 fe11 	bl	8001e00 <InitLED>
			statusy = AUTO_GREEN;
 80011de:	4b6d      	ldr	r3, [pc, #436]	; (8001394 <fsm_manual_run2+0x240>)
 80011e0:	2203      	movs	r2, #3
 80011e2:	601a      	str	r2, [r3, #0]
			if(mode2_flag == 1){
 80011e4:	4b6f      	ldr	r3, [pc, #444]	; (80013a4 <fsm_manual_run2+0x250>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d109      	bne.n	8001200 <fsm_manual_run2+0xac>
				counter_y = save_counterTimeSet*10 - 20;
 80011ec:	4b6e      	ldr	r3, [pc, #440]	; (80013a8 <fsm_manual_run2+0x254>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	3b14      	subs	r3, #20
 80011fa:	4a69      	ldr	r2, [pc, #420]	; (80013a0 <fsm_manual_run2+0x24c>)
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e002      	b.n	8001206 <fsm_manual_run2+0xb2>
			}
			else{
				counter_y = 30;
 8001200:	4b67      	ldr	r3, [pc, #412]	; (80013a0 <fsm_manual_run2+0x24c>)
 8001202:	221e      	movs	r2, #30
 8001204:	601a      	str	r2, [r3, #0]
			}
			number_clock2 = counter_y/10;
 8001206:	4b66      	ldr	r3, [pc, #408]	; (80013a0 <fsm_manual_run2+0x24c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a68      	ldr	r2, [pc, #416]	; (80013ac <fsm_manual_run2+0x258>)
 800120c:	fb82 1203 	smull	r1, r2, r2, r3
 8001210:	1092      	asrs	r2, r2, #2
 8001212:	17db      	asrs	r3, r3, #31
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	4a66      	ldr	r2, [pc, #408]	; (80013b0 <fsm_manual_run2+0x25c>)
 8001218:	6013      	str	r3, [r2, #0]
		}
		break;
 800121a:	e0a7      	b.n	800136c <fsm_manual_run2+0x218>
	case CONF_GREEN:
		if(counter_led_y == 0){
 800121c:	4b5e      	ldr	r3, [pc, #376]	; (8001398 <fsm_manual_run2+0x244>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d104      	bne.n	800122e <fsm_manual_run2+0xda>
			DisplayMAN_GREENY();
 8001224:	f000 fdcc 	bl	8001dc0 <DisplayMAN_GREENY>
			counter_led_y = 5;
 8001228:	4b5b      	ldr	r3, [pc, #364]	; (8001398 <fsm_manual_run2+0x244>)
 800122a:	2205      	movs	r2, #5
 800122c:	601a      	str	r2, [r3, #0]
		}
		if(counterMode == 4){
 800122e:	4b5b      	ldr	r3, [pc, #364]	; (800139c <fsm_manual_run2+0x248>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b04      	cmp	r3, #4
 8001234:	f040 809c 	bne.w	8001370 <fsm_manual_run2+0x21c>
			statusy = CONF_YELLOW;
 8001238:	4b56      	ldr	r3, [pc, #344]	; (8001394 <fsm_manual_run2+0x240>)
 800123a:	220d      	movs	r2, #13
 800123c:	601a      	str	r2, [r3, #0]
			InitLED();
 800123e:	f000 fddf 	bl	8001e00 <InitLED>
		}
		break;
 8001242:	e095      	b.n	8001370 <fsm_manual_run2+0x21c>
	case MAN_GREEN:
		if(counterMode != 3){
 8001244:	4b55      	ldr	r3, [pc, #340]	; (800139c <fsm_manual_run2+0x248>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b03      	cmp	r3, #3
 800124a:	d002      	beq.n	8001252 <fsm_manual_run2+0xfe>
			DisplayGREENY();
 800124c:	f000 fd84 	bl	8001d58 <DisplayGREENY>
 8001250:	e008      	b.n	8001264 <fsm_manual_run2+0x110>
		}
		else{
			if(counter_led_y == 0){
 8001252:	4b51      	ldr	r3, [pc, #324]	; (8001398 <fsm_manual_run2+0x244>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d104      	bne.n	8001264 <fsm_manual_run2+0x110>
				DisplayMAN_GREENY();
 800125a:	f000 fdb1 	bl	8001dc0 <DisplayMAN_GREENY>
				counter_led_y = 5;
 800125e:	4b4e      	ldr	r3, [pc, #312]	; (8001398 <fsm_manual_run2+0x244>)
 8001260:	2205      	movs	r2, #5
 8001262:	601a      	str	r2, [r3, #0]
			}
		}
		ChangeModeY();
 8001264:	f7ff f964 	bl	8000530 <ChangeModeY>
		if(counter_y == 0){
 8001268:	4b4d      	ldr	r3, [pc, #308]	; (80013a0 <fsm_manual_run2+0x24c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	f040 8081 	bne.w	8001374 <fsm_manual_run2+0x220>
			InitLED();
 8001272:	f000 fdc5 	bl	8001e00 <InitLED>
			statusy = AUTO_YELLOW;
 8001276:	4b47      	ldr	r3, [pc, #284]	; (8001394 <fsm_manual_run2+0x240>)
 8001278:	2204      	movs	r2, #4
 800127a:	601a      	str	r2, [r3, #0]
			if(mode2_flag == 1){
 800127c:	4b49      	ldr	r3, [pc, #292]	; (80013a4 <fsm_manual_run2+0x250>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d10d      	bne.n	80012a0 <fsm_manual_run2+0x14c>
				if(save_counterTimeSet < 2){
 8001284:	4b48      	ldr	r3, [pc, #288]	; (80013a8 <fsm_manual_run2+0x254>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b01      	cmp	r3, #1
 800128a:	dc0c      	bgt.n	80012a6 <fsm_manual_run2+0x152>
					counter_y = save_counterTimeSet*10;
 800128c:	4b46      	ldr	r3, [pc, #280]	; (80013a8 <fsm_manual_run2+0x254>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	461a      	mov	r2, r3
 800129a:	4b41      	ldr	r3, [pc, #260]	; (80013a0 <fsm_manual_run2+0x24c>)
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	e002      	b.n	80012a6 <fsm_manual_run2+0x152>
				}
			}
			else{
				counter_y = 20;
 80012a0:	4b3f      	ldr	r3, [pc, #252]	; (80013a0 <fsm_manual_run2+0x24c>)
 80012a2:	2214      	movs	r2, #20
 80012a4:	601a      	str	r2, [r3, #0]
			}
			number_clock2 = counter_y/10;
 80012a6:	4b3e      	ldr	r3, [pc, #248]	; (80013a0 <fsm_manual_run2+0x24c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a40      	ldr	r2, [pc, #256]	; (80013ac <fsm_manual_run2+0x258>)
 80012ac:	fb82 1203 	smull	r1, r2, r2, r3
 80012b0:	1092      	asrs	r2, r2, #2
 80012b2:	17db      	asrs	r3, r3, #31
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	4a3e      	ldr	r2, [pc, #248]	; (80013b0 <fsm_manual_run2+0x25c>)
 80012b8:	6013      	str	r3, [r2, #0]
		}
		break;
 80012ba:	e05b      	b.n	8001374 <fsm_manual_run2+0x220>
	case CONF_YELLOW:
		if(counter_led_y == 0){
 80012bc:	4b36      	ldr	r3, [pc, #216]	; (8001398 <fsm_manual_run2+0x244>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d104      	bne.n	80012ce <fsm_manual_run2+0x17a>
			DisplayMAN_YELLOWY();
 80012c4:	f000 fd92 	bl	8001dec <DisplayMAN_YELLOWY>
			counter_led_y = 5;
 80012c8:	4b33      	ldr	r3, [pc, #204]	; (8001398 <fsm_manual_run2+0x244>)
 80012ca:	2205      	movs	r2, #5
 80012cc:	601a      	str	r2, [r3, #0]
		}
		if(counterMode == 1){
 80012ce:	4b33      	ldr	r3, [pc, #204]	; (800139c <fsm_manual_run2+0x248>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d150      	bne.n	8001378 <fsm_manual_run2+0x224>
			statusy = AUTO_GREEN;
 80012d6:	4b2f      	ldr	r3, [pc, #188]	; (8001394 <fsm_manual_run2+0x240>)
 80012d8:	2203      	movs	r2, #3
 80012da:	601a      	str	r2, [r3, #0]
			counter_y = 30;
 80012dc:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <fsm_manual_run2+0x24c>)
 80012de:	221e      	movs	r2, #30
 80012e0:	601a      	str	r2, [r3, #0]
			InitLED();
 80012e2:	f000 fd8d 	bl	8001e00 <InitLED>
		}
		break;
 80012e6:	e047      	b.n	8001378 <fsm_manual_run2+0x224>
	case MAN_YELLOW:
		if(counter_led_y == 0){
 80012e8:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <fsm_manual_run2+0x244>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d104      	bne.n	80012fa <fsm_manual_run2+0x1a6>
			DisplayMAN_YELLOWY();
 80012f0:	f000 fd7c 	bl	8001dec <DisplayMAN_YELLOWY>
			counter_led_y = 5;
 80012f4:	4b28      	ldr	r3, [pc, #160]	; (8001398 <fsm_manual_run2+0x244>)
 80012f6:	2205      	movs	r2, #5
 80012f8:	601a      	str	r2, [r3, #0]
		}
		ChangeModeY();
 80012fa:	f7ff f919 	bl	8000530 <ChangeModeY>
		if(counter_y == 0){
 80012fe:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <fsm_manual_run2+0x24c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d13a      	bne.n	800137c <fsm_manual_run2+0x228>
			InitLED();
 8001306:	f000 fd7b 	bl	8001e00 <InitLED>
			statusy = AUTO_RED;
 800130a:	4b22      	ldr	r3, [pc, #136]	; (8001394 <fsm_manual_run2+0x240>)
 800130c:	2202      	movs	r2, #2
 800130e:	601a      	str	r2, [r3, #0]
			if(mode3_flag == 1){
 8001310:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <fsm_manual_run2+0x260>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d109      	bne.n	800132c <fsm_manual_run2+0x1d8>
				counter_y = save_counterTimeSet*10 + 20;
 8001318:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <fsm_manual_run2+0x254>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4613      	mov	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	3314      	adds	r3, #20
 8001326:	4a1e      	ldr	r2, [pc, #120]	; (80013a0 <fsm_manual_run2+0x24c>)
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e010      	b.n	800134e <fsm_manual_run2+0x1fa>
			}
			else if(mode4_flag == 1){
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <fsm_manual_run2+0x264>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d109      	bne.n	8001348 <fsm_manual_run2+0x1f4>
				counter_y = save_counterTimeSet*10 + 30;
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <fsm_manual_run2+0x254>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	331e      	adds	r3, #30
 8001342:	4a17      	ldr	r2, [pc, #92]	; (80013a0 <fsm_manual_run2+0x24c>)
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	e002      	b.n	800134e <fsm_manual_run2+0x1fa>
			}
			else{
				counter_y = 50;
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <fsm_manual_run2+0x24c>)
 800134a:	2232      	movs	r2, #50	; 0x32
 800134c:	601a      	str	r2, [r3, #0]
			}
			number_clock2 = counter_y/10;
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <fsm_manual_run2+0x24c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a16      	ldr	r2, [pc, #88]	; (80013ac <fsm_manual_run2+0x258>)
 8001354:	fb82 1203 	smull	r1, r2, r2, r3
 8001358:	1092      	asrs	r2, r2, #2
 800135a:	17db      	asrs	r3, r3, #31
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	4a14      	ldr	r2, [pc, #80]	; (80013b0 <fsm_manual_run2+0x25c>)
 8001360:	6013      	str	r3, [r2, #0]
		}
		break;
 8001362:	e00b      	b.n	800137c <fsm_manual_run2+0x228>
	default:
		break;
 8001364:	bf00      	nop
 8001366:	e00a      	b.n	800137e <fsm_manual_run2+0x22a>
		break;
 8001368:	bf00      	nop
 800136a:	e008      	b.n	800137e <fsm_manual_run2+0x22a>
		break;
 800136c:	bf00      	nop
 800136e:	e006      	b.n	800137e <fsm_manual_run2+0x22a>
		break;
 8001370:	bf00      	nop
 8001372:	e004      	b.n	800137e <fsm_manual_run2+0x22a>
		break;
 8001374:	bf00      	nop
 8001376:	e002      	b.n	800137e <fsm_manual_run2+0x22a>
		break;
 8001378:	bf00      	nop
 800137a:	e000      	b.n	800137e <fsm_manual_run2+0x22a>
		break;
 800137c:	bf00      	nop
	}
	if(counter_led_y > 0){
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <fsm_manual_run2+0x244>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	dd04      	ble.n	8001390 <fsm_manual_run2+0x23c>
		counter_led_y--;
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <fsm_manual_run2+0x244>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	3b01      	subs	r3, #1
 800138c:	4a02      	ldr	r2, [pc, #8]	; (8001398 <fsm_manual_run2+0x244>)
 800138e:	6013      	str	r3, [r2, #0]
	}
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000058 	.word	0x20000058
 8001398:	20000050 	.word	0x20000050
 800139c:	20000068 	.word	0x20000068
 80013a0:	20000048 	.word	0x20000048
 80013a4:	20000034 	.word	0x20000034
 80013a8:	20000040 	.word	0x20000040
 80013ac:	66666667 	.word	0x66666667
 80013b0:	20000060 	.word	0x20000060
 80013b4:	20000038 	.word	0x20000038
 80013b8:	2000003c 	.word	0x2000003c

080013bc <fsm_for_input_processing1>:
enum ButtonState buttonState1 = BUTTON_RELEASED;
enum ButtonState buttonState2 = BUTTON_RELEASED;
enum ButtonState buttonState3 = BUTTON_RELEASED;
int counterMode = 0;
int counterTimeSet = 0;
void fsm_for_input_processing1(void){
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	switch(buttonState1){
 80013c0:	4b26      	ldr	r3, [pc, #152]	; (800145c <fsm_for_input_processing1+0xa0>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d038      	beq.n	800143a <fsm_for_input_processing1+0x7e>
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	dc45      	bgt.n	8001458 <fsm_for_input_processing1+0x9c>
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <fsm_for_input_processing1+0x1a>
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d01e      	beq.n	8001412 <fsm_for_input_processing1+0x56>
			if(!is_button_pressed(0)){
				buttonState1 = BUTTON_RELEASED;
			}
		break;
		}
	}
 80013d4:	e040      	b.n	8001458 <fsm_for_input_processing1+0x9c>
			if(is_button_pressed(0)){
 80013d6:	2000      	movs	r0, #0
 80013d8:	f000 f9d8 	bl	800178c <is_button_pressed>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d035      	beq.n	800144e <fsm_for_input_processing1+0x92>
				buttonState1 = BUTTON_PRESSED ;
 80013e2:	4b1e      	ldr	r3, [pc, #120]	; (800145c <fsm_for_input_processing1+0xa0>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	701a      	strb	r2, [r3, #0]
				if(ProcessButton1() == 1){
 80013e8:	f000 f8da 	bl	80015a0 <ProcessButton1>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d12d      	bne.n	800144e <fsm_for_input_processing1+0x92>
					  counterMode++;
 80013f2:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <fsm_for_input_processing1+0xa4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	4a19      	ldr	r2, [pc, #100]	; (8001460 <fsm_for_input_processing1+0xa4>)
 80013fa:	6013      	str	r3, [r2, #0]
					  counterTimeSet = 0;
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <fsm_for_input_processing1+0xa8>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
					  if(counterMode > 4){
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <fsm_for_input_processing1+0xa4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b04      	cmp	r3, #4
 8001408:	dd21      	ble.n	800144e <fsm_for_input_processing1+0x92>
						  counterMode = 1;
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <fsm_for_input_processing1+0xa4>)
 800140c:	2201      	movs	r2, #1
 800140e:	601a      	str	r2, [r3, #0]
		break;
 8001410:	e01d      	b.n	800144e <fsm_for_input_processing1+0x92>
			if(!is_button_pressed(0)){
 8001412:	2000      	movs	r0, #0
 8001414:	f000 f9ba 	bl	800178c <is_button_pressed>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d103      	bne.n	8001426 <fsm_for_input_processing1+0x6a>
				buttonState1 = BUTTON_RELEASED;
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <fsm_for_input_processing1+0xa0>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
		break;
 8001424:	e015      	b.n	8001452 <fsm_for_input_processing1+0x96>
				if(is_button_pressed_1s(0) == 1){
 8001426:	2000      	movs	r0, #0
 8001428:	f000 f9ca 	bl	80017c0 <is_button_pressed_1s>
 800142c:	4603      	mov	r3, r0
 800142e:	2b01      	cmp	r3, #1
 8001430:	d10f      	bne.n	8001452 <fsm_for_input_processing1+0x96>
					buttonState1 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <fsm_for_input_processing1+0xa0>)
 8001434:	2202      	movs	r2, #2
 8001436:	701a      	strb	r2, [r3, #0]
		break;
 8001438:	e00b      	b.n	8001452 <fsm_for_input_processing1+0x96>
			if(!is_button_pressed(0)){
 800143a:	2000      	movs	r0, #0
 800143c:	f000 f9a6 	bl	800178c <is_button_pressed>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d107      	bne.n	8001456 <fsm_for_input_processing1+0x9a>
				buttonState1 = BUTTON_RELEASED;
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <fsm_for_input_processing1+0xa0>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
		break;
 800144c:	e003      	b.n	8001456 <fsm_for_input_processing1+0x9a>
		break;
 800144e:	bf00      	nop
 8001450:	e002      	b.n	8001458 <fsm_for_input_processing1+0x9c>
		break;
 8001452:	bf00      	nop
 8001454:	e000      	b.n	8001458 <fsm_for_input_processing1+0x9c>
		break;
 8001456:	bf00      	nop
	}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000064 	.word	0x20000064
 8001460:	20000068 	.word	0x20000068
 8001464:	2000006c 	.word	0x2000006c

08001468 <fsm_for_input_processing2>:
void fsm_for_input_processing2(void){
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	switch(buttonState2){
 800146c:	4b25      	ldr	r3, [pc, #148]	; (8001504 <fsm_for_input_processing2+0x9c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b02      	cmp	r3, #2
 8001472:	d035      	beq.n	80014e0 <fsm_for_input_processing2+0x78>
 8001474:	2b02      	cmp	r3, #2
 8001476:	dc42      	bgt.n	80014fe <fsm_for_input_processing2+0x96>
 8001478:	2b00      	cmp	r3, #0
 800147a:	d002      	beq.n	8001482 <fsm_for_input_processing2+0x1a>
 800147c:	2b01      	cmp	r3, #1
 800147e:	d01b      	beq.n	80014b8 <fsm_for_input_processing2+0x50>
			if(!is_button_pressed(1)){
				buttonState2 = BUTTON_RELEASED;
			}
		break;
		}
	}
 8001480:	e03d      	b.n	80014fe <fsm_for_input_processing2+0x96>
			if(is_button_pressed(1)){
 8001482:	2001      	movs	r0, #1
 8001484:	f000 f982 	bl	800178c <is_button_pressed>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d032      	beq.n	80014f4 <fsm_for_input_processing2+0x8c>
				buttonState2 = BUTTON_PRESSED ;
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <fsm_for_input_processing2+0x9c>)
 8001490:	2201      	movs	r2, #1
 8001492:	701a      	strb	r2, [r3, #0]
				if(ProcessButton2() == 1){
 8001494:	f000 f8a2 	bl	80015dc <ProcessButton2>
 8001498:	4603      	mov	r3, r0
 800149a:	2b01      	cmp	r3, #1
 800149c:	d12a      	bne.n	80014f4 <fsm_for_input_processing2+0x8c>
					  counterTimeSet++;
 800149e:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <fsm_for_input_processing2+0xa0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	4a18      	ldr	r2, [pc, #96]	; (8001508 <fsm_for_input_processing2+0xa0>)
 80014a6:	6013      	str	r3, [r2, #0]
					  if(counterTimeSet > 99){
 80014a8:	4b17      	ldr	r3, [pc, #92]	; (8001508 <fsm_for_input_processing2+0xa0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b63      	cmp	r3, #99	; 0x63
 80014ae:	dd21      	ble.n	80014f4 <fsm_for_input_processing2+0x8c>
						  counterTimeSet = 0;
 80014b0:	4b15      	ldr	r3, [pc, #84]	; (8001508 <fsm_for_input_processing2+0xa0>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
		break;
 80014b6:	e01d      	b.n	80014f4 <fsm_for_input_processing2+0x8c>
			if(!is_button_pressed(1)){
 80014b8:	2001      	movs	r0, #1
 80014ba:	f000 f967 	bl	800178c <is_button_pressed>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d103      	bne.n	80014cc <fsm_for_input_processing2+0x64>
				buttonState2 = BUTTON_RELEASED;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <fsm_for_input_processing2+0x9c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
		break;
 80014ca:	e015      	b.n	80014f8 <fsm_for_input_processing2+0x90>
				if(is_button_pressed_1s(1) == 1){
 80014cc:	2001      	movs	r0, #1
 80014ce:	f000 f977 	bl	80017c0 <is_button_pressed_1s>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d10f      	bne.n	80014f8 <fsm_for_input_processing2+0x90>
					buttonState2 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <fsm_for_input_processing2+0x9c>)
 80014da:	2202      	movs	r2, #2
 80014dc:	701a      	strb	r2, [r3, #0]
		break;
 80014de:	e00b      	b.n	80014f8 <fsm_for_input_processing2+0x90>
			if(!is_button_pressed(1)){
 80014e0:	2001      	movs	r0, #1
 80014e2:	f000 f953 	bl	800178c <is_button_pressed>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d107      	bne.n	80014fc <fsm_for_input_processing2+0x94>
				buttonState2 = BUTTON_RELEASED;
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <fsm_for_input_processing2+0x9c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
		break;
 80014f2:	e003      	b.n	80014fc <fsm_for_input_processing2+0x94>
		break;
 80014f4:	bf00      	nop
 80014f6:	e002      	b.n	80014fe <fsm_for_input_processing2+0x96>
		break;
 80014f8:	bf00      	nop
 80014fa:	e000      	b.n	80014fe <fsm_for_input_processing2+0x96>
		break;
 80014fc:	bf00      	nop
	}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000065 	.word	0x20000065
 8001508:	2000006c 	.word	0x2000006c

0800150c <fsm_for_input_processing3>:
void fsm_for_input_processing3(void){
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	switch(buttonState3){
 8001510:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <fsm_for_input_processing3+0x78>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d024      	beq.n	8001562 <fsm_for_input_processing3+0x56>
 8001518:	2b02      	cmp	r3, #2
 800151a:	dc31      	bgt.n	8001580 <fsm_for_input_processing3+0x74>
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <fsm_for_input_processing3+0x1a>
 8001520:	2b01      	cmp	r3, #1
 8001522:	d00a      	beq.n	800153a <fsm_for_input_processing3+0x2e>
			if(!is_button_pressed(2)){
				buttonState3 = BUTTON_RELEASED;
			}
		break;
		}
	}
 8001524:	e02c      	b.n	8001580 <fsm_for_input_processing3+0x74>
			if(is_button_pressed(2)){
 8001526:	2002      	movs	r0, #2
 8001528:	f000 f930 	bl	800178c <is_button_pressed>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d021      	beq.n	8001576 <fsm_for_input_processing3+0x6a>
				buttonState3 = BUTTON_PRESSED ;
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <fsm_for_input_processing3+0x78>)
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
		break;
 8001538:	e01d      	b.n	8001576 <fsm_for_input_processing3+0x6a>
			if(!is_button_pressed(2)){
 800153a:	2002      	movs	r0, #2
 800153c:	f000 f926 	bl	800178c <is_button_pressed>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d103      	bne.n	800154e <fsm_for_input_processing3+0x42>
				buttonState3 = BUTTON_RELEASED;
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <fsm_for_input_processing3+0x78>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
		break;
 800154c:	e015      	b.n	800157a <fsm_for_input_processing3+0x6e>
				if(is_button_pressed_1s(2) == 1){
 800154e:	2002      	movs	r0, #2
 8001550:	f000 f936 	bl	80017c0 <is_button_pressed_1s>
 8001554:	4603      	mov	r3, r0
 8001556:	2b01      	cmp	r3, #1
 8001558:	d10f      	bne.n	800157a <fsm_for_input_processing3+0x6e>
					buttonState3 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <fsm_for_input_processing3+0x78>)
 800155c:	2202      	movs	r2, #2
 800155e:	701a      	strb	r2, [r3, #0]
		break;
 8001560:	e00b      	b.n	800157a <fsm_for_input_processing3+0x6e>
			if(!is_button_pressed(2)){
 8001562:	2002      	movs	r0, #2
 8001564:	f000 f912 	bl	800178c <is_button_pressed>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d107      	bne.n	800157e <fsm_for_input_processing3+0x72>
				buttonState3 = BUTTON_RELEASED;
 800156e:	4b05      	ldr	r3, [pc, #20]	; (8001584 <fsm_for_input_processing3+0x78>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
		break;
 8001574:	e003      	b.n	800157e <fsm_for_input_processing3+0x72>
		break;
 8001576:	bf00      	nop
 8001578:	e002      	b.n	8001580 <fsm_for_input_processing3+0x74>
		break;
 800157a:	bf00      	nop
 800157c:	e000      	b.n	8001580 <fsm_for_input_processing3+0x74>
		break;
 800157e:	bf00      	nop
	}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000066 	.word	0x20000066

08001588 <Button1Run>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;
void Button1Run(void){
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
 	button1_flag = 1;
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <Button1Run+0x14>)
 800158e:	2201      	movs	r2, #1
 8001590:	601a      	str	r2, [r3, #0]
 }
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	20000088 	.word	0x20000088

080015a0 <ProcessButton1>:
int ProcessButton1(void){
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
	 if(button1_flag == 1){
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <ProcessButton1+0x20>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d104      	bne.n	80015b6 <ProcessButton1+0x16>
		 button1_flag = 0;
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <ProcessButton1+0x20>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
		 return 1;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <ProcessButton1+0x18>
	 }
	 return 0;
 80015b6:	2300      	movs	r3, #0
 }
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	20000088 	.word	0x20000088

080015c4 <Button2Run>:
void Button2Run(void){
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
 	button2_flag = 1;
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <Button2Run+0x14>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	601a      	str	r2, [r3, #0]
 }
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	2000008c 	.word	0x2000008c

080015dc <ProcessButton2>:
int ProcessButton2(void){
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
	 if(button2_flag == 1){
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <ProcessButton2+0x20>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d104      	bne.n	80015f2 <ProcessButton2+0x16>
		 button2_flag = 0;
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <ProcessButton2+0x20>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
		 return 1;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <ProcessButton2+0x18>
	 }
	 return 0;
 80015f2:	2300      	movs	r3, #0
 }
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	2000008c 	.word	0x2000008c

08001600 <Button3Run>:
void Button3Run(void){
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
 	button3_flag = 1;
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <Button3Run+0x14>)
 8001606:	2201      	movs	r2, #1
 8001608:	601a      	str	r2, [r3, #0]
 }
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000090 	.word	0x20000090

08001618 <ProcessButton3>:
int ProcessButton3(void){
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
	 if(button3_flag == 1){
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <ProcessButton3+0x20>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d104      	bne.n	800162e <ProcessButton3+0x16>
		 button3_flag = 0;
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <ProcessButton3+0x20>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
		 return 1;
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <ProcessButton3+0x18>
	 }
	 return 0;
 800162e:	2300      	movs	r3, #0
 }
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	20000090 	.word	0x20000090

0800163c <button_reading>:
		void button_reading(void){
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
			 for(unsigned char i = 0;i < N0_OF_BUTTONS;i++){
 8001642:	2300      	movs	r3, #0
 8001644:	71fb      	strb	r3, [r7, #7]
 8001646:	e08b      	b.n	8001760 <button_reading+0x124>
				 debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8001648:	79fa      	ldrb	r2, [r7, #7]
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	4949      	ldr	r1, [pc, #292]	; (8001774 <button_reading+0x138>)
 800164e:	5c89      	ldrb	r1, [r1, r2]
 8001650:	4a49      	ldr	r2, [pc, #292]	; (8001778 <button_reading+0x13c>)
 8001652:	54d1      	strb	r1, [r2, r3]
				 if(i == 0){
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d108      	bne.n	800166c <button_reading+0x30>
				 debounceButtonBuffer1[0] = HAL_GPIO_ReadPin(Button_GPIO_Port,Button_Pin);
 800165a:	2101      	movs	r1, #1
 800165c:	4847      	ldr	r0, [pc, #284]	; (800177c <button_reading+0x140>)
 800165e:	f001 f96d 	bl	800293c <HAL_GPIO_ReadPin>
 8001662:	4603      	mov	r3, r0
 8001664:	461a      	mov	r2, r3
 8001666:	4b43      	ldr	r3, [pc, #268]	; (8001774 <button_reading+0x138>)
 8001668:	701a      	strb	r2, [r3, #0]
 800166a:	e016      	b.n	800169a <button_reading+0x5e>
				 }
				 else if(i == 1){
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d108      	bne.n	8001684 <button_reading+0x48>
				 debounceButtonBuffer1[1] = HAL_GPIO_ReadPin(Button1_GPIO_Port,Button1_Pin);
 8001672:	2102      	movs	r1, #2
 8001674:	4841      	ldr	r0, [pc, #260]	; (800177c <button_reading+0x140>)
 8001676:	f001 f961 	bl	800293c <HAL_GPIO_ReadPin>
 800167a:	4603      	mov	r3, r0
 800167c:	461a      	mov	r2, r3
 800167e:	4b3d      	ldr	r3, [pc, #244]	; (8001774 <button_reading+0x138>)
 8001680:	705a      	strb	r2, [r3, #1]
 8001682:	e00a      	b.n	800169a <button_reading+0x5e>
				 }
				 else if(i == 2){
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d107      	bne.n	800169a <button_reading+0x5e>
				 debounceButtonBuffer1[2] = HAL_GPIO_ReadPin(Button2_GPIO_Port,Button2_Pin);
 800168a:	2104      	movs	r1, #4
 800168c:	483b      	ldr	r0, [pc, #236]	; (800177c <button_reading+0x140>)
 800168e:	f001 f955 	bl	800293c <HAL_GPIO_ReadPin>
 8001692:	4603      	mov	r3, r0
 8001694:	461a      	mov	r2, r3
 8001696:	4b37      	ldr	r3, [pc, #220]	; (8001774 <button_reading+0x138>)
 8001698:	709a      	strb	r2, [r3, #2]
				 }
				 if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	4a35      	ldr	r2, [pc, #212]	; (8001774 <button_reading+0x138>)
 800169e:	5cd2      	ldrb	r2, [r2, r3]
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	4935      	ldr	r1, [pc, #212]	; (8001778 <button_reading+0x13c>)
 80016a4:	5ccb      	ldrb	r3, [r1, r3]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d14e      	bne.n	8001748 <button_reading+0x10c>
					 buttonBuffer[i] = debounceButtonBuffer1[i];
 80016aa:	79fa      	ldrb	r2, [r7, #7]
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	4931      	ldr	r1, [pc, #196]	; (8001774 <button_reading+0x138>)
 80016b0:	5c89      	ldrb	r1, [r1, r2]
 80016b2:	4a33      	ldr	r2, [pc, #204]	; (8001780 <button_reading+0x144>)
 80016b4:	54d1      	strb	r1, [r2, r3]
					 if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	4a31      	ldr	r2, [pc, #196]	; (8001780 <button_reading+0x144>)
 80016ba:	5cd3      	ldrb	r3, [r2, r3]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d14c      	bne.n	800175a <button_reading+0x11e>
						 if(i == 0){
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d102      	bne.n	80016cc <button_reading+0x90>
							 Button1Run();
 80016c6:	f7ff ff5f 	bl	8001588 <Button1Run>
 80016ca:	e00a      	b.n	80016e2 <button_reading+0xa6>
						 }
						 else if(i == 1){
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d102      	bne.n	80016d8 <button_reading+0x9c>
							 Button2Run();
 80016d2:	f7ff ff77 	bl	80015c4 <Button2Run>
 80016d6:	e004      	b.n	80016e2 <button_reading+0xa6>
						 }
						 else if(i == 2){
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d101      	bne.n	80016e2 <button_reading+0xa6>
							 Button3Run();
 80016de:	f7ff ff8f 	bl	8001600 <Button3Run>
						 }
						 if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING && flagForButtonPress1s[i] == 0){
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	4a27      	ldr	r2, [pc, #156]	; (8001784 <button_reading+0x148>)
 80016e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016ea:	2b63      	cmp	r3, #99	; 0x63
 80016ec:	d80e      	bhi.n	800170c <button_reading+0xd0>
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	4a25      	ldr	r2, [pc, #148]	; (8001788 <button_reading+0x14c>)
 80016f2:	5cd3      	ldrb	r3, [r2, r3]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d109      	bne.n	800170c <button_reading+0xd0>
							 counterForButtonPress1s[i]++;
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	4a22      	ldr	r2, [pc, #136]	; (8001784 <button_reading+0x148>)
 80016fc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001700:	3201      	adds	r2, #1
 8001702:	b291      	uxth	r1, r2
 8001704:	4a1f      	ldr	r2, [pc, #124]	; (8001784 <button_reading+0x148>)
 8001706:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800170a:	e026      	b.n	800175a <button_reading+0x11e>
						 }
						 else{
							 flagForButtonPress1s[i] = 1;
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <button_reading+0x14c>)
 8001710:	2101      	movs	r1, #1
 8001712:	54d1      	strb	r1, [r2, r3]

							 if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING2){
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	4a1b      	ldr	r2, [pc, #108]	; (8001784 <button_reading+0x148>)
 8001718:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800171c:	2b95      	cmp	r3, #149	; 0x95
 800171e:	d809      	bhi.n	8001734 <button_reading+0xf8>
								counterForButtonPress1s[i]++;
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	4a18      	ldr	r2, [pc, #96]	; (8001784 <button_reading+0x148>)
 8001724:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001728:	3201      	adds	r2, #1
 800172a:	b291      	uxth	r1, r2
 800172c:	4a15      	ldr	r2, [pc, #84]	; (8001784 <button_reading+0x148>)
 800172e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001732:	e012      	b.n	800175a <button_reading+0x11e>
							 }
							 else{
								buttonBuffer[i] = BUTTON_IS_RELEASED;
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	4a12      	ldr	r2, [pc, #72]	; (8001780 <button_reading+0x144>)
 8001738:	2101      	movs	r1, #1
 800173a:	54d1      	strb	r1, [r2, r3]
								counterForButtonPress1s[i] = 100;
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	4a11      	ldr	r2, [pc, #68]	; (8001784 <button_reading+0x148>)
 8001740:	2164      	movs	r1, #100	; 0x64
 8001742:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001746:	e008      	b.n	800175a <button_reading+0x11e>

						 }
					 }
				 }
					 else{
						 counterForButtonPress1s[i] = 0;
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <button_reading+0x148>)
 800174c:	2100      	movs	r1, #0
 800174e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						 flagForButtonPress1s[i] = 0;
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	4a0c      	ldr	r2, [pc, #48]	; (8001788 <button_reading+0x14c>)
 8001756:	2100      	movs	r1, #0
 8001758:	54d1      	strb	r1, [r2, r3]
			 for(unsigned char i = 0;i < N0_OF_BUTTONS;i++){
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	3301      	adds	r3, #1
 800175e:	71fb      	strb	r3, [r7, #7]
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	2b02      	cmp	r3, #2
 8001764:	f67f af70 	bls.w	8001648 <button_reading+0xc>
					 }
				 }
			}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000074 	.word	0x20000074
 8001778:	20000078 	.word	0x20000078
 800177c:	40010c00 	.word	0x40010c00
 8001780:	20000070 	.word	0x20000070
 8001784:	20000080 	.word	0x20000080
 8001788:	2000007c 	.word	0x2000007c

0800178c <is_button_pressed>:
unsigned char is_button_pressed(uint8_t index){
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <is_button_pressed+0x14>
 800179c:	2300      	movs	r3, #0
 800179e:	e007      	b.n	80017b0 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	4a06      	ldr	r2, [pc, #24]	; (80017bc <is_button_pressed+0x30>)
 80017a4:	5cd3      	ldrb	r3, [r2, r3]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	bf0c      	ite	eq
 80017aa:	2301      	moveq	r3, #1
 80017ac:	2300      	movne	r3, #0
 80017ae:	b2db      	uxtb	r3, r3
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20000070 	.word	0x20000070

080017c0 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char index){
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff;
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <is_button_pressed_1s+0x14>
 80017d0:	23ff      	movs	r3, #255	; 0xff
 80017d2:	e007      	b.n	80017e4 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1) ;
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	4a06      	ldr	r2, [pc, #24]	; (80017f0 <is_button_pressed_1s+0x30>)
 80017d8:	5cd3      	ldrb	r3, [r2, r3]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	bf0c      	ite	eq
 80017de:	2301      	moveq	r3, #1
 80017e0:	2300      	movne	r3, #0
 80017e2:	b2db      	uxtb	r3, r3
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	2000007c 	.word	0x2000007c

080017f4 <Display7Seg>:
 *
 *  Created on: Sep 27, 2024
 *      Author: Genki
 */
#include "main.h"
void Display7Seg(int x){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	if(x == 0){
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d128      	bne.n	8001854 <Display7Seg+0x60>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	2180      	movs	r1, #128	; 0x80
 8001806:	48d2      	ldr	r0, [pc, #840]	; (8001b50 <Display7Seg+0x35c>)
 8001808:	f001 f8af 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800180c:	2200      	movs	r2, #0
 800180e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001812:	48cf      	ldr	r0, [pc, #828]	; (8001b50 <Display7Seg+0x35c>)
 8001814:	f001 f8a9 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800181e:	48cc      	ldr	r0, [pc, #816]	; (8001b50 <Display7Seg+0x35c>)
 8001820:	f001 f8a3 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800182a:	48c9      	ldr	r0, [pc, #804]	; (8001b50 <Display7Seg+0x35c>)
 800182c:	f001 f89d 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001836:	48c6      	ldr	r0, [pc, #792]	; (8001b50 <Display7Seg+0x35c>)
 8001838:	f001 f897 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001842:	48c3      	ldr	r0, [pc, #780]	; (8001b50 <Display7Seg+0x35c>)
 8001844:	f001 f891 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8001848:	2201      	movs	r2, #1
 800184a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800184e:	48c0      	ldr	r0, [pc, #768]	; (8001b50 <Display7Seg+0x35c>)
 8001850:	f001 f88b 	bl	800296a <HAL_GPIO_WritePin>
	}
	if(x == 1){
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d128      	bne.n	80018ac <Display7Seg+0xb8>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800185a:	2201      	movs	r2, #1
 800185c:	2180      	movs	r1, #128	; 0x80
 800185e:	48bc      	ldr	r0, [pc, #752]	; (8001b50 <Display7Seg+0x35c>)
 8001860:	f001 f883 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	f44f 7180 	mov.w	r1, #256	; 0x100
 800186a:	48b9      	ldr	r0, [pc, #740]	; (8001b50 <Display7Seg+0x35c>)
 800186c:	f001 f87d 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001870:	2200      	movs	r2, #0
 8001872:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001876:	48b6      	ldr	r0, [pc, #728]	; (8001b50 <Display7Seg+0x35c>)
 8001878:	f001 f877 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 800187c:	2201      	movs	r2, #1
 800187e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001882:	48b3      	ldr	r0, [pc, #716]	; (8001b50 <Display7Seg+0x35c>)
 8001884:	f001 f871 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001888:	2201      	movs	r2, #1
 800188a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800188e:	48b0      	ldr	r0, [pc, #704]	; (8001b50 <Display7Seg+0x35c>)
 8001890:	f001 f86b 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8001894:	2201      	movs	r2, #1
 8001896:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800189a:	48ad      	ldr	r0, [pc, #692]	; (8001b50 <Display7Seg+0x35c>)
 800189c:	f001 f865 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 80018a0:	2201      	movs	r2, #1
 80018a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018a6:	48aa      	ldr	r0, [pc, #680]	; (8001b50 <Display7Seg+0x35c>)
 80018a8:	f001 f85f 	bl	800296a <HAL_GPIO_WritePin>
		}
	if(x == 2){
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d128      	bne.n	8001904 <Display7Seg+0x110>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2180      	movs	r1, #128	; 0x80
 80018b6:	48a6      	ldr	r0, [pc, #664]	; (8001b50 <Display7Seg+0x35c>)
 80018b8:	f001 f857 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80018bc:	2200      	movs	r2, #0
 80018be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018c2:	48a3      	ldr	r0, [pc, #652]	; (8001b50 <Display7Seg+0x35c>)
 80018c4:	f001 f851 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80018c8:	2201      	movs	r2, #1
 80018ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ce:	48a0      	ldr	r0, [pc, #640]	; (8001b50 <Display7Seg+0x35c>)
 80018d0:	f001 f84b 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018da:	489d      	ldr	r0, [pc, #628]	; (8001b50 <Display7Seg+0x35c>)
 80018dc:	f001 f845 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018e6:	489a      	ldr	r0, [pc, #616]	; (8001b50 <Display7Seg+0x35c>)
 80018e8:	f001 f83f 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 80018ec:	2201      	movs	r2, #1
 80018ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018f2:	4897      	ldr	r0, [pc, #604]	; (8001b50 <Display7Seg+0x35c>)
 80018f4:	f001 f839 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 80018f8:	2200      	movs	r2, #0
 80018fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018fe:	4894      	ldr	r0, [pc, #592]	; (8001b50 <Display7Seg+0x35c>)
 8001900:	f001 f833 	bl	800296a <HAL_GPIO_WritePin>
		}
	if(x == 3){
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b03      	cmp	r3, #3
 8001908:	d128      	bne.n	800195c <Display7Seg+0x168>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	4890      	ldr	r0, [pc, #576]	; (8001b50 <Display7Seg+0x35c>)
 8001910:	f001 f82b 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001914:	2200      	movs	r2, #0
 8001916:	f44f 7180 	mov.w	r1, #256	; 0x100
 800191a:	488d      	ldr	r0, [pc, #564]	; (8001b50 <Display7Seg+0x35c>)
 800191c:	f001 f825 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001926:	488a      	ldr	r0, [pc, #552]	; (8001b50 <Display7Seg+0x35c>)
 8001928:	f001 f81f 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800192c:	2200      	movs	r2, #0
 800192e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001932:	4887      	ldr	r0, [pc, #540]	; (8001b50 <Display7Seg+0x35c>)
 8001934:	f001 f819 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001938:	2201      	movs	r2, #1
 800193a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800193e:	4884      	ldr	r0, [pc, #528]	; (8001b50 <Display7Seg+0x35c>)
 8001940:	f001 f813 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8001944:	2201      	movs	r2, #1
 8001946:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800194a:	4881      	ldr	r0, [pc, #516]	; (8001b50 <Display7Seg+0x35c>)
 800194c:	f001 f80d 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8001950:	2200      	movs	r2, #0
 8001952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001956:	487e      	ldr	r0, [pc, #504]	; (8001b50 <Display7Seg+0x35c>)
 8001958:	f001 f807 	bl	800296a <HAL_GPIO_WritePin>
		}
	if(x == 4){
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b04      	cmp	r3, #4
 8001960:	d128      	bne.n	80019b4 <Display7Seg+0x1c0>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001962:	2201      	movs	r2, #1
 8001964:	2180      	movs	r1, #128	; 0x80
 8001966:	487a      	ldr	r0, [pc, #488]	; (8001b50 <Display7Seg+0x35c>)
 8001968:	f000 ffff 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800196c:	2200      	movs	r2, #0
 800196e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001972:	4877      	ldr	r0, [pc, #476]	; (8001b50 <Display7Seg+0x35c>)
 8001974:	f000 fff9 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001978:	2200      	movs	r2, #0
 800197a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800197e:	4874      	ldr	r0, [pc, #464]	; (8001b50 <Display7Seg+0x35c>)
 8001980:	f000 fff3 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8001984:	2201      	movs	r2, #1
 8001986:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800198a:	4871      	ldr	r0, [pc, #452]	; (8001b50 <Display7Seg+0x35c>)
 800198c:	f000 ffed 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001990:	2201      	movs	r2, #1
 8001992:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001996:	486e      	ldr	r0, [pc, #440]	; (8001b50 <Display7Seg+0x35c>)
 8001998:	f000 ffe7 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019a2:	486b      	ldr	r0, [pc, #428]	; (8001b50 <Display7Seg+0x35c>)
 80019a4:	f000 ffe1 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ae:	4868      	ldr	r0, [pc, #416]	; (8001b50 <Display7Seg+0x35c>)
 80019b0:	f000 ffdb 	bl	800296a <HAL_GPIO_WritePin>
		}
	if(x == 5){
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b05      	cmp	r3, #5
 80019b8:	d128      	bne.n	8001a0c <Display7Seg+0x218>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2180      	movs	r1, #128	; 0x80
 80019be:	4864      	ldr	r0, [pc, #400]	; (8001b50 <Display7Seg+0x35c>)
 80019c0:	f000 ffd3 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80019c4:	2201      	movs	r2, #1
 80019c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019ca:	4861      	ldr	r0, [pc, #388]	; (8001b50 <Display7Seg+0x35c>)
 80019cc:	f000 ffcd 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019d6:	485e      	ldr	r0, [pc, #376]	; (8001b50 <Display7Seg+0x35c>)
 80019d8:	f000 ffc7 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80019dc:	2200      	movs	r2, #0
 80019de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019e2:	485b      	ldr	r0, [pc, #364]	; (8001b50 <Display7Seg+0x35c>)
 80019e4:	f000 ffc1 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 80019e8:	2201      	movs	r2, #1
 80019ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019ee:	4858      	ldr	r0, [pc, #352]	; (8001b50 <Display7Seg+0x35c>)
 80019f0:	f000 ffbb 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019fa:	4855      	ldr	r0, [pc, #340]	; (8001b50 <Display7Seg+0x35c>)
 80019fc:	f000 ffb5 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a06:	4852      	ldr	r0, [pc, #328]	; (8001b50 <Display7Seg+0x35c>)
 8001a08:	f000 ffaf 	bl	800296a <HAL_GPIO_WritePin>
		}
	if(x == 6){
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d128      	bne.n	8001a64 <Display7Seg+0x270>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2180      	movs	r1, #128	; 0x80
 8001a16:	484e      	ldr	r0, [pc, #312]	; (8001b50 <Display7Seg+0x35c>)
 8001a18:	f000 ffa7 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a22:	484b      	ldr	r0, [pc, #300]	; (8001b50 <Display7Seg+0x35c>)
 8001a24:	f000 ffa1 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a2e:	4848      	ldr	r0, [pc, #288]	; (8001b50 <Display7Seg+0x35c>)
 8001a30:	f000 ff9b 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001a34:	2200      	movs	r2, #0
 8001a36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a3a:	4845      	ldr	r0, [pc, #276]	; (8001b50 <Display7Seg+0x35c>)
 8001a3c:	f000 ff95 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8001a40:	2200      	movs	r2, #0
 8001a42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a46:	4842      	ldr	r0, [pc, #264]	; (8001b50 <Display7Seg+0x35c>)
 8001a48:	f000 ff8f 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a52:	483f      	ldr	r0, [pc, #252]	; (8001b50 <Display7Seg+0x35c>)
 8001a54:	f000 ff89 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a5e:	483c      	ldr	r0, [pc, #240]	; (8001b50 <Display7Seg+0x35c>)
 8001a60:	f000 ff83 	bl	800296a <HAL_GPIO_WritePin>
		}
	if(x == 7){
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b07      	cmp	r3, #7
 8001a68:	d128      	bne.n	8001abc <Display7Seg+0x2c8>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2180      	movs	r1, #128	; 0x80
 8001a6e:	4838      	ldr	r0, [pc, #224]	; (8001b50 <Display7Seg+0x35c>)
 8001a70:	f000 ff7b 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a7a:	4835      	ldr	r0, [pc, #212]	; (8001b50 <Display7Seg+0x35c>)
 8001a7c:	f000 ff75 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001a80:	2200      	movs	r2, #0
 8001a82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a86:	4832      	ldr	r0, [pc, #200]	; (8001b50 <Display7Seg+0x35c>)
 8001a88:	f000 ff6f 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a92:	482f      	ldr	r0, [pc, #188]	; (8001b50 <Display7Seg+0x35c>)
 8001a94:	f000 ff69 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a9e:	482c      	ldr	r0, [pc, #176]	; (8001b50 <Display7Seg+0x35c>)
 8001aa0:	f000 ff63 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aaa:	4829      	ldr	r0, [pc, #164]	; (8001b50 <Display7Seg+0x35c>)
 8001aac:	f000 ff5d 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ab6:	4826      	ldr	r0, [pc, #152]	; (8001b50 <Display7Seg+0x35c>)
 8001ab8:	f000 ff57 	bl	800296a <HAL_GPIO_WritePin>
		}
	if(x == 8){
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d128      	bne.n	8001b14 <Display7Seg+0x320>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2180      	movs	r1, #128	; 0x80
 8001ac6:	4822      	ldr	r0, [pc, #136]	; (8001b50 <Display7Seg+0x35c>)
 8001ac8:	f000 ff4f 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001acc:	2200      	movs	r2, #0
 8001ace:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ad2:	481f      	ldr	r0, [pc, #124]	; (8001b50 <Display7Seg+0x35c>)
 8001ad4:	f000 ff49 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ade:	481c      	ldr	r0, [pc, #112]	; (8001b50 <Display7Seg+0x35c>)
 8001ae0:	f000 ff43 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aea:	4819      	ldr	r0, [pc, #100]	; (8001b50 <Display7Seg+0x35c>)
 8001aec:	f000 ff3d 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8001af0:	2200      	movs	r2, #0
 8001af2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001af6:	4816      	ldr	r0, [pc, #88]	; (8001b50 <Display7Seg+0x35c>)
 8001af8:	f000 ff37 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b02:	4813      	ldr	r0, [pc, #76]	; (8001b50 <Display7Seg+0x35c>)
 8001b04:	f000 ff31 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b0e:	4810      	ldr	r0, [pc, #64]	; (8001b50 <Display7Seg+0x35c>)
 8001b10:	f000 ff2b 	bl	800296a <HAL_GPIO_WritePin>
			}
	if(x == 9){
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b09      	cmp	r3, #9
 8001b18:	d12b      	bne.n	8001b72 <Display7Seg+0x37e>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2180      	movs	r1, #128	; 0x80
 8001b1e:	480c      	ldr	r0, [pc, #48]	; (8001b50 <Display7Seg+0x35c>)
 8001b20:	f000 ff23 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001b24:	2200      	movs	r2, #0
 8001b26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b2a:	4809      	ldr	r0, [pc, #36]	; (8001b50 <Display7Seg+0x35c>)
 8001b2c:	f000 ff1d 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001b30:	2200      	movs	r2, #0
 8001b32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b36:	4806      	ldr	r0, [pc, #24]	; (8001b50 <Display7Seg+0x35c>)
 8001b38:	f000 ff17 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b42:	4803      	ldr	r0, [pc, #12]	; (8001b50 <Display7Seg+0x35c>)
 8001b44:	f000 ff11 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b4e:	e001      	b.n	8001b54 <Display7Seg+0x360>
 8001b50:	40010800 	.word	0x40010800
 8001b54:	4809      	ldr	r0, [pc, #36]	; (8001b7c <Display7Seg+0x388>)
 8001b56:	f000 ff08 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b60:	4806      	ldr	r0, [pc, #24]	; (8001b7c <Display7Seg+0x388>)
 8001b62:	f000 ff02 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8001b66:	2200      	movs	r2, #0
 8001b68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b6c:	4803      	ldr	r0, [pc, #12]	; (8001b7c <Display7Seg+0x388>)
 8001b6e:	f000 fefc 	bl	800296a <HAL_GPIO_WritePin>
	}
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40010800 	.word	0x40010800

08001b80 <Display>:
void Display(int x){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d86e      	bhi.n	8001c6c <Display+0xec>
 8001b8e:	a201      	add	r2, pc, #4	; (adr r2, 8001b94 <Display+0x14>)
 8001b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b94:	08001ba5 	.word	0x08001ba5
 8001b98:	08001bd7 	.word	0x08001bd7
 8001b9c:	08001c09 	.word	0x08001c09
 8001ba0:	08001c3b 	.word	0x08001c3b
	switch(x){
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001baa:	4833      	ldr	r0, [pc, #204]	; (8001c78 <Display+0xf8>)
 8001bac:	f000 fedd 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bb6:	4830      	ldr	r0, [pc, #192]	; (8001c78 <Display+0xf8>)
 8001bb8:	f000 fed7 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bc2:	482d      	ldr	r0, [pc, #180]	; (8001c78 <Display+0xf8>)
 8001bc4:	f000 fed1 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bce:	482a      	ldr	r0, [pc, #168]	; (8001c78 <Display+0xf8>)
 8001bd0:	f000 fecb 	bl	800296a <HAL_GPIO_WritePin>
		break;
 8001bd4:	e04b      	b.n	8001c6e <Display+0xee>
	case 1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bdc:	4826      	ldr	r0, [pc, #152]	; (8001c78 <Display+0xf8>)
 8001bde:	f000 fec4 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001be2:	2200      	movs	r2, #0
 8001be4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001be8:	4823      	ldr	r0, [pc, #140]	; (8001c78 <Display+0xf8>)
 8001bea:	f000 febe 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bf4:	4820      	ldr	r0, [pc, #128]	; (8001c78 <Display+0xf8>)
 8001bf6:	f000 feb8 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c00:	481d      	ldr	r0, [pc, #116]	; (8001c78 <Display+0xf8>)
 8001c02:	f000 feb2 	bl	800296a <HAL_GPIO_WritePin>
		break;
 8001c06:	e032      	b.n	8001c6e <Display+0xee>
	case 2:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c0e:	481a      	ldr	r0, [pc, #104]	; (8001c78 <Display+0xf8>)
 8001c10:	f000 feab 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001c14:	2201      	movs	r2, #1
 8001c16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c1a:	4817      	ldr	r0, [pc, #92]	; (8001c78 <Display+0xf8>)
 8001c1c:	f000 fea5 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8001c20:	2200      	movs	r2, #0
 8001c22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c26:	4814      	ldr	r0, [pc, #80]	; (8001c78 <Display+0xf8>)
 8001c28:	f000 fe9f 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c32:	4811      	ldr	r0, [pc, #68]	; (8001c78 <Display+0xf8>)
 8001c34:	f000 fe99 	bl	800296a <HAL_GPIO_WritePin>
		break;
 8001c38:	e019      	b.n	8001c6e <Display+0xee>
	case 3:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c40:	480d      	ldr	r0, [pc, #52]	; (8001c78 <Display+0xf8>)
 8001c42:	f000 fe92 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001c46:	2201      	movs	r2, #1
 8001c48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c4c:	480a      	ldr	r0, [pc, #40]	; (8001c78 <Display+0xf8>)
 8001c4e:	f000 fe8c 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001c52:	2201      	movs	r2, #1
 8001c54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c58:	4807      	ldr	r0, [pc, #28]	; (8001c78 <Display+0xf8>)
 8001c5a:	f000 fe86 	bl	800296a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c64:	4804      	ldr	r0, [pc, #16]	; (8001c78 <Display+0xf8>)
 8001c66:	f000 fe80 	bl	800296a <HAL_GPIO_WritePin>

		break;
 8001c6a:	e000      	b.n	8001c6e <Display+0xee>
	default:
		break;
 8001c6c:	bf00      	nop
	}
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40010c00 	.word	0x40010c00

08001c7c <DisplayREDX>:
void DisplayREDX(void){
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, SET);
 8001c80:	2201      	movs	r2, #1
 8001c82:	2108      	movs	r1, #8
 8001c84:	4807      	ldr	r0, [pc, #28]	; (8001ca4 <DisplayREDX+0x28>)
 8001c86:	f000 fe70 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2120      	movs	r1, #32
 8001c8e:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <DisplayREDX+0x28>)
 8001c90:	f000 fe6b 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, RESET);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2110      	movs	r1, #16
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <DisplayREDX+0x28>)
 8001c9a:	f000 fe66 	bl	800296a <HAL_GPIO_WritePin>
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40010c00 	.word	0x40010c00

08001ca8 <DisplayYELLOWX>:
void DisplayYELLOWX(void){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, RESET);
 8001cac:	2200      	movs	r2, #0
 8001cae:	2108      	movs	r1, #8
 8001cb0:	4807      	ldr	r0, [pc, #28]	; (8001cd0 <DisplayYELLOWX+0x28>)
 8001cb2:	f000 fe5a 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, RESET);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2120      	movs	r1, #32
 8001cba:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <DisplayYELLOWX+0x28>)
 8001cbc:	f000 fe55 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, SET);
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	2110      	movs	r1, #16
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <DisplayYELLOWX+0x28>)
 8001cc6:	f000 fe50 	bl	800296a <HAL_GPIO_WritePin>
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40010c00 	.word	0x40010c00

08001cd4 <DisplayGREENX>:
void DisplayGREENX(void){
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, RESET);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2108      	movs	r1, #8
 8001cdc:	4807      	ldr	r0, [pc, #28]	; (8001cfc <DisplayGREENX+0x28>)
 8001cde:	f000 fe44 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, SET);
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	2120      	movs	r1, #32
 8001ce6:	4805      	ldr	r0, [pc, #20]	; (8001cfc <DisplayGREENX+0x28>)
 8001ce8:	f000 fe3f 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, RESET);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2110      	movs	r1, #16
 8001cf0:	4802      	ldr	r0, [pc, #8]	; (8001cfc <DisplayGREENX+0x28>)
 8001cf2:	f000 fe3a 	bl	800296a <HAL_GPIO_WritePin>
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40010c00 	.word	0x40010c00

08001d00 <DisplayREDY>:
void DisplayREDY(void){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, SET);
 8001d04:	2201      	movs	r2, #1
 8001d06:	2140      	movs	r1, #64	; 0x40
 8001d08:	4807      	ldr	r0, [pc, #28]	; (8001d28 <DisplayREDY+0x28>)
 8001d0a:	f000 fe2e 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, RESET);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d14:	4804      	ldr	r0, [pc, #16]	; (8001d28 <DisplayREDY+0x28>)
 8001d16:	f000 fe28 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, RESET);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2180      	movs	r1, #128	; 0x80
 8001d1e:	4802      	ldr	r0, [pc, #8]	; (8001d28 <DisplayREDY+0x28>)
 8001d20:	f000 fe23 	bl	800296a <HAL_GPIO_WritePin>
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40010c00 	.word	0x40010c00

08001d2c <DisplayYELLOWY>:
void DisplayYELLOWY(void){
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, RESET);
 8001d30:	2200      	movs	r2, #0
 8001d32:	2140      	movs	r1, #64	; 0x40
 8001d34:	4807      	ldr	r0, [pc, #28]	; (8001d54 <DisplayYELLOWY+0x28>)
 8001d36:	f000 fe18 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, RESET);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d40:	4804      	ldr	r0, [pc, #16]	; (8001d54 <DisplayYELLOWY+0x28>)
 8001d42:	f000 fe12 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, SET);
 8001d46:	2201      	movs	r2, #1
 8001d48:	2180      	movs	r1, #128	; 0x80
 8001d4a:	4802      	ldr	r0, [pc, #8]	; (8001d54 <DisplayYELLOWY+0x28>)
 8001d4c:	f000 fe0d 	bl	800296a <HAL_GPIO_WritePin>
}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40010c00 	.word	0x40010c00

08001d58 <DisplayGREENY>:
void DisplayGREENY(void){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, RESET);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2140      	movs	r1, #64	; 0x40
 8001d60:	4807      	ldr	r0, [pc, #28]	; (8001d80 <DisplayGREENY+0x28>)
 8001d62:	f000 fe02 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, SET);
 8001d66:	2201      	movs	r2, #1
 8001d68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d6c:	4804      	ldr	r0, [pc, #16]	; (8001d80 <DisplayGREENY+0x28>)
 8001d6e:	f000 fdfc 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2180      	movs	r1, #128	; 0x80
 8001d76:	4802      	ldr	r0, [pc, #8]	; (8001d80 <DisplayGREENY+0x28>)
 8001d78:	f000 fdf7 	bl	800296a <HAL_GPIO_WritePin>
}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40010c00 	.word	0x40010c00

08001d84 <DisplayMAN_REDX>:
void DisplayMAN_REDX(void){
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin);
 8001d88:	2108      	movs	r1, #8
 8001d8a:	4802      	ldr	r0, [pc, #8]	; (8001d94 <DisplayMAN_REDX+0x10>)
 8001d8c:	f000 fe05 	bl	800299a <HAL_GPIO_TogglePin>
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40010c00 	.word	0x40010c00

08001d98 <DisplayMAN_REDY>:
void DisplayMAN_REDY(void){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin);
 8001d9c:	2140      	movs	r1, #64	; 0x40
 8001d9e:	4802      	ldr	r0, [pc, #8]	; (8001da8 <DisplayMAN_REDY+0x10>)
 8001da0:	f000 fdfb 	bl	800299a <HAL_GPIO_TogglePin>
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40010c00 	.word	0x40010c00

08001dac <DisplayMAN_GREENX>:
void DisplayMAN_GREENX(void){
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin);
 8001db0:	2120      	movs	r1, #32
 8001db2:	4802      	ldr	r0, [pc, #8]	; (8001dbc <DisplayMAN_GREENX+0x10>)
 8001db4:	f000 fdf1 	bl	800299a <HAL_GPIO_TogglePin>
}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40010c00 	.word	0x40010c00

08001dc0 <DisplayMAN_GREENY>:
void DisplayMAN_GREENY(void){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin);
 8001dc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <DisplayMAN_GREENY+0x14>)
 8001dca:	f000 fde6 	bl	800299a <HAL_GPIO_TogglePin>
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40010c00 	.word	0x40010c00

08001dd8 <DisplayMAN_YELLOWX>:
void DisplayMAN_YELLOWX(void){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin);
 8001ddc:	2110      	movs	r1, #16
 8001dde:	4802      	ldr	r0, [pc, #8]	; (8001de8 <DisplayMAN_YELLOWX+0x10>)
 8001de0:	f000 fddb 	bl	800299a <HAL_GPIO_TogglePin>
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40010c00 	.word	0x40010c00

08001dec <DisplayMAN_YELLOWY>:
void DisplayMAN_YELLOWY(void){
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin);
 8001df0:	2180      	movs	r1, #128	; 0x80
 8001df2:	4802      	ldr	r0, [pc, #8]	; (8001dfc <DisplayMAN_YELLOWY+0x10>)
 8001df4:	f000 fdd1 	bl	800299a <HAL_GPIO_TogglePin>
}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40010c00 	.word	0x40010c00

08001e00 <InitLED>:
void InitLED(void){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, RESET);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2108      	movs	r1, #8
 8001e08:	480f      	ldr	r0, [pc, #60]	; (8001e48 <InitLED+0x48>)
 8001e0a:	f000 fdae 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, RESET);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2120      	movs	r1, #32
 8001e12:	480d      	ldr	r0, [pc, #52]	; (8001e48 <InitLED+0x48>)
 8001e14:	f000 fda9 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, RESET);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2110      	movs	r1, #16
 8001e1c:	480a      	ldr	r0, [pc, #40]	; (8001e48 <InitLED+0x48>)
 8001e1e:	f000 fda4 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, RESET);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2140      	movs	r1, #64	; 0x40
 8001e26:	4808      	ldr	r0, [pc, #32]	; (8001e48 <InitLED+0x48>)
 8001e28:	f000 fd9f 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, RESET);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e32:	4805      	ldr	r0, [pc, #20]	; (8001e48 <InitLED+0x48>)
 8001e34:	f000 fd99 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, RESET);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2180      	movs	r1, #128	; 0x80
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <InitLED+0x48>)
 8001e3e:	f000 fd94 	bl	800296a <HAL_GPIO_WritePin>
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40010c00 	.word	0x40010c00

08001e4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e50:	f000 fa8a 	bl	8002368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e54:	f000 f8d4 	bl	8002000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e58:	f000 f95a 	bl	8002110 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001e5c:	f000 f90c 	bl	8002078 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001e60:	4852      	ldr	r0, [pc, #328]	; (8001fac <main+0x160>)
 8001e62:	f001 f9df 	bl	8003224 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001e66:	2201      	movs	r2, #1
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	4851      	ldr	r0, [pc, #324]	; (8001fb0 <main+0x164>)
 8001e6c:	f000 fd7d 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001e70:	2201      	movs	r2, #1
 8001e72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e76:	484e      	ldr	r0, [pc, #312]	; (8001fb0 <main+0x164>)
 8001e78:	f000 fd77 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e82:	484b      	ldr	r0, [pc, #300]	; (8001fb0 <main+0x164>)
 8001e84:	f000 fd71 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e8e:	4848      	ldr	r0, [pc, #288]	; (8001fb0 <main+0x164>)
 8001e90:	f000 fd6b 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001e94:	2201      	movs	r2, #1
 8001e96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e9a:	4845      	ldr	r0, [pc, #276]	; (8001fb0 <main+0x164>)
 8001e9c:	f000 fd65 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ea6:	4842      	ldr	r0, [pc, #264]	; (8001fb0 <main+0x164>)
 8001ea8:	f000 fd5f 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8001eac:	2201      	movs	r2, #1
 8001eae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eb2:	483f      	ldr	r0, [pc, #252]	; (8001fb0 <main+0x164>)
 8001eb4:	f000 fd59 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ebe:	483d      	ldr	r0, [pc, #244]	; (8001fb4 <main+0x168>)
 8001ec0:	f000 fd53 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eca:	483a      	ldr	r0, [pc, #232]	; (8001fb4 <main+0x168>)
 8001ecc:	f000 fd4d 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ed6:	4837      	ldr	r0, [pc, #220]	; (8001fb4 <main+0x168>)
 8001ed8:	f000 fd47 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001edc:	2201      	movs	r2, #1
 8001ede:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ee2:	4834      	ldr	r0, [pc, #208]	; (8001fb4 <main+0x168>)
 8001ee4:	f000 fd41 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eee:	4831      	ldr	r0, [pc, #196]	; (8001fb4 <main+0x168>)
 8001ef0:	f000 fd3b 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, GPIO_PIN_SET);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001efa:	482e      	ldr	r0, [pc, #184]	; (8001fb4 <main+0x168>)
 8001efc:	f000 fd35 	bl	800296a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN6_GPIO_Port, EN6_Pin, GPIO_PIN_SET);
 8001f00:	2201      	movs	r2, #1
 8001f02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f06:	482b      	ldr	r0, [pc, #172]	; (8001fb4 <main+0x168>)
 8001f08:	f000 fd2f 	bl	800296a <HAL_GPIO_WritePin>
	statusx = INIT;
 8001f0c:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <main+0x16c>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	601a      	str	r2, [r3, #0]
	statusy = INIT;
 8001f12:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <main+0x170>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	601a      	str	r2, [r3, #0]
	counter_x = 0;
 8001f18:	4b29      	ldr	r3, [pc, #164]	; (8001fc0 <main+0x174>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
	counter_y = 0;
 8001f1e:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <main+0x178>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
	counterMode = 1;
 8001f24:	4b28      	ldr	r3, [pc, #160]	; (8001fc8 <main+0x17c>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	601a      	str	r2, [r3, #0]
	counterTimeSet = 0;
 8001f2a:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <main+0x180>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
	DisplayCounter = 0;
 8001f30:	4b27      	ldr	r3, [pc, #156]	; (8001fd0 <main+0x184>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
	SCH_Add_Task(fsm_automatic_runx, 0, 10);
 8001f36:	220a      	movs	r2, #10
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4826      	ldr	r0, [pc, #152]	; (8001fd4 <main+0x188>)
 8001f3c:	f7fe f974 	bl	8000228 <SCH_Add_Task>
	SCH_Add_Task(fsm_automatic_runy, 0, 10);
 8001f40:	220a      	movs	r2, #10
 8001f42:	2100      	movs	r1, #0
 8001f44:	4824      	ldr	r0, [pc, #144]	; (8001fd8 <main+0x18c>)
 8001f46:	f7fe f96f 	bl	8000228 <SCH_Add_Task>
	SCH_Add_Task(fsm_clock, 100, 25);
 8001f4a:	2219      	movs	r2, #25
 8001f4c:	2164      	movs	r1, #100	; 0x64
 8001f4e:	4823      	ldr	r0, [pc, #140]	; (8001fdc <main+0x190>)
 8001f50:	f7fe f96a 	bl	8000228 <SCH_Add_Task>
	SCH_Add_Task(clockX, 100, 100);
 8001f54:	2264      	movs	r2, #100	; 0x64
 8001f56:	2164      	movs	r1, #100	; 0x64
 8001f58:	4821      	ldr	r0, [pc, #132]	; (8001fe0 <main+0x194>)
 8001f5a:	f7fe f965 	bl	8000228 <SCH_Add_Task>
	SCH_Add_Task(clockY, 100, 100);
 8001f5e:	2264      	movs	r2, #100	; 0x64
 8001f60:	2164      	movs	r1, #100	; 0x64
 8001f62:	4820      	ldr	r0, [pc, #128]	; (8001fe4 <main+0x198>)
 8001f64:	f7fe f960 	bl	8000228 <SCH_Add_Task>
	SCH_Add_Task(fsm_mode, 100, 25);
 8001f68:	2219      	movs	r2, #25
 8001f6a:	2164      	movs	r1, #100	; 0x64
 8001f6c:	481e      	ldr	r0, [pc, #120]	; (8001fe8 <main+0x19c>)
 8001f6e:	f7fe f95b 	bl	8000228 <SCH_Add_Task>

	SCH_Add_Task(fsm_manual_run1, 10, 10);
 8001f72:	220a      	movs	r2, #10
 8001f74:	210a      	movs	r1, #10
 8001f76:	481d      	ldr	r0, [pc, #116]	; (8001fec <main+0x1a0>)
 8001f78:	f7fe f956 	bl	8000228 <SCH_Add_Task>
	SCH_Add_Task(fsm_manual_run2, 10, 10);
 8001f7c:	220a      	movs	r2, #10
 8001f7e:	210a      	movs	r1, #10
 8001f80:	481b      	ldr	r0, [pc, #108]	; (8001ff0 <main+0x1a4>)
 8001f82:	f7fe f951 	bl	8000228 <SCH_Add_Task>
	SCH_Add_Task(fsm_for_input_processing1, 10, 10);
 8001f86:	220a      	movs	r2, #10
 8001f88:	210a      	movs	r1, #10
 8001f8a:	481a      	ldr	r0, [pc, #104]	; (8001ff4 <main+0x1a8>)
 8001f8c:	f7fe f94c 	bl	8000228 <SCH_Add_Task>
	SCH_Add_Task(fsm_for_input_processing2, 10, 10);
 8001f90:	220a      	movs	r2, #10
 8001f92:	210a      	movs	r1, #10
 8001f94:	4818      	ldr	r0, [pc, #96]	; (8001ff8 <main+0x1ac>)
 8001f96:	f7fe f947 	bl	8000228 <SCH_Add_Task>
	SCH_Add_Task(fsm_for_input_processing3, 10, 10);
 8001f9a:	220a      	movs	r2, #10
 8001f9c:	210a      	movs	r1, #10
 8001f9e:	4817      	ldr	r0, [pc, #92]	; (8001ffc <main+0x1b0>)
 8001fa0:	f7fe f942 	bl	8000228 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8001fa4:	f7fe f992 	bl	80002cc <SCH_Dispatch_Tasks>
 8001fa8:	e7fc      	b.n	8001fa4 <main+0x158>
 8001faa:	bf00      	nop
 8001fac:	200003b4 	.word	0x200003b4
 8001fb0:	40010800 	.word	0x40010800
 8001fb4:	40010c00 	.word	0x40010c00
 8001fb8:	20000054 	.word	0x20000054
 8001fbc:	20000058 	.word	0x20000058
 8001fc0:	20000044 	.word	0x20000044
 8001fc4:	20000048 	.word	0x20000048
 8001fc8:	20000068 	.word	0x20000068
 8001fcc:	2000006c 	.word	0x2000006c
 8001fd0:	2000002c 	.word	0x2000002c
 8001fd4:	08000889 	.word	0x08000889
 8001fd8:	08000a9d 	.word	0x08000a9d
 8001fdc:	08000625 	.word	0x08000625
 8001fe0:	0800070d 	.word	0x0800070d
 8001fe4:	08000769 	.word	0x08000769
 8001fe8:	080007c5 	.word	0x080007c5
 8001fec:	08000d59 	.word	0x08000d59
 8001ff0:	08001155 	.word	0x08001155
 8001ff4:	080013bd 	.word	0x080013bd
 8001ff8:	08001469 	.word	0x08001469
 8001ffc:	0800150d 	.word	0x0800150d

08002000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b090      	sub	sp, #64	; 0x40
 8002004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002006:	f107 0318 	add.w	r3, r7, #24
 800200a:	2228      	movs	r2, #40	; 0x28
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f001 fcb8 	bl	8003984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	60da      	str	r2, [r3, #12]
 8002020:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002022:	2302      	movs	r3, #2
 8002024:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002026:	2301      	movs	r3, #1
 8002028:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800202a:	2310      	movs	r3, #16
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800202e:	2300      	movs	r3, #0
 8002030:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002032:	f107 0318 	add.w	r3, r7, #24
 8002036:	4618      	mov	r0, r3
 8002038:	f000 fcc8 	bl	80029cc <HAL_RCC_OscConfig>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8002042:	f000 f8d8 	bl	80021f6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002046:	230f      	movs	r3, #15
 8002048:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	2100      	movs	r1, #0
 800205e:	4618      	mov	r0, r3
 8002060:	f000 ff34 	bl	8002ecc <HAL_RCC_ClockConfig>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800206a:	f000 f8c4 	bl	80021f6 <Error_Handler>
  }
}
 800206e:	bf00      	nop
 8002070:	3740      	adds	r7, #64	; 0x40
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800207e:	f107 0308 	add.w	r3, r7, #8
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	609a      	str	r2, [r3, #8]
 800208a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800208c:	463b      	mov	r3, r7
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002094:	4b1d      	ldr	r3, [pc, #116]	; (800210c <MX_TIM2_Init+0x94>)
 8002096:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800209a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800209c:	4b1b      	ldr	r3, [pc, #108]	; (800210c <MX_TIM2_Init+0x94>)
 800209e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80020a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <MX_TIM2_Init+0x94>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80020aa:	4b18      	ldr	r3, [pc, #96]	; (800210c <MX_TIM2_Init+0x94>)
 80020ac:	2209      	movs	r2, #9
 80020ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b0:	4b16      	ldr	r3, [pc, #88]	; (800210c <MX_TIM2_Init+0x94>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b6:	4b15      	ldr	r3, [pc, #84]	; (800210c <MX_TIM2_Init+0x94>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020bc:	4813      	ldr	r0, [pc, #76]	; (800210c <MX_TIM2_Init+0x94>)
 80020be:	f001 f861 	bl	8003184 <HAL_TIM_Base_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80020c8:	f000 f895 	bl	80021f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020d2:	f107 0308 	add.w	r3, r7, #8
 80020d6:	4619      	mov	r1, r3
 80020d8:	480c      	ldr	r0, [pc, #48]	; (800210c <MX_TIM2_Init+0x94>)
 80020da:	f001 f9df 	bl	800349c <HAL_TIM_ConfigClockSource>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80020e4:	f000 f887 	bl	80021f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e8:	2300      	movs	r3, #0
 80020ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ec:	2300      	movs	r3, #0
 80020ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020f0:	463b      	mov	r3, r7
 80020f2:	4619      	mov	r1, r3
 80020f4:	4805      	ldr	r0, [pc, #20]	; (800210c <MX_TIM2_Init+0x94>)
 80020f6:	f001 fbb7 	bl	8003868 <HAL_TIMEx_MasterConfigSynchronization>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002100:	f000 f879 	bl	80021f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002104:	bf00      	nop
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	200003b4 	.word	0x200003b4

08002110 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002116:	f107 0308 	add.w	r3, r7, #8
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]
 8002122:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002124:	4b28      	ldr	r3, [pc, #160]	; (80021c8 <MX_GPIO_Init+0xb8>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	4a27      	ldr	r2, [pc, #156]	; (80021c8 <MX_GPIO_Init+0xb8>)
 800212a:	f043 0304 	orr.w	r3, r3, #4
 800212e:	6193      	str	r3, [r2, #24]
 8002130:	4b25      	ldr	r3, [pc, #148]	; (80021c8 <MX_GPIO_Init+0xb8>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	607b      	str	r3, [r7, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800213c:	4b22      	ldr	r3, [pc, #136]	; (80021c8 <MX_GPIO_Init+0xb8>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	4a21      	ldr	r2, [pc, #132]	; (80021c8 <MX_GPIO_Init+0xb8>)
 8002142:	f043 0308 	orr.w	r3, r3, #8
 8002146:	6193      	str	r3, [r2, #24]
 8002148:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <MX_GPIO_Init+0xb8>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8002154:	2200      	movs	r2, #0
 8002156:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 800215a:	481c      	ldr	r0, [pc, #112]	; (80021cc <MX_GPIO_Init+0xbc>)
 800215c:	f000 fc05 	bl	800296a <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN1_Pin|EN2_Pin|EN3_Pin|EN4_Pin
 8002160:	2200      	movs	r2, #0
 8002162:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 8002166:	481a      	ldr	r0, [pc, #104]	; (80021d0 <MX_GPIO_Init+0xc0>)
 8002168:	f000 fbff 	bl	800296a <HAL_GPIO_WritePin>
                          |LED_GREEN_X_Pin|LED_RED_Y_Pin|LED_YELLOW_Y_Pin|LED_GREEN_Y_Pin
                          |EN0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin LED6_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 800216c:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8002170:	60bb      	str	r3, [r7, #8]
                          |LED5_Pin|LED6_Pin|LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002172:	2301      	movs	r3, #1
 8002174:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	2302      	movs	r3, #2
 800217c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217e:	f107 0308 	add.w	r3, r7, #8
 8002182:	4619      	mov	r1, r3
 8002184:	4811      	ldr	r0, [pc, #68]	; (80021cc <MX_GPIO_Init+0xbc>)
 8002186:	f000 fa5f 	bl	8002648 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button_Pin|Button1_Pin|Button2_Pin;
 800218a:	2307      	movs	r3, #7
 800218c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002192:	2301      	movs	r3, #1
 8002194:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002196:	f107 0308 	add.w	r3, r7, #8
 800219a:	4619      	mov	r1, r3
 800219c:	480c      	ldr	r0, [pc, #48]	; (80021d0 <MX_GPIO_Init+0xc0>)
 800219e:	f000 fa53 	bl	8002648 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin EN4_Pin
                           EN5_Pin EN6_Pin LED_RED_X_Pin LED_YELLOW_X_Pin
                           LED_GREEN_X_Pin LED_RED_Y_Pin LED_YELLOW_Y_Pin LED_GREEN_Y_Pin
                           EN0_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin|EN4_Pin
 80021a2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80021a6:	60bb      	str	r3, [r7, #8]
                          |EN5_Pin|EN6_Pin|LED_RED_X_Pin|LED_YELLOW_X_Pin
                          |LED_GREEN_X_Pin|LED_RED_Y_Pin|LED_YELLOW_Y_Pin|LED_GREEN_Y_Pin
                          |EN0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a8:	2301      	movs	r3, #1
 80021aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	2302      	movs	r3, #2
 80021b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b4:	f107 0308 	add.w	r3, r7, #8
 80021b8:	4619      	mov	r1, r3
 80021ba:	4805      	ldr	r0, [pc, #20]	; (80021d0 <MX_GPIO_Init+0xc0>)
 80021bc:	f000 fa44 	bl	8002648 <HAL_GPIO_Init>

}
 80021c0:	bf00      	nop
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40010800 	.word	0x40010800
 80021d0:	40010c00 	.word	0x40010c00

080021d4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e4:	d103      	bne.n	80021ee <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 80021e6:	f7ff fa29 	bl	800163c <button_reading>
		SCH_Update();
 80021ea:	f7fd ffaf 	bl	800014c <SCH_Update>
	}
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021fa:	b672      	cpsid	i
}
 80021fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021fe:	e7fe      	b.n	80021fe <Error_Handler+0x8>

08002200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <HAL_MspInit+0x5c>)
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	4a14      	ldr	r2, [pc, #80]	; (800225c <HAL_MspInit+0x5c>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6193      	str	r3, [r2, #24]
 8002212:	4b12      	ldr	r3, [pc, #72]	; (800225c <HAL_MspInit+0x5c>)
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800221e:	4b0f      	ldr	r3, [pc, #60]	; (800225c <HAL_MspInit+0x5c>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	4a0e      	ldr	r2, [pc, #56]	; (800225c <HAL_MspInit+0x5c>)
 8002224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002228:	61d3      	str	r3, [r2, #28]
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <HAL_MspInit+0x5c>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	607b      	str	r3, [r7, #4]
 8002234:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002236:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <HAL_MspInit+0x60>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	4a04      	ldr	r2, [pc, #16]	; (8002260 <HAL_MspInit+0x60>)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	40021000 	.word	0x40021000
 8002260:	40010000 	.word	0x40010000

08002264 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002274:	d113      	bne.n	800229e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002276:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <HAL_TIM_Base_MspInit+0x44>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	4a0b      	ldr	r2, [pc, #44]	; (80022a8 <HAL_TIM_Base_MspInit+0x44>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	61d3      	str	r3, [r2, #28]
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_TIM_Base_MspInit+0x44>)
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	2100      	movs	r1, #0
 8002292:	201c      	movs	r0, #28
 8002294:	f000 f9a1 	bl	80025da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002298:	201c      	movs	r0, #28
 800229a:	f000 f9ba 	bl	8002612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000

080022ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <NMI_Handler+0x4>

080022b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b6:	e7fe      	b.n	80022b6 <HardFault_Handler+0x4>

080022b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <MemManage_Handler+0x4>

080022be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c2:	e7fe      	b.n	80022c2 <BusFault_Handler+0x4>

080022c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <UsageFault_Handler+0x4>

080022ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr

080022d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr

080022e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr

080022ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022f2:	f000 f87f 	bl	80023f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <TIM2_IRQHandler+0x10>)
 8002302:	f000 ffdb 	bl	80032bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	200003b4 	.word	0x200003b4

08002310 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800231c:	f7ff fff8 	bl	8002310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002320:	480b      	ldr	r0, [pc, #44]	; (8002350 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002322:	490c      	ldr	r1, [pc, #48]	; (8002354 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002324:	4a0c      	ldr	r2, [pc, #48]	; (8002358 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002328:	e002      	b.n	8002330 <LoopCopyDataInit>

0800232a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800232a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800232c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800232e:	3304      	adds	r3, #4

08002330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002334:	d3f9      	bcc.n	800232a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002336:	4a09      	ldr	r2, [pc, #36]	; (800235c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002338:	4c09      	ldr	r4, [pc, #36]	; (8002360 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800233a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800233c:	e001      	b.n	8002342 <LoopFillZerobss>

0800233e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800233e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002340:	3204      	adds	r2, #4

08002342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002344:	d3fb      	bcc.n	800233e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002346:	f001 faf9 	bl	800393c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800234a:	f7ff fd7f 	bl	8001e4c <main>
  bx lr
 800234e:	4770      	bx	lr
  ldr r0, =_sdata
 8002350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002354:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002358:	080039d8 	.word	0x080039d8
  ldr r2, =_sbss
 800235c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002360:	20000400 	.word	0x20000400

08002364 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002364:	e7fe      	b.n	8002364 <ADC1_2_IRQHandler>
	...

08002368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <HAL_Init+0x28>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a07      	ldr	r2, [pc, #28]	; (8002390 <HAL_Init+0x28>)
 8002372:	f043 0310 	orr.w	r3, r3, #16
 8002376:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002378:	2003      	movs	r0, #3
 800237a:	f000 f923 	bl	80025c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800237e:	200f      	movs	r0, #15
 8002380:	f000 f808 	bl	8002394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002384:	f7ff ff3c 	bl	8002200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40022000 	.word	0x40022000

08002394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800239c:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_InitTick+0x54>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_InitTick+0x58>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	4619      	mov	r1, r3
 80023a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 f93b 	bl	800262e <HAL_SYSTICK_Config>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e00e      	b.n	80023e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b0f      	cmp	r3, #15
 80023c6:	d80a      	bhi.n	80023de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023c8:	2200      	movs	r2, #0
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	f04f 30ff 	mov.w	r0, #4294967295
 80023d0:	f000 f903 	bl	80025da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023d4:	4a06      	ldr	r2, [pc, #24]	; (80023f0 <HAL_InitTick+0x5c>)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	e000      	b.n	80023e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000000 	.word	0x20000000
 80023ec:	20000008 	.word	0x20000008
 80023f0:	20000004 	.word	0x20000004

080023f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_IncTick+0x1c>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_IncTick+0x20>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4413      	add	r3, r2
 8002404:	4a03      	ldr	r2, [pc, #12]	; (8002414 <HAL_IncTick+0x20>)
 8002406:	6013      	str	r3, [r2, #0]
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	20000008 	.word	0x20000008
 8002414:	200003fc 	.word	0x200003fc

08002418 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return uwTick;
 800241c:	4b02      	ldr	r3, [pc, #8]	; (8002428 <HAL_GetTick+0x10>)
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	200003fc 	.word	0x200003fc

0800242c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002448:	4013      	ands	r3, r2
 800244a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800245c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245e:	4a04      	ldr	r2, [pc, #16]	; (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	60d3      	str	r3, [r2, #12]
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <__NVIC_GetPriorityGrouping+0x18>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	f003 0307 	and.w	r3, r3, #7
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	db0b      	blt.n	80024ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	4906      	ldr	r1, [pc, #24]	; (80024c4 <__NVIC_EnableIRQ+0x34>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2001      	movs	r0, #1
 80024b2:	fa00 f202 	lsl.w	r2, r0, r2
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	e000e100 	.word	0xe000e100

080024c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	6039      	str	r1, [r7, #0]
 80024d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	db0a      	blt.n	80024f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	490c      	ldr	r1, [pc, #48]	; (8002514 <__NVIC_SetPriority+0x4c>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	0112      	lsls	r2, r2, #4
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	440b      	add	r3, r1
 80024ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f0:	e00a      	b.n	8002508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4908      	ldr	r1, [pc, #32]	; (8002518 <__NVIC_SetPriority+0x50>)
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	3b04      	subs	r3, #4
 8002500:	0112      	lsls	r2, r2, #4
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	440b      	add	r3, r1
 8002506:	761a      	strb	r2, [r3, #24]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000e100 	.word	0xe000e100
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f1c3 0307 	rsb	r3, r3, #7
 8002536:	2b04      	cmp	r3, #4
 8002538:	bf28      	it	cs
 800253a:	2304      	movcs	r3, #4
 800253c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3304      	adds	r3, #4
 8002542:	2b06      	cmp	r3, #6
 8002544:	d902      	bls.n	800254c <NVIC_EncodePriority+0x30>
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3b03      	subs	r3, #3
 800254a:	e000      	b.n	800254e <NVIC_EncodePriority+0x32>
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	f04f 32ff 	mov.w	r2, #4294967295
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43da      	mvns	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	401a      	ands	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002564:	f04f 31ff 	mov.w	r1, #4294967295
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	43d9      	mvns	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002574:	4313      	orrs	r3, r2
         );
}
 8002576:	4618      	mov	r0, r3
 8002578:	3724      	adds	r7, #36	; 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3b01      	subs	r3, #1
 800258c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002590:	d301      	bcc.n	8002596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002592:	2301      	movs	r3, #1
 8002594:	e00f      	b.n	80025b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002596:	4a0a      	ldr	r2, [pc, #40]	; (80025c0 <SysTick_Config+0x40>)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3b01      	subs	r3, #1
 800259c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800259e:	210f      	movs	r1, #15
 80025a0:	f04f 30ff 	mov.w	r0, #4294967295
 80025a4:	f7ff ff90 	bl	80024c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <SysTick_Config+0x40>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ae:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <SysTick_Config+0x40>)
 80025b0:	2207      	movs	r2, #7
 80025b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	e000e010 	.word	0xe000e010

080025c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff ff2d 	bl	800242c <__NVIC_SetPriorityGrouping>
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025da:	b580      	push	{r7, lr}
 80025dc:	b086      	sub	sp, #24
 80025de:	af00      	add	r7, sp, #0
 80025e0:	4603      	mov	r3, r0
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025ec:	f7ff ff42 	bl	8002474 <__NVIC_GetPriorityGrouping>
 80025f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	6978      	ldr	r0, [r7, #20]
 80025f8:	f7ff ff90 	bl	800251c <NVIC_EncodePriority>
 80025fc:	4602      	mov	r2, r0
 80025fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002602:	4611      	mov	r1, r2
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ff5f 	bl	80024c8 <__NVIC_SetPriority>
}
 800260a:	bf00      	nop
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	4603      	mov	r3, r0
 800261a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800261c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff ff35 	bl	8002490 <__NVIC_EnableIRQ>
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff ffa2 	bl	8002580 <SysTick_Config>
 800263c:	4603      	mov	r3, r0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002648:	b480      	push	{r7}
 800264a:	b08b      	sub	sp, #44	; 0x2c
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002652:	2300      	movs	r3, #0
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002656:	2300      	movs	r3, #0
 8002658:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800265a:	e148      	b.n	80028ee <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800265c:	2201      	movs	r2, #1
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	69fa      	ldr	r2, [r7, #28]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	429a      	cmp	r2, r3
 8002676:	f040 8137 	bne.w	80028e8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	4aa3      	ldr	r2, [pc, #652]	; (800290c <HAL_GPIO_Init+0x2c4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d05e      	beq.n	8002742 <HAL_GPIO_Init+0xfa>
 8002684:	4aa1      	ldr	r2, [pc, #644]	; (800290c <HAL_GPIO_Init+0x2c4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d875      	bhi.n	8002776 <HAL_GPIO_Init+0x12e>
 800268a:	4aa1      	ldr	r2, [pc, #644]	; (8002910 <HAL_GPIO_Init+0x2c8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d058      	beq.n	8002742 <HAL_GPIO_Init+0xfa>
 8002690:	4a9f      	ldr	r2, [pc, #636]	; (8002910 <HAL_GPIO_Init+0x2c8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d86f      	bhi.n	8002776 <HAL_GPIO_Init+0x12e>
 8002696:	4a9f      	ldr	r2, [pc, #636]	; (8002914 <HAL_GPIO_Init+0x2cc>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d052      	beq.n	8002742 <HAL_GPIO_Init+0xfa>
 800269c:	4a9d      	ldr	r2, [pc, #628]	; (8002914 <HAL_GPIO_Init+0x2cc>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d869      	bhi.n	8002776 <HAL_GPIO_Init+0x12e>
 80026a2:	4a9d      	ldr	r2, [pc, #628]	; (8002918 <HAL_GPIO_Init+0x2d0>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d04c      	beq.n	8002742 <HAL_GPIO_Init+0xfa>
 80026a8:	4a9b      	ldr	r2, [pc, #620]	; (8002918 <HAL_GPIO_Init+0x2d0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d863      	bhi.n	8002776 <HAL_GPIO_Init+0x12e>
 80026ae:	4a9b      	ldr	r2, [pc, #620]	; (800291c <HAL_GPIO_Init+0x2d4>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d046      	beq.n	8002742 <HAL_GPIO_Init+0xfa>
 80026b4:	4a99      	ldr	r2, [pc, #612]	; (800291c <HAL_GPIO_Init+0x2d4>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d85d      	bhi.n	8002776 <HAL_GPIO_Init+0x12e>
 80026ba:	2b12      	cmp	r3, #18
 80026bc:	d82a      	bhi.n	8002714 <HAL_GPIO_Init+0xcc>
 80026be:	2b12      	cmp	r3, #18
 80026c0:	d859      	bhi.n	8002776 <HAL_GPIO_Init+0x12e>
 80026c2:	a201      	add	r2, pc, #4	; (adr r2, 80026c8 <HAL_GPIO_Init+0x80>)
 80026c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c8:	08002743 	.word	0x08002743
 80026cc:	0800271d 	.word	0x0800271d
 80026d0:	0800272f 	.word	0x0800272f
 80026d4:	08002771 	.word	0x08002771
 80026d8:	08002777 	.word	0x08002777
 80026dc:	08002777 	.word	0x08002777
 80026e0:	08002777 	.word	0x08002777
 80026e4:	08002777 	.word	0x08002777
 80026e8:	08002777 	.word	0x08002777
 80026ec:	08002777 	.word	0x08002777
 80026f0:	08002777 	.word	0x08002777
 80026f4:	08002777 	.word	0x08002777
 80026f8:	08002777 	.word	0x08002777
 80026fc:	08002777 	.word	0x08002777
 8002700:	08002777 	.word	0x08002777
 8002704:	08002777 	.word	0x08002777
 8002708:	08002777 	.word	0x08002777
 800270c:	08002725 	.word	0x08002725
 8002710:	08002739 	.word	0x08002739
 8002714:	4a82      	ldr	r2, [pc, #520]	; (8002920 <HAL_GPIO_Init+0x2d8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d013      	beq.n	8002742 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800271a:	e02c      	b.n	8002776 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	623b      	str	r3, [r7, #32]
          break;
 8002722:	e029      	b.n	8002778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	3304      	adds	r3, #4
 800272a:	623b      	str	r3, [r7, #32]
          break;
 800272c:	e024      	b.n	8002778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	3308      	adds	r3, #8
 8002734:	623b      	str	r3, [r7, #32]
          break;
 8002736:	e01f      	b.n	8002778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	330c      	adds	r3, #12
 800273e:	623b      	str	r3, [r7, #32]
          break;
 8002740:	e01a      	b.n	8002778 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d102      	bne.n	8002750 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800274a:	2304      	movs	r3, #4
 800274c:	623b      	str	r3, [r7, #32]
          break;
 800274e:	e013      	b.n	8002778 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d105      	bne.n	8002764 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002758:	2308      	movs	r3, #8
 800275a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69fa      	ldr	r2, [r7, #28]
 8002760:	611a      	str	r2, [r3, #16]
          break;
 8002762:	e009      	b.n	8002778 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002764:	2308      	movs	r3, #8
 8002766:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	615a      	str	r2, [r3, #20]
          break;
 800276e:	e003      	b.n	8002778 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002770:	2300      	movs	r3, #0
 8002772:	623b      	str	r3, [r7, #32]
          break;
 8002774:	e000      	b.n	8002778 <HAL_GPIO_Init+0x130>
          break;
 8002776:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	2bff      	cmp	r3, #255	; 0xff
 800277c:	d801      	bhi.n	8002782 <HAL_GPIO_Init+0x13a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	e001      	b.n	8002786 <HAL_GPIO_Init+0x13e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3304      	adds	r3, #4
 8002786:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	2bff      	cmp	r3, #255	; 0xff
 800278c:	d802      	bhi.n	8002794 <HAL_GPIO_Init+0x14c>
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	e002      	b.n	800279a <HAL_GPIO_Init+0x152>
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	3b08      	subs	r3, #8
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	210f      	movs	r1, #15
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	fa01 f303 	lsl.w	r3, r1, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	401a      	ands	r2, r3
 80027ac:	6a39      	ldr	r1, [r7, #32]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	fa01 f303 	lsl.w	r3, r1, r3
 80027b4:	431a      	orrs	r2, r3
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 8090 	beq.w	80028e8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027c8:	4b56      	ldr	r3, [pc, #344]	; (8002924 <HAL_GPIO_Init+0x2dc>)
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	4a55      	ldr	r2, [pc, #340]	; (8002924 <HAL_GPIO_Init+0x2dc>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6193      	str	r3, [r2, #24]
 80027d4:	4b53      	ldr	r3, [pc, #332]	; (8002924 <HAL_GPIO_Init+0x2dc>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027e0:	4a51      	ldr	r2, [pc, #324]	; (8002928 <HAL_GPIO_Init+0x2e0>)
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	089b      	lsrs	r3, r3, #2
 80027e6:	3302      	adds	r3, #2
 80027e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	220f      	movs	r2, #15
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4013      	ands	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a49      	ldr	r2, [pc, #292]	; (800292c <HAL_GPIO_Init+0x2e4>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d00d      	beq.n	8002828 <HAL_GPIO_Init+0x1e0>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a48      	ldr	r2, [pc, #288]	; (8002930 <HAL_GPIO_Init+0x2e8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d007      	beq.n	8002824 <HAL_GPIO_Init+0x1dc>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a47      	ldr	r2, [pc, #284]	; (8002934 <HAL_GPIO_Init+0x2ec>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d101      	bne.n	8002820 <HAL_GPIO_Init+0x1d8>
 800281c:	2302      	movs	r3, #2
 800281e:	e004      	b.n	800282a <HAL_GPIO_Init+0x1e2>
 8002820:	2303      	movs	r3, #3
 8002822:	e002      	b.n	800282a <HAL_GPIO_Init+0x1e2>
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <HAL_GPIO_Init+0x1e2>
 8002828:	2300      	movs	r3, #0
 800282a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282c:	f002 0203 	and.w	r2, r2, #3
 8002830:	0092      	lsls	r2, r2, #2
 8002832:	4093      	lsls	r3, r2
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800283a:	493b      	ldr	r1, [pc, #236]	; (8002928 <HAL_GPIO_Init+0x2e0>)
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	089b      	lsrs	r3, r3, #2
 8002840:	3302      	adds	r3, #2
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d006      	beq.n	8002862 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002854:	4b38      	ldr	r3, [pc, #224]	; (8002938 <HAL_GPIO_Init+0x2f0>)
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	4937      	ldr	r1, [pc, #220]	; (8002938 <HAL_GPIO_Init+0x2f0>)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	608b      	str	r3, [r1, #8]
 8002860:	e006      	b.n	8002870 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002862:	4b35      	ldr	r3, [pc, #212]	; (8002938 <HAL_GPIO_Init+0x2f0>)
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	43db      	mvns	r3, r3
 800286a:	4933      	ldr	r1, [pc, #204]	; (8002938 <HAL_GPIO_Init+0x2f0>)
 800286c:	4013      	ands	r3, r2
 800286e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d006      	beq.n	800288a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800287c:	4b2e      	ldr	r3, [pc, #184]	; (8002938 <HAL_GPIO_Init+0x2f0>)
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	492d      	ldr	r1, [pc, #180]	; (8002938 <HAL_GPIO_Init+0x2f0>)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	4313      	orrs	r3, r2
 8002886:	60cb      	str	r3, [r1, #12]
 8002888:	e006      	b.n	8002898 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800288a:	4b2b      	ldr	r3, [pc, #172]	; (8002938 <HAL_GPIO_Init+0x2f0>)
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	43db      	mvns	r3, r3
 8002892:	4929      	ldr	r1, [pc, #164]	; (8002938 <HAL_GPIO_Init+0x2f0>)
 8002894:	4013      	ands	r3, r2
 8002896:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d006      	beq.n	80028b2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028a4:	4b24      	ldr	r3, [pc, #144]	; (8002938 <HAL_GPIO_Init+0x2f0>)
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	4923      	ldr	r1, [pc, #140]	; (8002938 <HAL_GPIO_Init+0x2f0>)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]
 80028b0:	e006      	b.n	80028c0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028b2:	4b21      	ldr	r3, [pc, #132]	; (8002938 <HAL_GPIO_Init+0x2f0>)
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	491f      	ldr	r1, [pc, #124]	; (8002938 <HAL_GPIO_Init+0x2f0>)
 80028bc:	4013      	ands	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d006      	beq.n	80028da <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028cc:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <HAL_GPIO_Init+0x2f0>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4919      	ldr	r1, [pc, #100]	; (8002938 <HAL_GPIO_Init+0x2f0>)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	600b      	str	r3, [r1, #0]
 80028d8:	e006      	b.n	80028e8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028da:	4b17      	ldr	r3, [pc, #92]	; (8002938 <HAL_GPIO_Init+0x2f0>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	4915      	ldr	r1, [pc, #84]	; (8002938 <HAL_GPIO_Init+0x2f0>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	3301      	adds	r3, #1
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	fa22 f303 	lsr.w	r3, r2, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f47f aeaf 	bne.w	800265c <HAL_GPIO_Init+0x14>
  }
}
 80028fe:	bf00      	nop
 8002900:	bf00      	nop
 8002902:	372c      	adds	r7, #44	; 0x2c
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	10320000 	.word	0x10320000
 8002910:	10310000 	.word	0x10310000
 8002914:	10220000 	.word	0x10220000
 8002918:	10210000 	.word	0x10210000
 800291c:	10120000 	.word	0x10120000
 8002920:	10110000 	.word	0x10110000
 8002924:	40021000 	.word	0x40021000
 8002928:	40010000 	.word	0x40010000
 800292c:	40010800 	.word	0x40010800
 8002930:	40010c00 	.word	0x40010c00
 8002934:	40011000 	.word	0x40011000
 8002938:	40010400 	.word	0x40010400

0800293c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	887b      	ldrh	r3, [r7, #2]
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
 8002958:	e001      	b.n	800295e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800295a:	2300      	movs	r3, #0
 800295c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800295e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr

0800296a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	460b      	mov	r3, r1
 8002974:	807b      	strh	r3, [r7, #2]
 8002976:	4613      	mov	r3, r2
 8002978:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800297a:	787b      	ldrb	r3, [r7, #1]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002980:	887a      	ldrh	r2, [r7, #2]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002986:	e003      	b.n	8002990 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002988:	887b      	ldrh	r3, [r7, #2]
 800298a:	041a      	lsls	r2, r3, #16
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	611a      	str	r2, [r3, #16]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800299a:	b480      	push	{r7}
 800299c:	b085      	sub	sp, #20
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	460b      	mov	r3, r1
 80029a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029ac:	887a      	ldrh	r2, [r7, #2]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4013      	ands	r3, r2
 80029b2:	041a      	lsls	r2, r3, #16
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	43d9      	mvns	r1, r3
 80029b8:	887b      	ldrh	r3, [r7, #2]
 80029ba:	400b      	ands	r3, r1
 80029bc:	431a      	orrs	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	611a      	str	r2, [r3, #16]
}
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e26c      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 8087 	beq.w	8002afa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029ec:	4b92      	ldr	r3, [pc, #584]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 030c 	and.w	r3, r3, #12
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d00c      	beq.n	8002a12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029f8:	4b8f      	ldr	r3, [pc, #572]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d112      	bne.n	8002a2a <HAL_RCC_OscConfig+0x5e>
 8002a04:	4b8c      	ldr	r3, [pc, #560]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a10:	d10b      	bne.n	8002a2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a12:	4b89      	ldr	r3, [pc, #548]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d06c      	beq.n	8002af8 <HAL_RCC_OscConfig+0x12c>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d168      	bne.n	8002af8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e246      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a32:	d106      	bne.n	8002a42 <HAL_RCC_OscConfig+0x76>
 8002a34:	4b80      	ldr	r3, [pc, #512]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a7f      	ldr	r2, [pc, #508]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3e:	6013      	str	r3, [r2, #0]
 8002a40:	e02e      	b.n	8002aa0 <HAL_RCC_OscConfig+0xd4>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x98>
 8002a4a:	4b7b      	ldr	r3, [pc, #492]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a7a      	ldr	r2, [pc, #488]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	4b78      	ldr	r3, [pc, #480]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a77      	ldr	r2, [pc, #476]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	e01d      	b.n	8002aa0 <HAL_RCC_OscConfig+0xd4>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a6c:	d10c      	bne.n	8002a88 <HAL_RCC_OscConfig+0xbc>
 8002a6e:	4b72      	ldr	r3, [pc, #456]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a71      	ldr	r2, [pc, #452]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	4b6f      	ldr	r3, [pc, #444]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a6e      	ldr	r2, [pc, #440]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e00b      	b.n	8002aa0 <HAL_RCC_OscConfig+0xd4>
 8002a88:	4b6b      	ldr	r3, [pc, #428]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a6a      	ldr	r2, [pc, #424]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	4b68      	ldr	r3, [pc, #416]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a67      	ldr	r2, [pc, #412]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d013      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7ff fcb6 	bl	8002418 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab0:	f7ff fcb2 	bl	8002418 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	; 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e1fa      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	4b5d      	ldr	r3, [pc, #372]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0xe4>
 8002ace:	e014      	b.n	8002afa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad0:	f7ff fca2 	bl	8002418 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad8:	f7ff fc9e 	bl	8002418 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b64      	cmp	r3, #100	; 0x64
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e1e6      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aea:	4b53      	ldr	r3, [pc, #332]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f0      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x10c>
 8002af6:	e000      	b.n	8002afa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d063      	beq.n	8002bce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b06:	4b4c      	ldr	r3, [pc, #304]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b12:	4b49      	ldr	r3, [pc, #292]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d11c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x18c>
 8002b1e:	4b46      	ldr	r3, [pc, #280]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d116      	bne.n	8002b58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2a:	4b43      	ldr	r3, [pc, #268]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <HAL_RCC_OscConfig+0x176>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e1ba      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b42:	4b3d      	ldr	r3, [pc, #244]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4939      	ldr	r1, [pc, #228]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b56:	e03a      	b.n	8002bce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d020      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b60:	4b36      	ldr	r3, [pc, #216]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b66:	f7ff fc57 	bl	8002418 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b6e:	f7ff fc53 	bl	8002418 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e19b      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b80:	4b2d      	ldr	r3, [pc, #180]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8c:	4b2a      	ldr	r3, [pc, #168]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4927      	ldr	r1, [pc, #156]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	600b      	str	r3, [r1, #0]
 8002ba0:	e015      	b.n	8002bce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba2:	4b26      	ldr	r3, [pc, #152]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7ff fc36 	bl	8002418 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb0:	f7ff fc32 	bl	8002418 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e17a      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc2:	4b1d      	ldr	r3, [pc, #116]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d03a      	beq.n	8002c50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d019      	beq.n	8002c16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002be2:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be8:	f7ff fc16 	bl	8002418 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf0:	f7ff fc12 	bl	8002418 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e15a      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c02:	4b0d      	ldr	r3, [pc, #52]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c0e:	2001      	movs	r0, #1
 8002c10:	f000 fa9a 	bl	8003148 <RCC_Delay>
 8002c14:	e01c      	b.n	8002c50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c16:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1c:	f7ff fbfc 	bl	8002418 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c22:	e00f      	b.n	8002c44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c24:	f7ff fbf8 	bl	8002418 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d908      	bls.n	8002c44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e140      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4ec>
 8002c36:	bf00      	nop
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	42420000 	.word	0x42420000
 8002c40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c44:	4b9e      	ldr	r3, [pc, #632]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1e9      	bne.n	8002c24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80a6 	beq.w	8002daa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c62:	4b97      	ldr	r3, [pc, #604]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10d      	bne.n	8002c8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6e:	4b94      	ldr	r3, [pc, #592]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	4a93      	ldr	r2, [pc, #588]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c78:	61d3      	str	r3, [r2, #28]
 8002c7a:	4b91      	ldr	r3, [pc, #580]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c86:	2301      	movs	r3, #1
 8002c88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8a:	4b8e      	ldr	r3, [pc, #568]	; (8002ec4 <HAL_RCC_OscConfig+0x4f8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d118      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c96:	4b8b      	ldr	r3, [pc, #556]	; (8002ec4 <HAL_RCC_OscConfig+0x4f8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a8a      	ldr	r2, [pc, #552]	; (8002ec4 <HAL_RCC_OscConfig+0x4f8>)
 8002c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca2:	f7ff fbb9 	bl	8002418 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002caa:	f7ff fbb5 	bl	8002418 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b64      	cmp	r3, #100	; 0x64
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e0fd      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbc:	4b81      	ldr	r3, [pc, #516]	; (8002ec4 <HAL_RCC_OscConfig+0x4f8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d106      	bne.n	8002cde <HAL_RCC_OscConfig+0x312>
 8002cd0:	4b7b      	ldr	r3, [pc, #492]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	4a7a      	ldr	r2, [pc, #488]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	6213      	str	r3, [r2, #32]
 8002cdc:	e02d      	b.n	8002d3a <HAL_RCC_OscConfig+0x36e>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x334>
 8002ce6:	4b76      	ldr	r3, [pc, #472]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	4a75      	ldr	r2, [pc, #468]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	6213      	str	r3, [r2, #32]
 8002cf2:	4b73      	ldr	r3, [pc, #460]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	4a72      	ldr	r2, [pc, #456]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002cf8:	f023 0304 	bic.w	r3, r3, #4
 8002cfc:	6213      	str	r3, [r2, #32]
 8002cfe:	e01c      	b.n	8002d3a <HAL_RCC_OscConfig+0x36e>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	2b05      	cmp	r3, #5
 8002d06:	d10c      	bne.n	8002d22 <HAL_RCC_OscConfig+0x356>
 8002d08:	4b6d      	ldr	r3, [pc, #436]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	4a6c      	ldr	r2, [pc, #432]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002d0e:	f043 0304 	orr.w	r3, r3, #4
 8002d12:	6213      	str	r3, [r2, #32]
 8002d14:	4b6a      	ldr	r3, [pc, #424]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	4a69      	ldr	r2, [pc, #420]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6213      	str	r3, [r2, #32]
 8002d20:	e00b      	b.n	8002d3a <HAL_RCC_OscConfig+0x36e>
 8002d22:	4b67      	ldr	r3, [pc, #412]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	4a66      	ldr	r2, [pc, #408]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	6213      	str	r3, [r2, #32]
 8002d2e:	4b64      	ldr	r3, [pc, #400]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	4a63      	ldr	r2, [pc, #396]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002d34:	f023 0304 	bic.w	r3, r3, #4
 8002d38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d015      	beq.n	8002d6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d42:	f7ff fb69 	bl	8002418 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d48:	e00a      	b.n	8002d60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d4a:	f7ff fb65 	bl	8002418 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e0ab      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d60:	4b57      	ldr	r3, [pc, #348]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0ee      	beq.n	8002d4a <HAL_RCC_OscConfig+0x37e>
 8002d6c:	e014      	b.n	8002d98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6e:	f7ff fb53 	bl	8002418 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d74:	e00a      	b.n	8002d8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d76:	f7ff fb4f 	bl	8002418 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e095      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d8c:	4b4c      	ldr	r3, [pc, #304]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1ee      	bne.n	8002d76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d98:	7dfb      	ldrb	r3, [r7, #23]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d105      	bne.n	8002daa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d9e:	4b48      	ldr	r3, [pc, #288]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	4a47      	ldr	r2, [pc, #284]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 8081 	beq.w	8002eb6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002db4:	4b42      	ldr	r3, [pc, #264]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 030c 	and.w	r3, r3, #12
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d061      	beq.n	8002e84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d146      	bne.n	8002e56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc8:	4b3f      	ldr	r3, [pc, #252]	; (8002ec8 <HAL_RCC_OscConfig+0x4fc>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dce:	f7ff fb23 	bl	8002418 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd6:	f7ff fb1f 	bl	8002418 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e067      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de8:	4b35      	ldr	r3, [pc, #212]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1f0      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfc:	d108      	bne.n	8002e10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dfe:	4b30      	ldr	r3, [pc, #192]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	492d      	ldr	r1, [pc, #180]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e10:	4b2b      	ldr	r3, [pc, #172]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a19      	ldr	r1, [r3, #32]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	430b      	orrs	r3, r1
 8002e22:	4927      	ldr	r1, [pc, #156]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e28:	4b27      	ldr	r3, [pc, #156]	; (8002ec8 <HAL_RCC_OscConfig+0x4fc>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2e:	f7ff faf3 	bl	8002418 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e36:	f7ff faef 	bl	8002418 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e037      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e48:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0f0      	beq.n	8002e36 <HAL_RCC_OscConfig+0x46a>
 8002e54:	e02f      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e56:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <HAL_RCC_OscConfig+0x4fc>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5c:	f7ff fadc 	bl	8002418 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e64:	f7ff fad8 	bl	8002418 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e020      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e76:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x498>
 8002e82:	e018      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e013      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_RCC_OscConfig+0x4f4>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d001      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40007000 	.word	0x40007000
 8002ec8:	42420060 	.word	0x42420060

08002ecc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0d0      	b.n	8003082 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee0:	4b6a      	ldr	r3, [pc, #424]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d910      	bls.n	8002f10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eee:	4b67      	ldr	r3, [pc, #412]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 0207 	bic.w	r2, r3, #7
 8002ef6:	4965      	ldr	r1, [pc, #404]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efe:	4b63      	ldr	r3, [pc, #396]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0b8      	b.n	8003082 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d020      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f28:	4b59      	ldr	r3, [pc, #356]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4a58      	ldr	r2, [pc, #352]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f40:	4b53      	ldr	r3, [pc, #332]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	4a52      	ldr	r2, [pc, #328]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f4c:	4b50      	ldr	r3, [pc, #320]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	494d      	ldr	r1, [pc, #308]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d040      	beq.n	8002fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f72:	4b47      	ldr	r3, [pc, #284]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d115      	bne.n	8002faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e07f      	b.n	8003082 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d107      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8a:	4b41      	ldr	r3, [pc, #260]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d109      	bne.n	8002faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e073      	b.n	8003082 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9a:	4b3d      	ldr	r3, [pc, #244]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e06b      	b.n	8003082 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002faa:	4b39      	ldr	r3, [pc, #228]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f023 0203 	bic.w	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	4936      	ldr	r1, [pc, #216]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fbc:	f7ff fa2c 	bl	8002418 <HAL_GetTick>
 8002fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc2:	e00a      	b.n	8002fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc4:	f7ff fa28 	bl	8002418 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e053      	b.n	8003082 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fda:	4b2d      	ldr	r3, [pc, #180]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 020c 	and.w	r2, r3, #12
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d1eb      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fec:	4b27      	ldr	r3, [pc, #156]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d210      	bcs.n	800301c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffa:	4b24      	ldr	r3, [pc, #144]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 0207 	bic.w	r2, r3, #7
 8003002:	4922      	ldr	r1, [pc, #136]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	4313      	orrs	r3, r2
 8003008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800300a:	4b20      	ldr	r3, [pc, #128]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d001      	beq.n	800301c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e032      	b.n	8003082 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003028:	4b19      	ldr	r3, [pc, #100]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4916      	ldr	r1, [pc, #88]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8003036:	4313      	orrs	r3, r2
 8003038:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d009      	beq.n	800305a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003046:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	490e      	ldr	r1, [pc, #56]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8003056:	4313      	orrs	r3, r2
 8003058:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800305a:	f000 f821 	bl	80030a0 <HAL_RCC_GetSysClockFreq>
 800305e:	4602      	mov	r2, r0
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	490a      	ldr	r1, [pc, #40]	; (8003094 <HAL_RCC_ClockConfig+0x1c8>)
 800306c:	5ccb      	ldrb	r3, [r1, r3]
 800306e:	fa22 f303 	lsr.w	r3, r2, r3
 8003072:	4a09      	ldr	r2, [pc, #36]	; (8003098 <HAL_RCC_ClockConfig+0x1cc>)
 8003074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003076:	4b09      	ldr	r3, [pc, #36]	; (800309c <HAL_RCC_ClockConfig+0x1d0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff f98a 	bl	8002394 <HAL_InitTick>

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40022000 	.word	0x40022000
 8003090:	40021000 	.word	0x40021000
 8003094:	080039ac 	.word	0x080039ac
 8003098:	20000000 	.word	0x20000000
 800309c:	20000004 	.word	0x20000004

080030a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	2300      	movs	r3, #0
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	2300      	movs	r3, #0
 80030b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030ba:	4b1e      	ldr	r3, [pc, #120]	; (8003134 <HAL_RCC_GetSysClockFreq+0x94>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 030c 	and.w	r3, r3, #12
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d002      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0x30>
 80030ca:	2b08      	cmp	r3, #8
 80030cc:	d003      	beq.n	80030d6 <HAL_RCC_GetSysClockFreq+0x36>
 80030ce:	e027      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030d0:	4b19      	ldr	r3, [pc, #100]	; (8003138 <HAL_RCC_GetSysClockFreq+0x98>)
 80030d2:	613b      	str	r3, [r7, #16]
      break;
 80030d4:	e027      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	0c9b      	lsrs	r3, r3, #18
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	4a17      	ldr	r2, [pc, #92]	; (800313c <HAL_RCC_GetSysClockFreq+0x9c>)
 80030e0:	5cd3      	ldrb	r3, [r2, r3]
 80030e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d010      	beq.n	8003110 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030ee:	4b11      	ldr	r3, [pc, #68]	; (8003134 <HAL_RCC_GetSysClockFreq+0x94>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	0c5b      	lsrs	r3, r3, #17
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	4a11      	ldr	r2, [pc, #68]	; (8003140 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030fa:	5cd3      	ldrb	r3, [r2, r3]
 80030fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a0d      	ldr	r2, [pc, #52]	; (8003138 <HAL_RCC_GetSysClockFreq+0x98>)
 8003102:	fb02 f203 	mul.w	r2, r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	fbb2 f3f3 	udiv	r3, r2, r3
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	e004      	b.n	800311a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a0c      	ldr	r2, [pc, #48]	; (8003144 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003114:	fb02 f303 	mul.w	r3, r2, r3
 8003118:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	613b      	str	r3, [r7, #16]
      break;
 800311e:	e002      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <HAL_RCC_GetSysClockFreq+0x98>)
 8003122:	613b      	str	r3, [r7, #16]
      break;
 8003124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003126:	693b      	ldr	r3, [r7, #16]
}
 8003128:	4618      	mov	r0, r3
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40021000 	.word	0x40021000
 8003138:	007a1200 	.word	0x007a1200
 800313c:	080039bc 	.word	0x080039bc
 8003140:	080039cc 	.word	0x080039cc
 8003144:	003d0900 	.word	0x003d0900

08003148 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003150:	4b0a      	ldr	r3, [pc, #40]	; (800317c <RCC_Delay+0x34>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a0a      	ldr	r2, [pc, #40]	; (8003180 <RCC_Delay+0x38>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	0a5b      	lsrs	r3, r3, #9
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	fb02 f303 	mul.w	r3, r2, r3
 8003162:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003164:	bf00      	nop
  }
  while (Delay --);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	1e5a      	subs	r2, r3, #1
 800316a:	60fa      	str	r2, [r7, #12]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f9      	bne.n	8003164 <RCC_Delay+0x1c>
}
 8003170:	bf00      	nop
 8003172:	bf00      	nop
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr
 800317c:	20000000 	.word	0x20000000
 8003180:	10624dd3 	.word	0x10624dd3

08003184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e041      	b.n	800321a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff f85a 	bl	8002264 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3304      	adds	r3, #4
 80031c0:	4619      	mov	r1, r3
 80031c2:	4610      	mov	r0, r2
 80031c4:	f000 fa56 	bl	8003674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b01      	cmp	r3, #1
 8003236:	d001      	beq.n	800323c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e035      	b.n	80032a8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0201 	orr.w	r2, r2, #1
 8003252:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a16      	ldr	r2, [pc, #88]	; (80032b4 <HAL_TIM_Base_Start_IT+0x90>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d009      	beq.n	8003272 <HAL_TIM_Base_Start_IT+0x4e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003266:	d004      	beq.n	8003272 <HAL_TIM_Base_Start_IT+0x4e>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a12      	ldr	r2, [pc, #72]	; (80032b8 <HAL_TIM_Base_Start_IT+0x94>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d111      	bne.n	8003296 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b06      	cmp	r3, #6
 8003282:	d010      	beq.n	80032a6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003294:	e007      	b.n	80032a6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0201 	orr.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40012c00 	.word	0x40012c00
 80032b8:	40000400 	.word	0x40000400

080032bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d020      	beq.n	8003320 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01b      	beq.n	8003320 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f06f 0202 	mvn.w	r2, #2
 80032f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f998 	bl	800363c <HAL_TIM_IC_CaptureCallback>
 800330c:	e005      	b.n	800331a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f98b 	bl	800362a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f99a 	bl	800364e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b00      	cmp	r3, #0
 8003328:	d020      	beq.n	800336c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d01b      	beq.n	800336c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f06f 0204 	mvn.w	r2, #4
 800333c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2202      	movs	r2, #2
 8003342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f972 	bl	800363c <HAL_TIM_IC_CaptureCallback>
 8003358:	e005      	b.n	8003366 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f965 	bl	800362a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f974 	bl	800364e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d020      	beq.n	80033b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01b      	beq.n	80033b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0208 	mvn.w	r2, #8
 8003388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2204      	movs	r2, #4
 800338e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f94c 	bl	800363c <HAL_TIM_IC_CaptureCallback>
 80033a4:	e005      	b.n	80033b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f93f 	bl	800362a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f94e 	bl	800364e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d020      	beq.n	8003404 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f003 0310 	and.w	r3, r3, #16
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01b      	beq.n	8003404 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f06f 0210 	mvn.w	r2, #16
 80033d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2208      	movs	r2, #8
 80033da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f926 	bl	800363c <HAL_TIM_IC_CaptureCallback>
 80033f0:	e005      	b.n	80033fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f919 	bl	800362a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f928 	bl	800364e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00c      	beq.n	8003428 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b00      	cmp	r3, #0
 8003416:	d007      	beq.n	8003428 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f06f 0201 	mvn.w	r2, #1
 8003420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fe fed6 	bl	80021d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00c      	beq.n	800344c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003438:	2b00      	cmp	r3, #0
 800343a:	d007      	beq.n	800344c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fa6f 	bl	800392a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00c      	beq.n	8003470 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345c:	2b00      	cmp	r3, #0
 800345e:	d007      	beq.n	8003470 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f8f8 	bl	8003660 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f003 0320 	and.w	r3, r3, #32
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00c      	beq.n	8003494 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0220 	mvn.w	r2, #32
 800348c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fa42 	bl	8003918 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003494:	bf00      	nop
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <HAL_TIM_ConfigClockSource+0x1c>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e0b4      	b.n	8003622 <HAL_TIM_ConfigClockSource+0x186>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034f0:	d03e      	beq.n	8003570 <HAL_TIM_ConfigClockSource+0xd4>
 80034f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034f6:	f200 8087 	bhi.w	8003608 <HAL_TIM_ConfigClockSource+0x16c>
 80034fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034fe:	f000 8086 	beq.w	800360e <HAL_TIM_ConfigClockSource+0x172>
 8003502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003506:	d87f      	bhi.n	8003608 <HAL_TIM_ConfigClockSource+0x16c>
 8003508:	2b70      	cmp	r3, #112	; 0x70
 800350a:	d01a      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0xa6>
 800350c:	2b70      	cmp	r3, #112	; 0x70
 800350e:	d87b      	bhi.n	8003608 <HAL_TIM_ConfigClockSource+0x16c>
 8003510:	2b60      	cmp	r3, #96	; 0x60
 8003512:	d050      	beq.n	80035b6 <HAL_TIM_ConfigClockSource+0x11a>
 8003514:	2b60      	cmp	r3, #96	; 0x60
 8003516:	d877      	bhi.n	8003608 <HAL_TIM_ConfigClockSource+0x16c>
 8003518:	2b50      	cmp	r3, #80	; 0x50
 800351a:	d03c      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0xfa>
 800351c:	2b50      	cmp	r3, #80	; 0x50
 800351e:	d873      	bhi.n	8003608 <HAL_TIM_ConfigClockSource+0x16c>
 8003520:	2b40      	cmp	r3, #64	; 0x40
 8003522:	d058      	beq.n	80035d6 <HAL_TIM_ConfigClockSource+0x13a>
 8003524:	2b40      	cmp	r3, #64	; 0x40
 8003526:	d86f      	bhi.n	8003608 <HAL_TIM_ConfigClockSource+0x16c>
 8003528:	2b30      	cmp	r3, #48	; 0x30
 800352a:	d064      	beq.n	80035f6 <HAL_TIM_ConfigClockSource+0x15a>
 800352c:	2b30      	cmp	r3, #48	; 0x30
 800352e:	d86b      	bhi.n	8003608 <HAL_TIM_ConfigClockSource+0x16c>
 8003530:	2b20      	cmp	r3, #32
 8003532:	d060      	beq.n	80035f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003534:	2b20      	cmp	r3, #32
 8003536:	d867      	bhi.n	8003608 <HAL_TIM_ConfigClockSource+0x16c>
 8003538:	2b00      	cmp	r3, #0
 800353a:	d05c      	beq.n	80035f6 <HAL_TIM_ConfigClockSource+0x15a>
 800353c:	2b10      	cmp	r3, #16
 800353e:	d05a      	beq.n	80035f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003540:	e062      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	6899      	ldr	r1, [r3, #8]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f000 f96a 	bl	800382a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003564:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	609a      	str	r2, [r3, #8]
      break;
 800356e:	e04f      	b.n	8003610 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	6899      	ldr	r1, [r3, #8]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f000 f953 	bl	800382a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003592:	609a      	str	r2, [r3, #8]
      break;
 8003594:	e03c      	b.n	8003610 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6818      	ldr	r0, [r3, #0]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	6859      	ldr	r1, [r3, #4]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	461a      	mov	r2, r3
 80035a4:	f000 f8ca 	bl	800373c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2150      	movs	r1, #80	; 0x50
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 f921 	bl	80037f6 <TIM_ITRx_SetConfig>
      break;
 80035b4:	e02c      	b.n	8003610 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	6859      	ldr	r1, [r3, #4]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	461a      	mov	r2, r3
 80035c4:	f000 f8e8 	bl	8003798 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2160      	movs	r1, #96	; 0x60
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 f911 	bl	80037f6 <TIM_ITRx_SetConfig>
      break;
 80035d4:	e01c      	b.n	8003610 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	6859      	ldr	r1, [r3, #4]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	461a      	mov	r2, r3
 80035e4:	f000 f8aa 	bl	800373c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2140      	movs	r1, #64	; 0x40
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 f901 	bl	80037f6 <TIM_ITRx_SetConfig>
      break;
 80035f4:	e00c      	b.n	8003610 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4619      	mov	r1, r3
 8003600:	4610      	mov	r0, r2
 8003602:	f000 f8f8 	bl	80037f6 <TIM_ITRx_SetConfig>
      break;
 8003606:	e003      	b.n	8003610 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	73fb      	strb	r3, [r7, #15]
      break;
 800360c:	e000      	b.n	8003610 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800360e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003620:	7bfb      	ldrb	r3, [r7, #15]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr

0800364e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr

08003660 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr
	...

08003674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a2b      	ldr	r2, [pc, #172]	; (8003734 <TIM_Base_SetConfig+0xc0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d007      	beq.n	800369c <TIM_Base_SetConfig+0x28>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003692:	d003      	beq.n	800369c <TIM_Base_SetConfig+0x28>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a28      	ldr	r2, [pc, #160]	; (8003738 <TIM_Base_SetConfig+0xc4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d108      	bne.n	80036ae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a20      	ldr	r2, [pc, #128]	; (8003734 <TIM_Base_SetConfig+0xc0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d007      	beq.n	80036c6 <TIM_Base_SetConfig+0x52>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036bc:	d003      	beq.n	80036c6 <TIM_Base_SetConfig+0x52>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a1d      	ldr	r2, [pc, #116]	; (8003738 <TIM_Base_SetConfig+0xc4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d108      	bne.n	80036d8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a0d      	ldr	r2, [pc, #52]	; (8003734 <TIM_Base_SetConfig+0xc0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d103      	bne.n	800370c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d005      	beq.n	800372a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f023 0201 	bic.w	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	611a      	str	r2, [r3, #16]
  }
}
 800372a:	bf00      	nop
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr
 8003734:	40012c00 	.word	0x40012c00
 8003738:	40000400 	.word	0x40000400

0800373c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	f023 0201 	bic.w	r2, r3, #1
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f023 030a 	bic.w	r3, r3, #10
 8003778:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4313      	orrs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	621a      	str	r2, [r3, #32]
}
 800378e:	bf00      	nop
 8003790:	371c      	adds	r7, #28
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr

08003798 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	f023 0210 	bic.w	r2, r3, #16
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	031b      	lsls	r3, r3, #12
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	4313      	orrs	r3, r2
 80037de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	621a      	str	r2, [r3, #32]
}
 80037ec:	bf00      	nop
 80037ee:	371c      	adds	r7, #28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr

080037f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b085      	sub	sp, #20
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	f043 0307 	orr.w	r3, r3, #7
 8003818:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	609a      	str	r2, [r3, #8]
}
 8003820:	bf00      	nop
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr

0800382a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800382a:	b480      	push	{r7}
 800382c:	b087      	sub	sp, #28
 800382e:	af00      	add	r7, sp, #0
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	607a      	str	r2, [r7, #4]
 8003836:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003844:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	021a      	lsls	r2, r3, #8
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	431a      	orrs	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	4313      	orrs	r3, r2
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	609a      	str	r2, [r3, #8]
}
 800385e:	bf00      	nop
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr

08003868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800387c:	2302      	movs	r3, #2
 800387e:	e041      	b.n	8003904 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a14      	ldr	r2, [pc, #80]	; (8003910 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d009      	beq.n	80038d8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038cc:	d004      	beq.n	80038d8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a10      	ldr	r2, [pc, #64]	; (8003914 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d10c      	bne.n	80038f2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	bc80      	pop	{r7}
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40012c00 	.word	0x40012c00
 8003914:	40000400 	.word	0x40000400

08003918 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr

0800392a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr

0800393c <__libc_init_array>:
 800393c:	b570      	push	{r4, r5, r6, lr}
 800393e:	2600      	movs	r6, #0
 8003940:	4d0c      	ldr	r5, [pc, #48]	; (8003974 <__libc_init_array+0x38>)
 8003942:	4c0d      	ldr	r4, [pc, #52]	; (8003978 <__libc_init_array+0x3c>)
 8003944:	1b64      	subs	r4, r4, r5
 8003946:	10a4      	asrs	r4, r4, #2
 8003948:	42a6      	cmp	r6, r4
 800394a:	d109      	bne.n	8003960 <__libc_init_array+0x24>
 800394c:	f000 f822 	bl	8003994 <_init>
 8003950:	2600      	movs	r6, #0
 8003952:	4d0a      	ldr	r5, [pc, #40]	; (800397c <__libc_init_array+0x40>)
 8003954:	4c0a      	ldr	r4, [pc, #40]	; (8003980 <__libc_init_array+0x44>)
 8003956:	1b64      	subs	r4, r4, r5
 8003958:	10a4      	asrs	r4, r4, #2
 800395a:	42a6      	cmp	r6, r4
 800395c:	d105      	bne.n	800396a <__libc_init_array+0x2e>
 800395e:	bd70      	pop	{r4, r5, r6, pc}
 8003960:	f855 3b04 	ldr.w	r3, [r5], #4
 8003964:	4798      	blx	r3
 8003966:	3601      	adds	r6, #1
 8003968:	e7ee      	b.n	8003948 <__libc_init_array+0xc>
 800396a:	f855 3b04 	ldr.w	r3, [r5], #4
 800396e:	4798      	blx	r3
 8003970:	3601      	adds	r6, #1
 8003972:	e7f2      	b.n	800395a <__libc_init_array+0x1e>
 8003974:	080039d0 	.word	0x080039d0
 8003978:	080039d0 	.word	0x080039d0
 800397c:	080039d0 	.word	0x080039d0
 8003980:	080039d4 	.word	0x080039d4

08003984 <memset>:
 8003984:	4603      	mov	r3, r0
 8003986:	4402      	add	r2, r0
 8003988:	4293      	cmp	r3, r2
 800398a:	d100      	bne.n	800398e <memset+0xa>
 800398c:	4770      	bx	lr
 800398e:	f803 1b01 	strb.w	r1, [r3], #1
 8003992:	e7f9      	b.n	8003988 <memset+0x4>

08003994 <_init>:
 8003994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003996:	bf00      	nop
 8003998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399a:	bc08      	pop	{r3}
 800399c:	469e      	mov	lr, r3
 800399e:	4770      	bx	lr

080039a0 <_fini>:
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a2:	bf00      	nop
 80039a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a6:	bc08      	pop	{r3}
 80039a8:	469e      	mov	lr, r3
 80039aa:	4770      	bx	lr
