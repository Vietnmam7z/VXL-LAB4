
Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d78  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08002e84  08002e84  00012e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f4c  08002f4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002f4c  08002f4c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f4c  08002f4c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f4c  08002f4c  00012f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f50  08002f50  00012f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  20000070  08002fc4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08002fc4  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac20  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c55  00000000  00000000  0002acb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002c910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002d3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001818b  00000000  00000000  0002dd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae00  00000000  00000000  00045f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087861  00000000  00000000  00050d03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d8564  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032b8  00000000  00000000  000d85b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e6c 	.word	0x08002e6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002e6c 	.word	0x08002e6c

0800014c <SCH_Update>:
	}
	Error_code_G = 0;
	Timer_init();
	Watchdog_init();
}
void SCH_Update(void){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	unsigned char Index;
	for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e05c      	b.n	8000212 <SCH_Update+0xc6>
		if(SCH_tasks_G[Index].pTask){
 8000158:	79fa      	ldrb	r2, [r7, #7]
 800015a:	4932      	ldr	r1, [pc, #200]	; (8000224 <SCH_Update+0xd8>)
 800015c:	4613      	mov	r3, r2
 800015e:	009b      	lsls	r3, r3, #2
 8000160:	4413      	add	r3, r2
 8000162:	009b      	lsls	r3, r3, #2
 8000164:	440b      	add	r3, r1
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	2b00      	cmp	r3, #0
 800016a:	d04f      	beq.n	800020c <SCH_Update+0xc0>
			if(SCH_tasks_G[Index].Delay == 0){
 800016c:	79fa      	ldrb	r2, [r7, #7]
 800016e:	492d      	ldr	r1, [pc, #180]	; (8000224 <SCH_Update+0xd8>)
 8000170:	4613      	mov	r3, r2
 8000172:	009b      	lsls	r3, r3, #2
 8000174:	4413      	add	r3, r2
 8000176:	009b      	lsls	r3, r3, #2
 8000178:	440b      	add	r3, r1
 800017a:	3304      	adds	r3, #4
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d132      	bne.n	80001e8 <SCH_Update+0x9c>
				SCH_tasks_G[Index].RunMe += 1;
 8000182:	79fa      	ldrb	r2, [r7, #7]
 8000184:	4927      	ldr	r1, [pc, #156]	; (8000224 <SCH_Update+0xd8>)
 8000186:	4613      	mov	r3, r2
 8000188:	009b      	lsls	r3, r3, #2
 800018a:	4413      	add	r3, r2
 800018c:	009b      	lsls	r3, r3, #2
 800018e:	440b      	add	r3, r1
 8000190:	330c      	adds	r3, #12
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	79fa      	ldrb	r2, [r7, #7]
 8000196:	3301      	adds	r3, #1
 8000198:	b2d8      	uxtb	r0, r3
 800019a:	4922      	ldr	r1, [pc, #136]	; (8000224 <SCH_Update+0xd8>)
 800019c:	4613      	mov	r3, r2
 800019e:	009b      	lsls	r3, r3, #2
 80001a0:	4413      	add	r3, r2
 80001a2:	009b      	lsls	r3, r3, #2
 80001a4:	440b      	add	r3, r1
 80001a6:	330c      	adds	r3, #12
 80001a8:	4602      	mov	r2, r0
 80001aa:	701a      	strb	r2, [r3, #0]
				if(SCH_tasks_G[Index].Period){
 80001ac:	79fa      	ldrb	r2, [r7, #7]
 80001ae:	491d      	ldr	r1, [pc, #116]	; (8000224 <SCH_Update+0xd8>)
 80001b0:	4613      	mov	r3, r2
 80001b2:	009b      	lsls	r3, r3, #2
 80001b4:	4413      	add	r3, r2
 80001b6:	009b      	lsls	r3, r3, #2
 80001b8:	440b      	add	r3, r1
 80001ba:	3308      	adds	r3, #8
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d024      	beq.n	800020c <SCH_Update+0xc0>
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 80001c2:	79f9      	ldrb	r1, [r7, #7]
 80001c4:	79fa      	ldrb	r2, [r7, #7]
 80001c6:	4817      	ldr	r0, [pc, #92]	; (8000224 <SCH_Update+0xd8>)
 80001c8:	460b      	mov	r3, r1
 80001ca:	009b      	lsls	r3, r3, #2
 80001cc:	440b      	add	r3, r1
 80001ce:	009b      	lsls	r3, r3, #2
 80001d0:	4403      	add	r3, r0
 80001d2:	3308      	adds	r3, #8
 80001d4:	6819      	ldr	r1, [r3, #0]
 80001d6:	4813      	ldr	r0, [pc, #76]	; (8000224 <SCH_Update+0xd8>)
 80001d8:	4613      	mov	r3, r2
 80001da:	009b      	lsls	r3, r3, #2
 80001dc:	4413      	add	r3, r2
 80001de:	009b      	lsls	r3, r3, #2
 80001e0:	4403      	add	r3, r0
 80001e2:	3304      	adds	r3, #4
 80001e4:	6019      	str	r1, [r3, #0]
 80001e6:	e011      	b.n	800020c <SCH_Update+0xc0>
				}
			}
			else{
				SCH_tasks_G[Index].Delay--;
 80001e8:	79fa      	ldrb	r2, [r7, #7]
 80001ea:	490e      	ldr	r1, [pc, #56]	; (8000224 <SCH_Update+0xd8>)
 80001ec:	4613      	mov	r3, r2
 80001ee:	009b      	lsls	r3, r3, #2
 80001f0:	4413      	add	r3, r2
 80001f2:	009b      	lsls	r3, r3, #2
 80001f4:	440b      	add	r3, r1
 80001f6:	3304      	adds	r3, #4
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	1e59      	subs	r1, r3, #1
 80001fc:	4809      	ldr	r0, [pc, #36]	; (8000224 <SCH_Update+0xd8>)
 80001fe:	4613      	mov	r3, r2
 8000200:	009b      	lsls	r3, r3, #2
 8000202:	4413      	add	r3, r2
 8000204:	009b      	lsls	r3, r3, #2
 8000206:	4403      	add	r3, r0
 8000208:	3304      	adds	r3, #4
 800020a:	6019      	str	r1, [r3, #0]
	for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	3301      	adds	r3, #1
 8000210:	71fb      	strb	r3, [r7, #7]
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	2b27      	cmp	r3, #39	; 0x27
 8000216:	d99f      	bls.n	8000158 <SCH_Update+0xc>
			}
		}
	}
}
 8000218:	bf00      	nop
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr
 8000224:	2000009c 	.word	0x2000009c

08000228 <SCH_Add_Task>:
unsigned char SCH_Add_Task(void(*pFunction)() , unsigned int DELAY,unsigned int PERIOD){
 8000228:	b480      	push	{r7}
 800022a:	b087      	sub	sp, #28
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	607a      	str	r2, [r7, #4]
	unsigned char Index = 0;
 8000234:	2300      	movs	r3, #0
 8000236:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)){
 8000238:	e002      	b.n	8000240 <SCH_Add_Task+0x18>
		Index++;
 800023a:	7dfb      	ldrb	r3, [r7, #23]
 800023c:	3301      	adds	r3, #1
 800023e:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)){
 8000240:	7dfa      	ldrb	r2, [r7, #23]
 8000242:	4920      	ldr	r1, [pc, #128]	; (80002c4 <SCH_Add_Task+0x9c>)
 8000244:	4613      	mov	r3, r2
 8000246:	009b      	lsls	r3, r3, #2
 8000248:	4413      	add	r3, r2
 800024a:	009b      	lsls	r3, r3, #2
 800024c:	440b      	add	r3, r1
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d002      	beq.n	800025a <SCH_Add_Task+0x32>
 8000254:	7dfb      	ldrb	r3, [r7, #23]
 8000256:	2b27      	cmp	r3, #39	; 0x27
 8000258:	d9ef      	bls.n	800023a <SCH_Add_Task+0x12>
	}
	if(Index == SCH_MAX_TASKS){
 800025a:	7dfb      	ldrb	r3, [r7, #23]
 800025c:	2b28      	cmp	r3, #40	; 0x28
 800025e:	d104      	bne.n	800026a <SCH_Add_Task+0x42>
		Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 8000260:	4b19      	ldr	r3, [pc, #100]	; (80002c8 <SCH_Add_Task+0xa0>)
 8000262:	2201      	movs	r2, #1
 8000264:	701a      	strb	r2, [r3, #0]
		return SCH_MAX_TASKS;
 8000266:	2328      	movs	r3, #40	; 0x28
 8000268:	e027      	b.n	80002ba <SCH_Add_Task+0x92>
	}
	SCH_tasks_G[Index].pTask = pFunction;
 800026a:	7dfa      	ldrb	r2, [r7, #23]
 800026c:	4915      	ldr	r1, [pc, #84]	; (80002c4 <SCH_Add_Task+0x9c>)
 800026e:	4613      	mov	r3, r2
 8000270:	009b      	lsls	r3, r3, #2
 8000272:	4413      	add	r3, r2
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	440b      	add	r3, r1
 8000278:	68fa      	ldr	r2, [r7, #12]
 800027a:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Delay = DELAY;
 800027c:	7dfa      	ldrb	r2, [r7, #23]
 800027e:	4911      	ldr	r1, [pc, #68]	; (80002c4 <SCH_Add_Task+0x9c>)
 8000280:	4613      	mov	r3, r2
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	4413      	add	r3, r2
 8000286:	009b      	lsls	r3, r3, #2
 8000288:	440b      	add	r3, r1
 800028a:	3304      	adds	r3, #4
 800028c:	68ba      	ldr	r2, [r7, #8]
 800028e:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Period = PERIOD;
 8000290:	7dfa      	ldrb	r2, [r7, #23]
 8000292:	490c      	ldr	r1, [pc, #48]	; (80002c4 <SCH_Add_Task+0x9c>)
 8000294:	4613      	mov	r3, r2
 8000296:	009b      	lsls	r3, r3, #2
 8000298:	4413      	add	r3, r2
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	440b      	add	r3, r1
 800029e:	3308      	adds	r3, #8
 80002a0:	687a      	ldr	r2, [r7, #4]
 80002a2:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].RunMe = 0;
 80002a4:	7dfa      	ldrb	r2, [r7, #23]
 80002a6:	4907      	ldr	r1, [pc, #28]	; (80002c4 <SCH_Add_Task+0x9c>)
 80002a8:	4613      	mov	r3, r2
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	4413      	add	r3, r2
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	440b      	add	r3, r1
 80002b2:	330c      	adds	r3, #12
 80002b4:	2200      	movs	r2, #0
 80002b6:	701a      	strb	r2, [r3, #0]
	return Index;
 80002b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	371c      	adds	r7, #28
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	2000009c 	.word	0x2000009c
 80002c8:	2000008c 	.word	0x2000008c

080002cc <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
	unsigned char Index ;
	for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 80002d2:	2300      	movs	r3, #0
 80002d4:	71fb      	strb	r3, [r7, #7]
 80002d6:	e039      	b.n	800034c <SCH_Dispatch_Tasks+0x80>
		if(SCH_tasks_G [Index].RunMe > 0){
 80002d8:	79fa      	ldrb	r2, [r7, #7]
 80002da:	4922      	ldr	r1, [pc, #136]	; (8000364 <SCH_Dispatch_Tasks+0x98>)
 80002dc:	4613      	mov	r3, r2
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	4413      	add	r3, r2
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	440b      	add	r3, r1
 80002e6:	330c      	adds	r3, #12
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d02b      	beq.n	8000346 <SCH_Dispatch_Tasks+0x7a>
			(*SCH_tasks_G[Index].pTask)();
 80002ee:	79fa      	ldrb	r2, [r7, #7]
 80002f0:	491c      	ldr	r1, [pc, #112]	; (8000364 <SCH_Dispatch_Tasks+0x98>)
 80002f2:	4613      	mov	r3, r2
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	4413      	add	r3, r2
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	440b      	add	r3, r1
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4798      	blx	r3
			SCH_tasks_G[Index].RunMe--;
 8000300:	79fa      	ldrb	r2, [r7, #7]
 8000302:	4918      	ldr	r1, [pc, #96]	; (8000364 <SCH_Dispatch_Tasks+0x98>)
 8000304:	4613      	mov	r3, r2
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	4413      	add	r3, r2
 800030a:	009b      	lsls	r3, r3, #2
 800030c:	440b      	add	r3, r1
 800030e:	330c      	adds	r3, #12
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	3b01      	subs	r3, #1
 8000314:	b2d8      	uxtb	r0, r3
 8000316:	4913      	ldr	r1, [pc, #76]	; (8000364 <SCH_Dispatch_Tasks+0x98>)
 8000318:	4613      	mov	r3, r2
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	4413      	add	r3, r2
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	440b      	add	r3, r1
 8000322:	330c      	adds	r3, #12
 8000324:	4602      	mov	r2, r0
 8000326:	701a      	strb	r2, [r3, #0]
			if(SCH_tasks_G[Index].Period == 0){
 8000328:	79fa      	ldrb	r2, [r7, #7]
 800032a:	490e      	ldr	r1, [pc, #56]	; (8000364 <SCH_Dispatch_Tasks+0x98>)
 800032c:	4613      	mov	r3, r2
 800032e:	009b      	lsls	r3, r3, #2
 8000330:	4413      	add	r3, r2
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	440b      	add	r3, r1
 8000336:	3308      	adds	r3, #8
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d103      	bne.n	8000346 <SCH_Dispatch_Tasks+0x7a>
				SCH_Delete_Task(Index);
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	4618      	mov	r0, r3
 8000342:	f000 f811 	bl	8000368 <SCH_Delete_Task>
	for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	3301      	adds	r3, #1
 800034a:	71fb      	strb	r3, [r7, #7]
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	2b27      	cmp	r3, #39	; 0x27
 8000350:	d9c2      	bls.n	80002d8 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
	SCH_Report_Status();
 8000352:	f000 f857 	bl	8000404 <SCH_Report_Status>
	SCH_Go_To_Sleep();
 8000356:	f000 f84f 	bl	80003f8 <SCH_Go_To_Sleep>
}
 800035a:	bf00      	nop
 800035c:	3708      	adds	r7, #8
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	2000009c 	.word	0x2000009c

08000368 <SCH_Delete_Task>:
uint8_t SCH_Delete_Task(const uint32_t TASK_INDEX){
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	unsigned char Return_code;
	if(SCH_tasks_G[TASK_INDEX].pTask == 0){
 8000370:	491f      	ldr	r1, [pc, #124]	; (80003f0 <SCH_Delete_Task+0x88>)
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	4613      	mov	r3, r2
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	4413      	add	r3, r2
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	440b      	add	r3, r1
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d105      	bne.n	8000390 <SCH_Delete_Task+0x28>
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 8000384:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <SCH_Delete_Task+0x8c>)
 8000386:	2208      	movs	r2, #8
 8000388:	701a      	strb	r2, [r3, #0]
		Return_code = RETURN_ERROR;
 800038a:	2309      	movs	r3, #9
 800038c:	73fb      	strb	r3, [r7, #15]
 800038e:	e001      	b.n	8000394 <SCH_Delete_Task+0x2c>
	}
	else{
		Return_code = RETURN_NORMAL;
 8000390:	230a      	movs	r3, #10
 8000392:	73fb      	strb	r3, [r7, #15]
	}
	SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 8000394:	4916      	ldr	r1, [pc, #88]	; (80003f0 <SCH_Delete_Task+0x88>)
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	4613      	mov	r3, r2
 800039a:	009b      	lsls	r3, r3, #2
 800039c:	4413      	add	r3, r2
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	440b      	add	r3, r1
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Delay = 0;
 80003a6:	4912      	ldr	r1, [pc, #72]	; (80003f0 <SCH_Delete_Task+0x88>)
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	4613      	mov	r3, r2
 80003ac:	009b      	lsls	r3, r3, #2
 80003ae:	4413      	add	r3, r2
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	440b      	add	r3, r1
 80003b4:	3304      	adds	r3, #4
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Period = 0;
 80003ba:	490d      	ldr	r1, [pc, #52]	; (80003f0 <SCH_Delete_Task+0x88>)
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	4613      	mov	r3, r2
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	4413      	add	r3, r2
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	440b      	add	r3, r1
 80003c8:	3308      	adds	r3, #8
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].RunMe = 0;
 80003ce:	4908      	ldr	r1, [pc, #32]	; (80003f0 <SCH_Delete_Task+0x88>)
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	4613      	mov	r3, r2
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	4413      	add	r3, r2
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	440b      	add	r3, r1
 80003dc:	330c      	adds	r3, #12
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
	return Return_code;
 80003e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	3714      	adds	r7, #20
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	2000009c 	.word	0x2000009c
 80003f4:	2000008c 	.word	0x2000008c

080003f8 <SCH_Go_To_Sleep>:
void SCH_Go_To_Sleep(void){
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
//todo
}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr

08000404 <SCH_Report_Status>:
void SCH_Report_Status(void){
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
				Error_code_G = 0;
			}
		}
	}
#endif
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr

08000410 <InitLED>:
 *      Author: Genki
 */
#include "Task.h"
#include "main.h"
#include <stdio.h>
void InitLED(void){
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8000414:	2201      	movs	r2, #1
 8000416:	2102      	movs	r1, #2
 8000418:	480c      	ldr	r0, [pc, #48]	; (800044c <InitLED+0x3c>)
 800041a:	f000 fdab 	bl	8000f74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 800041e:	2201      	movs	r2, #1
 8000420:	2104      	movs	r1, #4
 8000422:	480a      	ldr	r0, [pc, #40]	; (800044c <InitLED+0x3c>)
 8000424:	f000 fda6 	bl	8000f74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 8000428:	2201      	movs	r2, #1
 800042a:	2108      	movs	r1, #8
 800042c:	4807      	ldr	r0, [pc, #28]	; (800044c <InitLED+0x3c>)
 800042e:	f000 fda1 	bl	8000f74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, SET);
 8000432:	2201      	movs	r2, #1
 8000434:	2110      	movs	r1, #16
 8000436:	4805      	ldr	r0, [pc, #20]	; (800044c <InitLED+0x3c>)
 8000438:	f000 fd9c 	bl	8000f74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, SET);
 800043c:	2201      	movs	r2, #1
 800043e:	2120      	movs	r1, #32
 8000440:	4802      	ldr	r0, [pc, #8]	; (800044c <InitLED+0x3c>)
 8000442:	f000 fd97 	bl	8000f74 <HAL_GPIO_WritePin>
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40010800 	.word	0x40010800

08000450 <Task1>:
void Task1(void){
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000454:	2102      	movs	r1, #2
 8000456:	4802      	ldr	r0, [pc, #8]	; (8000460 <Task1+0x10>)
 8000458:	f000 fda4 	bl	8000fa4 <HAL_GPIO_TogglePin>
}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40010800 	.word	0x40010800

08000464 <Task2>:
void Task2(void){
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000468:	2104      	movs	r1, #4
 800046a:	4802      	ldr	r0, [pc, #8]	; (8000474 <Task2+0x10>)
 800046c:	f000 fd9a 	bl	8000fa4 <HAL_GPIO_TogglePin>
}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	40010800 	.word	0x40010800

08000478 <Task3>:
void Task3(void){
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800047c:	2108      	movs	r1, #8
 800047e:	4802      	ldr	r0, [pc, #8]	; (8000488 <Task3+0x10>)
 8000480:	f000 fd90 	bl	8000fa4 <HAL_GPIO_TogglePin>
}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}
 8000488:	40010800 	.word	0x40010800

0800048c <Task4>:
void Task4(void){
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8000490:	2110      	movs	r1, #16
 8000492:	4802      	ldr	r0, [pc, #8]	; (800049c <Task4+0x10>)
 8000494:	f000 fd86 	bl	8000fa4 <HAL_GPIO_TogglePin>
}
 8000498:	bf00      	nop
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40010800 	.word	0x40010800

080004a0 <Task5>:
void Task5(void){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 80004a4:	2120      	movs	r1, #32
 80004a6:	4802      	ldr	r0, [pc, #8]	; (80004b0 <Task5+0x10>)
 80004a8:	f000 fd7c 	bl	8000fa4 <HAL_GPIO_TogglePin>
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40010800 	.word	0x40010800

080004b4 <get_time>:
void get_time(void){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
	uint32_t time = HAL_GetTick();
 80004ba:	f000 fac9 	bl	8000a50 <HAL_GetTick>
 80004be:	6078      	str	r0, [r7, #4]
	printf("Time: %lu\n", time);
 80004c0:	6879      	ldr	r1, [r7, #4]
 80004c2:	4803      	ldr	r0, [pc, #12]	; (80004d0 <get_time+0x1c>)
 80004c4:	f001 fd72 	bl	8001fac <iprintf>
}
 80004c8:	bf00      	nop
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	08002e84 	.word	0x08002e84

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fa62 	bl	80009a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f842 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80004e0:	f000 f87c 	bl	80005dc <MX_TIM2_Init>
  MX_GPIO_Init();
 80004e4:	f000 f8c6 	bl	8000674 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80004e8:	4817      	ldr	r0, [pc, #92]	; (8000548 <main+0x74>)
 80004ea:	f001 f9a1 	bl	8001830 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  InitLED();
 80004ee:	f7ff ff8f 	bl	8000410 <InitLED>
  SCH_Add_Task(Task1, 100, 100);
 80004f2:	2264      	movs	r2, #100	; 0x64
 80004f4:	2164      	movs	r1, #100	; 0x64
 80004f6:	4815      	ldr	r0, [pc, #84]	; (800054c <main+0x78>)
 80004f8:	f7ff fe96 	bl	8000228 <SCH_Add_Task>
  SCH_Add_Task(Task2, 200, 100);
 80004fc:	2264      	movs	r2, #100	; 0x64
 80004fe:	21c8      	movs	r1, #200	; 0xc8
 8000500:	4813      	ldr	r0, [pc, #76]	; (8000550 <main+0x7c>)
 8000502:	f7ff fe91 	bl	8000228 <SCH_Add_Task>
  SCH_Add_Task(Task3, 300, 100);
 8000506:	2264      	movs	r2, #100	; 0x64
 8000508:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800050c:	4811      	ldr	r0, [pc, #68]	; (8000554 <main+0x80>)
 800050e:	f7ff fe8b 	bl	8000228 <SCH_Add_Task>
  SCH_Add_Task(Task4, 400, 100);
 8000512:	2264      	movs	r2, #100	; 0x64
 8000514:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000518:	480f      	ldr	r0, [pc, #60]	; (8000558 <main+0x84>)
 800051a:	f7ff fe85 	bl	8000228 <SCH_Add_Task>
  SCH_Add_Task(Task5, 500, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <main+0x88>)
 8000526:	f7ff fe7f 	bl	8000228 <SCH_Add_Task>
  SCH_Add_Task(get_time, 0, 10);
 800052a:	220a      	movs	r2, #10
 800052c:	2100      	movs	r1, #0
 800052e:	480c      	ldr	r0, [pc, #48]	; (8000560 <main+0x8c>)
 8000530:	f7ff fe7a 	bl	8000228 <SCH_Add_Task>
  SCH_Add_Task(get_time, 0, 500);
 8000534:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000538:	2100      	movs	r1, #0
 800053a:	4809      	ldr	r0, [pc, #36]	; (8000560 <main+0x8c>)
 800053c:	f7ff fe74 	bl	8000228 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000540:	f7ff fec4 	bl	80002cc <SCH_Dispatch_Tasks>
 8000544:	e7fc      	b.n	8000540 <main+0x6c>
 8000546:	bf00      	nop
 8000548:	200003bc 	.word	0x200003bc
 800054c:	08000451 	.word	0x08000451
 8000550:	08000465 	.word	0x08000465
 8000554:	08000479 	.word	0x08000479
 8000558:	0800048d 	.word	0x0800048d
 800055c:	080004a1 	.word	0x080004a1
 8000560:	080004b5 	.word	0x080004b5

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b090      	sub	sp, #64	; 0x40
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0318 	add.w	r3, r7, #24
 800056e:	2228      	movs	r2, #40	; 0x28
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f001 fd12 	bl	8001f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000586:	2302      	movs	r3, #2
 8000588:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058a:	2301      	movs	r3, #1
 800058c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058e:	2310      	movs	r3, #16
 8000590:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000592:	2300      	movs	r3, #0
 8000594:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000596:	f107 0318 	add.w	r3, r7, #24
 800059a:	4618      	mov	r0, r3
 800059c:	f000 fd1c 	bl	8000fd8 <HAL_RCC_OscConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80005a6:	f000 f8a1 	bl	80006ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005aa:	230f      	movs	r3, #15
 80005ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 ff88 	bl	80014d8 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005ce:	f000 f88d 	bl	80006ec <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3740      	adds	r7, #64	; 0x40
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005f8:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <MX_TIM2_Init+0x94>)
 80005fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <MX_TIM2_Init+0x94>)
 8000602:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000606:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000608:	4b19      	ldr	r3, [pc, #100]	; (8000670 <MX_TIM2_Init+0x94>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <MX_TIM2_Init+0x94>)
 8000610:	2209      	movs	r2, #9
 8000612:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <MX_TIM2_Init+0x94>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <MX_TIM2_Init+0x94>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000620:	4813      	ldr	r0, [pc, #76]	; (8000670 <MX_TIM2_Init+0x94>)
 8000622:	f001 f8b5 	bl	8001790 <HAL_TIM_Base_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800062c:	f000 f85e 	bl	80006ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000634:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	4619      	mov	r1, r3
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <MX_TIM2_Init+0x94>)
 800063e:	f001 fa33 	bl	8001aa8 <HAL_TIM_ConfigClockSource>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000648:	f000 f850 	bl	80006ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	4619      	mov	r1, r3
 8000658:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_TIM2_Init+0x94>)
 800065a:	f001 fc0b 	bl	8001e74 <HAL_TIMEx_MasterConfigSynchronization>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000664:	f000 f842 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	3718      	adds	r7, #24
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200003bc 	.word	0x200003bc

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_GPIO_Init+0x5c>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a10      	ldr	r2, [pc, #64]	; (80006d0 <MX_GPIO_Init+0x5c>)
 800068e:	f043 0304 	orr.w	r3, r3, #4
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_GPIO_Init+0x5c>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f003 0304 	and.w	r3, r3, #4
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80006a0:	2200      	movs	r2, #0
 80006a2:	213e      	movs	r1, #62	; 0x3e
 80006a4:	480b      	ldr	r0, [pc, #44]	; (80006d4 <MX_GPIO_Init+0x60>)
 80006a6:	f000 fc65 	bl	8000f74 <HAL_GPIO_WritePin>
                          |LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80006aa:	233e      	movs	r3, #62	; 0x3e
 80006ac:	60bb      	str	r3, [r7, #8]
                          |LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2302      	movs	r3, #2
 80006b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	4619      	mov	r1, r3
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <MX_GPIO_Init+0x60>)
 80006c2:	f000 fadd 	bl	8000c80 <HAL_GPIO_Init>

}
 80006c6:	bf00      	nop
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40010800 	.word	0x40010800

080006d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80006e0:	f7ff fd34 	bl	800014c <SCH_Update>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <Error_Handler+0x8>
	...

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <HAL_MspInit+0x5c>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	4a14      	ldr	r2, [pc, #80]	; (8000754 <HAL_MspInit+0x5c>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6193      	str	r3, [r2, #24]
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_MspInit+0x5c>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <HAL_MspInit+0x5c>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <HAL_MspInit+0x5c>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000720:	61d3      	str	r3, [r2, #28]
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <HAL_MspInit+0x5c>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <HAL_MspInit+0x60>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <HAL_MspInit+0x60>)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	bf00      	nop
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	40021000 	.word	0x40021000
 8000758:	40010000 	.word	0x40010000

0800075c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800076c:	d113      	bne.n	8000796 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <HAL_TIM_Base_MspInit+0x44>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <HAL_TIM_Base_MspInit+0x44>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	61d3      	str	r3, [r2, #28]
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <HAL_TIM_Base_MspInit+0x44>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	201c      	movs	r0, #28
 800078c:	f000 fa41 	bl	8000c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000790:	201c      	movs	r0, #28
 8000792:	f000 fa5a 	bl	8000c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000796:	bf00      	nop
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <NMI_Handler+0x4>

080007aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <HardFault_Handler+0x4>

080007b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <MemManage_Handler+0x4>

080007b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <BusFault_Handler+0x4>

080007bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <UsageFault_Handler+0x4>

080007c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr

080007ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr

080007da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr

080007e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ea:	f000 f91f 	bl	8000a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007f8:	4802      	ldr	r0, [pc, #8]	; (8000804 <TIM2_IRQHandler+0x10>)
 80007fa:	f001 f865 	bl	80018c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200003bc 	.word	0x200003bc

08000808 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	e00a      	b.n	8000830 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800081a:	f3af 8000 	nop.w
 800081e:	4601      	mov	r1, r0
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	1c5a      	adds	r2, r3, #1
 8000824:	60ba      	str	r2, [r7, #8]
 8000826:	b2ca      	uxtb	r2, r1
 8000828:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	3301      	adds	r3, #1
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	697a      	ldr	r2, [r7, #20]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	429a      	cmp	r2, r3
 8000836:	dbf0      	blt.n	800081a <_read+0x12>
	}

return len;
 8000838:	687b      	ldr	r3, [r7, #4]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3718      	adds	r7, #24
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b086      	sub	sp, #24
 8000846:	af00      	add	r7, sp, #0
 8000848:	60f8      	str	r0, [r7, #12]
 800084a:	60b9      	str	r1, [r7, #8]
 800084c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
 8000852:	e009      	b.n	8000868 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	1c5a      	adds	r2, r3, #1
 8000858:	60ba      	str	r2, [r7, #8]
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	4618      	mov	r0, r3
 800085e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	3301      	adds	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697a      	ldr	r2, [r7, #20]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	429a      	cmp	r2, r3
 800086e:	dbf1      	blt.n	8000854 <_write+0x12>
	}
	return len;
 8000870:	687b      	ldr	r3, [r7, #4]
}
 8000872:	4618      	mov	r0, r3
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <_close>:

int _close(int file)
{
 800087a:	b480      	push	{r7}
 800087c:	b083      	sub	sp, #12
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
	return -1;
 8000882:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000886:	4618      	mov	r0, r3
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008a0:	605a      	str	r2, [r3, #4]
	return 0;
 80008a2:	2300      	movs	r3, #0
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr

080008ae <_isatty>:

int _isatty(int file)
{
 80008ae:	b480      	push	{r7}
 80008b0:	b083      	sub	sp, #12
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
	return 1;
 80008b6:	2301      	movs	r3, #1
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr

080008c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008c2:	b480      	push	{r7}
 80008c4:	b085      	sub	sp, #20
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	60f8      	str	r0, [r7, #12]
 80008ca:	60b9      	str	r1, [r7, #8]
 80008cc:	607a      	str	r2, [r7, #4]
	return 0;
 80008ce:	2300      	movs	r3, #0
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
	...

080008dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e4:	4a14      	ldr	r2, [pc, #80]	; (8000938 <_sbrk+0x5c>)
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <_sbrk+0x60>)
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f0:	4b13      	ldr	r3, [pc, #76]	; (8000940 <_sbrk+0x64>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d102      	bne.n	80008fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <_sbrk+0x64>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	; (8000944 <_sbrk+0x68>)
 80008fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <_sbrk+0x64>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	429a      	cmp	r2, r3
 800090a:	d207      	bcs.n	800091c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800090c:	f001 fb1c 	bl	8001f48 <__errno>
 8000910:	4603      	mov	r3, r0
 8000912:	220c      	movs	r2, #12
 8000914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
 800091a:	e009      	b.n	8000930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <_sbrk+0x64>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <_sbrk+0x64>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	4a05      	ldr	r2, [pc, #20]	; (8000940 <_sbrk+0x64>)
 800092c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800092e:	68fb      	ldr	r3, [r7, #12]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20002800 	.word	0x20002800
 800093c:	00000400 	.word	0x00000400
 8000940:	20000090 	.word	0x20000090
 8000944:	20000418 	.word	0x20000418

08000948 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr

08000954 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000954:	f7ff fff8 	bl	8000948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000958:	480b      	ldr	r0, [pc, #44]	; (8000988 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800095a:	490c      	ldr	r1, [pc, #48]	; (800098c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800095c:	4a0c      	ldr	r2, [pc, #48]	; (8000990 <LoopFillZerobss+0x16>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a09      	ldr	r2, [pc, #36]	; (8000994 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000970:	4c09      	ldr	r4, [pc, #36]	; (8000998 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097e:	f001 fae9 	bl	8001f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000982:	f7ff fda7 	bl	80004d4 <main>
  bx lr
 8000986:	4770      	bx	lr
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000990:	08002f54 	.word	0x08002f54
  ldr r2, =_sbss
 8000994:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000998:	20000418 	.word	0x20000418

0800099c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC1_2_IRQHandler>
	...

080009a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <HAL_Init+0x28>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <HAL_Init+0x28>)
 80009aa:	f043 0310 	orr.w	r3, r3, #16
 80009ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b0:	2003      	movs	r0, #3
 80009b2:	f000 f923 	bl	8000bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b6:	200f      	movs	r0, #15
 80009b8:	f000 f808 	bl	80009cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009bc:	f7ff fe9c 	bl	80006f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40022000 	.word	0x40022000

080009cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_InitTick+0x54>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <HAL_InitTick+0x58>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f93b 	bl	8000c66 <HAL_SYSTICK_Config>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e00e      	b.n	8000a18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b0f      	cmp	r3, #15
 80009fe:	d80a      	bhi.n	8000a16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a00:	2200      	movs	r2, #0
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295
 8000a08:	f000 f903 	bl	8000c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a0c:	4a06      	ldr	r2, [pc, #24]	; (8000a28 <HAL_InitTick+0x5c>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e000      	b.n	8000a18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000000 	.word	0x20000000
 8000a24:	20000008 	.word	0x20000008
 8000a28:	20000004 	.word	0x20000004

08000a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <HAL_IncTick+0x1c>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <HAL_IncTick+0x20>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a03      	ldr	r2, [pc, #12]	; (8000a4c <HAL_IncTick+0x20>)
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	20000404 	.word	0x20000404

08000a50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return uwTick;
 8000a54:	4b02      	ldr	r3, [pc, #8]	; (8000a60 <HAL_GetTick+0x10>)
 8000a56:	681b      	ldr	r3, [r3, #0]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	20000404 	.word	0x20000404

08000a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a96:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	60d3      	str	r3, [r2, #12]
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	0a1b      	lsrs	r3, r3, #8
 8000ab6:	f003 0307 	and.w	r3, r3, #7
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	db0b      	blt.n	8000af2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	f003 021f 	and.w	r2, r3, #31
 8000ae0:	4906      	ldr	r1, [pc, #24]	; (8000afc <__NVIC_EnableIRQ+0x34>)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	095b      	lsrs	r3, r3, #5
 8000ae8:	2001      	movs	r0, #1
 8000aea:	fa00 f202 	lsl.w	r2, r0, r2
 8000aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	e000e100 	.word	0xe000e100

08000b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	6039      	str	r1, [r7, #0]
 8000b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	db0a      	blt.n	8000b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	490c      	ldr	r1, [pc, #48]	; (8000b4c <__NVIC_SetPriority+0x4c>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	0112      	lsls	r2, r2, #4
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	440b      	add	r3, r1
 8000b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b28:	e00a      	b.n	8000b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4908      	ldr	r1, [pc, #32]	; (8000b50 <__NVIC_SetPriority+0x50>)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	f003 030f 	and.w	r3, r3, #15
 8000b36:	3b04      	subs	r3, #4
 8000b38:	0112      	lsls	r2, r2, #4
 8000b3a:	b2d2      	uxtb	r2, r2
 8000b3c:	440b      	add	r3, r1
 8000b3e:	761a      	strb	r2, [r3, #24]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000e100 	.word	0xe000e100
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b089      	sub	sp, #36	; 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	f1c3 0307 	rsb	r3, r3, #7
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	bf28      	it	cs
 8000b72:	2304      	movcs	r3, #4
 8000b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	2b06      	cmp	r3, #6
 8000b7c:	d902      	bls.n	8000b84 <NVIC_EncodePriority+0x30>
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3b03      	subs	r3, #3
 8000b82:	e000      	b.n	8000b86 <NVIC_EncodePriority+0x32>
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43da      	mvns	r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	401a      	ands	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	43d9      	mvns	r1, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	4313      	orrs	r3, r2
         );
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	; 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc8:	d301      	bcc.n	8000bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00f      	b.n	8000bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <SysTick_Config+0x40>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f7ff ff90 	bl	8000b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <SysTick_Config+0x40>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be6:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <SysTick_Config+0x40>)
 8000be8:	2207      	movs	r2, #7
 8000bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	e000e010 	.word	0xe000e010

08000bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff ff2d 	bl	8000a64 <__NVIC_SetPriorityGrouping>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b086      	sub	sp, #24
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	60b9      	str	r1, [r7, #8]
 8000c1c:	607a      	str	r2, [r7, #4]
 8000c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c24:	f7ff ff42 	bl	8000aac <__NVIC_GetPriorityGrouping>
 8000c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	68b9      	ldr	r1, [r7, #8]
 8000c2e:	6978      	ldr	r0, [r7, #20]
 8000c30:	f7ff ff90 	bl	8000b54 <NVIC_EncodePriority>
 8000c34:	4602      	mov	r2, r0
 8000c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff5f 	bl	8000b00 <__NVIC_SetPriority>
}
 8000c42:	bf00      	nop
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff35 	bl	8000ac8 <__NVIC_EnableIRQ>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ffa2 	bl	8000bb8 <SysTick_Config>
 8000c74:	4603      	mov	r3, r0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b08b      	sub	sp, #44	; 0x2c
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c92:	e148      	b.n	8000f26 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c94:	2201      	movs	r2, #1
 8000c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	69fa      	ldr	r2, [r7, #28]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	f040 8137 	bne.w	8000f20 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	4aa3      	ldr	r2, [pc, #652]	; (8000f44 <HAL_GPIO_Init+0x2c4>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d05e      	beq.n	8000d7a <HAL_GPIO_Init+0xfa>
 8000cbc:	4aa1      	ldr	r2, [pc, #644]	; (8000f44 <HAL_GPIO_Init+0x2c4>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d875      	bhi.n	8000dae <HAL_GPIO_Init+0x12e>
 8000cc2:	4aa1      	ldr	r2, [pc, #644]	; (8000f48 <HAL_GPIO_Init+0x2c8>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d058      	beq.n	8000d7a <HAL_GPIO_Init+0xfa>
 8000cc8:	4a9f      	ldr	r2, [pc, #636]	; (8000f48 <HAL_GPIO_Init+0x2c8>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d86f      	bhi.n	8000dae <HAL_GPIO_Init+0x12e>
 8000cce:	4a9f      	ldr	r2, [pc, #636]	; (8000f4c <HAL_GPIO_Init+0x2cc>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d052      	beq.n	8000d7a <HAL_GPIO_Init+0xfa>
 8000cd4:	4a9d      	ldr	r2, [pc, #628]	; (8000f4c <HAL_GPIO_Init+0x2cc>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d869      	bhi.n	8000dae <HAL_GPIO_Init+0x12e>
 8000cda:	4a9d      	ldr	r2, [pc, #628]	; (8000f50 <HAL_GPIO_Init+0x2d0>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d04c      	beq.n	8000d7a <HAL_GPIO_Init+0xfa>
 8000ce0:	4a9b      	ldr	r2, [pc, #620]	; (8000f50 <HAL_GPIO_Init+0x2d0>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d863      	bhi.n	8000dae <HAL_GPIO_Init+0x12e>
 8000ce6:	4a9b      	ldr	r2, [pc, #620]	; (8000f54 <HAL_GPIO_Init+0x2d4>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d046      	beq.n	8000d7a <HAL_GPIO_Init+0xfa>
 8000cec:	4a99      	ldr	r2, [pc, #612]	; (8000f54 <HAL_GPIO_Init+0x2d4>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d85d      	bhi.n	8000dae <HAL_GPIO_Init+0x12e>
 8000cf2:	2b12      	cmp	r3, #18
 8000cf4:	d82a      	bhi.n	8000d4c <HAL_GPIO_Init+0xcc>
 8000cf6:	2b12      	cmp	r3, #18
 8000cf8:	d859      	bhi.n	8000dae <HAL_GPIO_Init+0x12e>
 8000cfa:	a201      	add	r2, pc, #4	; (adr r2, 8000d00 <HAL_GPIO_Init+0x80>)
 8000cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d00:	08000d7b 	.word	0x08000d7b
 8000d04:	08000d55 	.word	0x08000d55
 8000d08:	08000d67 	.word	0x08000d67
 8000d0c:	08000da9 	.word	0x08000da9
 8000d10:	08000daf 	.word	0x08000daf
 8000d14:	08000daf 	.word	0x08000daf
 8000d18:	08000daf 	.word	0x08000daf
 8000d1c:	08000daf 	.word	0x08000daf
 8000d20:	08000daf 	.word	0x08000daf
 8000d24:	08000daf 	.word	0x08000daf
 8000d28:	08000daf 	.word	0x08000daf
 8000d2c:	08000daf 	.word	0x08000daf
 8000d30:	08000daf 	.word	0x08000daf
 8000d34:	08000daf 	.word	0x08000daf
 8000d38:	08000daf 	.word	0x08000daf
 8000d3c:	08000daf 	.word	0x08000daf
 8000d40:	08000daf 	.word	0x08000daf
 8000d44:	08000d5d 	.word	0x08000d5d
 8000d48:	08000d71 	.word	0x08000d71
 8000d4c:	4a82      	ldr	r2, [pc, #520]	; (8000f58 <HAL_GPIO_Init+0x2d8>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d013      	beq.n	8000d7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d52:	e02c      	b.n	8000dae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	623b      	str	r3, [r7, #32]
          break;
 8000d5a:	e029      	b.n	8000db0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	3304      	adds	r3, #4
 8000d62:	623b      	str	r3, [r7, #32]
          break;
 8000d64:	e024      	b.n	8000db0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	3308      	adds	r3, #8
 8000d6c:	623b      	str	r3, [r7, #32]
          break;
 8000d6e:	e01f      	b.n	8000db0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	330c      	adds	r3, #12
 8000d76:	623b      	str	r3, [r7, #32]
          break;
 8000d78:	e01a      	b.n	8000db0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d102      	bne.n	8000d88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d82:	2304      	movs	r3, #4
 8000d84:	623b      	str	r3, [r7, #32]
          break;
 8000d86:	e013      	b.n	8000db0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d105      	bne.n	8000d9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d90:	2308      	movs	r3, #8
 8000d92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69fa      	ldr	r2, [r7, #28]
 8000d98:	611a      	str	r2, [r3, #16]
          break;
 8000d9a:	e009      	b.n	8000db0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d9c:	2308      	movs	r3, #8
 8000d9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69fa      	ldr	r2, [r7, #28]
 8000da4:	615a      	str	r2, [r3, #20]
          break;
 8000da6:	e003      	b.n	8000db0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000da8:	2300      	movs	r3, #0
 8000daa:	623b      	str	r3, [r7, #32]
          break;
 8000dac:	e000      	b.n	8000db0 <HAL_GPIO_Init+0x130>
          break;
 8000dae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	2bff      	cmp	r3, #255	; 0xff
 8000db4:	d801      	bhi.n	8000dba <HAL_GPIO_Init+0x13a>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	e001      	b.n	8000dbe <HAL_GPIO_Init+0x13e>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	2bff      	cmp	r3, #255	; 0xff
 8000dc4:	d802      	bhi.n	8000dcc <HAL_GPIO_Init+0x14c>
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	e002      	b.n	8000dd2 <HAL_GPIO_Init+0x152>
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dce:	3b08      	subs	r3, #8
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	210f      	movs	r1, #15
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	401a      	ands	r2, r3
 8000de4:	6a39      	ldr	r1, [r7, #32]
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dec:	431a      	orrs	r2, r3
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f000 8090 	beq.w	8000f20 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e00:	4b56      	ldr	r3, [pc, #344]	; (8000f5c <HAL_GPIO_Init+0x2dc>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a55      	ldr	r2, [pc, #340]	; (8000f5c <HAL_GPIO_Init+0x2dc>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b53      	ldr	r3, [pc, #332]	; (8000f5c <HAL_GPIO_Init+0x2dc>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e18:	4a51      	ldr	r2, [pc, #324]	; (8000f60 <HAL_GPIO_Init+0x2e0>)
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	089b      	lsrs	r3, r3, #2
 8000e1e:	3302      	adds	r3, #2
 8000e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	220f      	movs	r2, #15
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a49      	ldr	r2, [pc, #292]	; (8000f64 <HAL_GPIO_Init+0x2e4>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d00d      	beq.n	8000e60 <HAL_GPIO_Init+0x1e0>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a48      	ldr	r2, [pc, #288]	; (8000f68 <HAL_GPIO_Init+0x2e8>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d007      	beq.n	8000e5c <HAL_GPIO_Init+0x1dc>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a47      	ldr	r2, [pc, #284]	; (8000f6c <HAL_GPIO_Init+0x2ec>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d101      	bne.n	8000e58 <HAL_GPIO_Init+0x1d8>
 8000e54:	2302      	movs	r3, #2
 8000e56:	e004      	b.n	8000e62 <HAL_GPIO_Init+0x1e2>
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e002      	b.n	8000e62 <HAL_GPIO_Init+0x1e2>
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e000      	b.n	8000e62 <HAL_GPIO_Init+0x1e2>
 8000e60:	2300      	movs	r3, #0
 8000e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e64:	f002 0203 	and.w	r2, r2, #3
 8000e68:	0092      	lsls	r2, r2, #2
 8000e6a:	4093      	lsls	r3, r2
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e72:	493b      	ldr	r1, [pc, #236]	; (8000f60 <HAL_GPIO_Init+0x2e0>)
 8000e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e76:	089b      	lsrs	r3, r3, #2
 8000e78:	3302      	adds	r3, #2
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d006      	beq.n	8000e9a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e8c:	4b38      	ldr	r3, [pc, #224]	; (8000f70 <HAL_GPIO_Init+0x2f0>)
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	4937      	ldr	r1, [pc, #220]	; (8000f70 <HAL_GPIO_Init+0x2f0>)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	608b      	str	r3, [r1, #8]
 8000e98:	e006      	b.n	8000ea8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e9a:	4b35      	ldr	r3, [pc, #212]	; (8000f70 <HAL_GPIO_Init+0x2f0>)
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	4933      	ldr	r1, [pc, #204]	; (8000f70 <HAL_GPIO_Init+0x2f0>)
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d006      	beq.n	8000ec2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000eb4:	4b2e      	ldr	r3, [pc, #184]	; (8000f70 <HAL_GPIO_Init+0x2f0>)
 8000eb6:	68da      	ldr	r2, [r3, #12]
 8000eb8:	492d      	ldr	r1, [pc, #180]	; (8000f70 <HAL_GPIO_Init+0x2f0>)
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	60cb      	str	r3, [r1, #12]
 8000ec0:	e006      	b.n	8000ed0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ec2:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <HAL_GPIO_Init+0x2f0>)
 8000ec4:	68da      	ldr	r2, [r3, #12]
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	4929      	ldr	r1, [pc, #164]	; (8000f70 <HAL_GPIO_Init+0x2f0>)
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d006      	beq.n	8000eea <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000edc:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <HAL_GPIO_Init+0x2f0>)
 8000ede:	685a      	ldr	r2, [r3, #4]
 8000ee0:	4923      	ldr	r1, [pc, #140]	; (8000f70 <HAL_GPIO_Init+0x2f0>)
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	604b      	str	r3, [r1, #4]
 8000ee8:	e006      	b.n	8000ef8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eea:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <HAL_GPIO_Init+0x2f0>)
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	491f      	ldr	r1, [pc, #124]	; (8000f70 <HAL_GPIO_Init+0x2f0>)
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d006      	beq.n	8000f12 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f04:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <HAL_GPIO_Init+0x2f0>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4919      	ldr	r1, [pc, #100]	; (8000f70 <HAL_GPIO_Init+0x2f0>)
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	600b      	str	r3, [r1, #0]
 8000f10:	e006      	b.n	8000f20 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <HAL_GPIO_Init+0x2f0>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	4915      	ldr	r1, [pc, #84]	; (8000f70 <HAL_GPIO_Init+0x2f0>)
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f22:	3301      	adds	r3, #1
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f47f aeaf 	bne.w	8000c94 <HAL_GPIO_Init+0x14>
  }
}
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
 8000f3a:	372c      	adds	r7, #44	; 0x2c
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	10320000 	.word	0x10320000
 8000f48:	10310000 	.word	0x10310000
 8000f4c:	10220000 	.word	0x10220000
 8000f50:	10210000 	.word	0x10210000
 8000f54:	10120000 	.word	0x10120000
 8000f58:	10110000 	.word	0x10110000
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40010000 	.word	0x40010000
 8000f64:	40010800 	.word	0x40010800
 8000f68:	40010c00 	.word	0x40010c00
 8000f6c:	40011000 	.word	0x40011000
 8000f70:	40010400 	.word	0x40010400

08000f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	807b      	strh	r3, [r7, #2]
 8000f80:	4613      	mov	r3, r2
 8000f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f84:	787b      	ldrb	r3, [r7, #1]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f8a:	887a      	ldrh	r2, [r7, #2]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f90:	e003      	b.n	8000f9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	041a      	lsls	r2, r3, #16
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	611a      	str	r2, [r3, #16]
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fb6:	887a      	ldrh	r2, [r7, #2]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	041a      	lsls	r2, r3, #16
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	43d9      	mvns	r1, r3
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	611a      	str	r2, [r3, #16]
}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
	...

08000fd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e26c      	b.n	80014c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 8087 	beq.w	8001106 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ff8:	4b92      	ldr	r3, [pc, #584]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 030c 	and.w	r3, r3, #12
 8001000:	2b04      	cmp	r3, #4
 8001002:	d00c      	beq.n	800101e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001004:	4b8f      	ldr	r3, [pc, #572]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 030c 	and.w	r3, r3, #12
 800100c:	2b08      	cmp	r3, #8
 800100e:	d112      	bne.n	8001036 <HAL_RCC_OscConfig+0x5e>
 8001010:	4b8c      	ldr	r3, [pc, #560]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800101c:	d10b      	bne.n	8001036 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800101e:	4b89      	ldr	r3, [pc, #548]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d06c      	beq.n	8001104 <HAL_RCC_OscConfig+0x12c>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d168      	bne.n	8001104 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e246      	b.n	80014c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800103e:	d106      	bne.n	800104e <HAL_RCC_OscConfig+0x76>
 8001040:	4b80      	ldr	r3, [pc, #512]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a7f      	ldr	r2, [pc, #508]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	e02e      	b.n	80010ac <HAL_RCC_OscConfig+0xd4>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10c      	bne.n	8001070 <HAL_RCC_OscConfig+0x98>
 8001056:	4b7b      	ldr	r3, [pc, #492]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a7a      	ldr	r2, [pc, #488]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 800105c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	4b78      	ldr	r3, [pc, #480]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a77      	ldr	r2, [pc, #476]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001068:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	e01d      	b.n	80010ac <HAL_RCC_OscConfig+0xd4>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001078:	d10c      	bne.n	8001094 <HAL_RCC_OscConfig+0xbc>
 800107a:	4b72      	ldr	r3, [pc, #456]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a71      	ldr	r2, [pc, #452]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	4b6f      	ldr	r3, [pc, #444]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a6e      	ldr	r2, [pc, #440]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 800108c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	e00b      	b.n	80010ac <HAL_RCC_OscConfig+0xd4>
 8001094:	4b6b      	ldr	r3, [pc, #428]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a6a      	ldr	r2, [pc, #424]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 800109a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	4b68      	ldr	r3, [pc, #416]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a67      	ldr	r2, [pc, #412]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 80010a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d013      	beq.n	80010dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b4:	f7ff fccc 	bl	8000a50 <HAL_GetTick>
 80010b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010bc:	f7ff fcc8 	bl	8000a50 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b64      	cmp	r3, #100	; 0x64
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e1fa      	b.n	80014c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ce:	4b5d      	ldr	r3, [pc, #372]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f0      	beq.n	80010bc <HAL_RCC_OscConfig+0xe4>
 80010da:	e014      	b.n	8001106 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010dc:	f7ff fcb8 	bl	8000a50 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e4:	f7ff fcb4 	bl	8000a50 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b64      	cmp	r3, #100	; 0x64
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e1e6      	b.n	80014c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f6:	4b53      	ldr	r3, [pc, #332]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f0      	bne.n	80010e4 <HAL_RCC_OscConfig+0x10c>
 8001102:	e000      	b.n	8001106 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d063      	beq.n	80011da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001112:	4b4c      	ldr	r3, [pc, #304]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 030c 	and.w	r3, r3, #12
 800111a:	2b00      	cmp	r3, #0
 800111c:	d00b      	beq.n	8001136 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800111e:	4b49      	ldr	r3, [pc, #292]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 030c 	and.w	r3, r3, #12
 8001126:	2b08      	cmp	r3, #8
 8001128:	d11c      	bne.n	8001164 <HAL_RCC_OscConfig+0x18c>
 800112a:	4b46      	ldr	r3, [pc, #280]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d116      	bne.n	8001164 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001136:	4b43      	ldr	r3, [pc, #268]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d005      	beq.n	800114e <HAL_RCC_OscConfig+0x176>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d001      	beq.n	800114e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e1ba      	b.n	80014c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114e:	4b3d      	ldr	r3, [pc, #244]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	4939      	ldr	r1, [pc, #228]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 800115e:	4313      	orrs	r3, r2
 8001160:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001162:	e03a      	b.n	80011da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d020      	beq.n	80011ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800116c:	4b36      	ldr	r3, [pc, #216]	; (8001248 <HAL_RCC_OscConfig+0x270>)
 800116e:	2201      	movs	r2, #1
 8001170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001172:	f7ff fc6d 	bl	8000a50 <HAL_GetTick>
 8001176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800117a:	f7ff fc69 	bl	8000a50 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e19b      	b.n	80014c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800118c:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0f0      	beq.n	800117a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001198:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	4927      	ldr	r1, [pc, #156]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 80011a8:	4313      	orrs	r3, r2
 80011aa:	600b      	str	r3, [r1, #0]
 80011ac:	e015      	b.n	80011da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ae:	4b26      	ldr	r3, [pc, #152]	; (8001248 <HAL_RCC_OscConfig+0x270>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fc4c 	bl	8000a50 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011bc:	f7ff fc48 	bl	8000a50 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e17a      	b.n	80014c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f0      	bne.n	80011bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d03a      	beq.n	800125c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d019      	beq.n	8001222 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <HAL_RCC_OscConfig+0x274>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f4:	f7ff fc2c 	bl	8000a50 <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011fc:	f7ff fc28 	bl	8000a50 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e15a      	b.n	80014c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <HAL_RCC_OscConfig+0x26c>)
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d0f0      	beq.n	80011fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800121a:	2001      	movs	r0, #1
 800121c:	f000 fa9a 	bl	8001754 <RCC_Delay>
 8001220:	e01c      	b.n	800125c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_RCC_OscConfig+0x274>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001228:	f7ff fc12 	bl	8000a50 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800122e:	e00f      	b.n	8001250 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001230:	f7ff fc0e 	bl	8000a50 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d908      	bls.n	8001250 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e140      	b.n	80014c4 <HAL_RCC_OscConfig+0x4ec>
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000
 8001248:	42420000 	.word	0x42420000
 800124c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001250:	4b9e      	ldr	r3, [pc, #632]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 8001252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1e9      	bne.n	8001230 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 80a6 	beq.w	80013b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800126a:	2300      	movs	r3, #0
 800126c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800126e:	4b97      	ldr	r3, [pc, #604]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10d      	bne.n	8001296 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	4b94      	ldr	r3, [pc, #592]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	4a93      	ldr	r2, [pc, #588]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	61d3      	str	r3, [r2, #28]
 8001286:	4b91      	ldr	r3, [pc, #580]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001292:	2301      	movs	r3, #1
 8001294:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001296:	4b8e      	ldr	r3, [pc, #568]	; (80014d0 <HAL_RCC_OscConfig+0x4f8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d118      	bne.n	80012d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012a2:	4b8b      	ldr	r3, [pc, #556]	; (80014d0 <HAL_RCC_OscConfig+0x4f8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a8a      	ldr	r2, [pc, #552]	; (80014d0 <HAL_RCC_OscConfig+0x4f8>)
 80012a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ae:	f7ff fbcf 	bl	8000a50 <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012b6:	f7ff fbcb 	bl	8000a50 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b64      	cmp	r3, #100	; 0x64
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e0fd      	b.n	80014c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c8:	4b81      	ldr	r3, [pc, #516]	; (80014d0 <HAL_RCC_OscConfig+0x4f8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0f0      	beq.n	80012b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d106      	bne.n	80012ea <HAL_RCC_OscConfig+0x312>
 80012dc:	4b7b      	ldr	r3, [pc, #492]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	4a7a      	ldr	r2, [pc, #488]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6213      	str	r3, [r2, #32]
 80012e8:	e02d      	b.n	8001346 <HAL_RCC_OscConfig+0x36e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10c      	bne.n	800130c <HAL_RCC_OscConfig+0x334>
 80012f2:	4b76      	ldr	r3, [pc, #472]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	4a75      	ldr	r2, [pc, #468]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 80012f8:	f023 0301 	bic.w	r3, r3, #1
 80012fc:	6213      	str	r3, [r2, #32]
 80012fe:	4b73      	ldr	r3, [pc, #460]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	4a72      	ldr	r2, [pc, #456]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 8001304:	f023 0304 	bic.w	r3, r3, #4
 8001308:	6213      	str	r3, [r2, #32]
 800130a:	e01c      	b.n	8001346 <HAL_RCC_OscConfig+0x36e>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	2b05      	cmp	r3, #5
 8001312:	d10c      	bne.n	800132e <HAL_RCC_OscConfig+0x356>
 8001314:	4b6d      	ldr	r3, [pc, #436]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	4a6c      	ldr	r2, [pc, #432]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 800131a:	f043 0304 	orr.w	r3, r3, #4
 800131e:	6213      	str	r3, [r2, #32]
 8001320:	4b6a      	ldr	r3, [pc, #424]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	4a69      	ldr	r2, [pc, #420]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6213      	str	r3, [r2, #32]
 800132c:	e00b      	b.n	8001346 <HAL_RCC_OscConfig+0x36e>
 800132e:	4b67      	ldr	r3, [pc, #412]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	4a66      	ldr	r2, [pc, #408]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 8001334:	f023 0301 	bic.w	r3, r3, #1
 8001338:	6213      	str	r3, [r2, #32]
 800133a:	4b64      	ldr	r3, [pc, #400]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	4a63      	ldr	r2, [pc, #396]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 8001340:	f023 0304 	bic.w	r3, r3, #4
 8001344:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d015      	beq.n	800137a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134e:	f7ff fb7f 	bl	8000a50 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001354:	e00a      	b.n	800136c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001356:	f7ff fb7b 	bl	8000a50 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	f241 3288 	movw	r2, #5000	; 0x1388
 8001364:	4293      	cmp	r3, r2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e0ab      	b.n	80014c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800136c:	4b57      	ldr	r3, [pc, #348]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0ee      	beq.n	8001356 <HAL_RCC_OscConfig+0x37e>
 8001378:	e014      	b.n	80013a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137a:	f7ff fb69 	bl	8000a50 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001380:	e00a      	b.n	8001398 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001382:	f7ff fb65 	bl	8000a50 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001390:	4293      	cmp	r3, r2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e095      	b.n	80014c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001398:	4b4c      	ldr	r3, [pc, #304]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1ee      	bne.n	8001382 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d105      	bne.n	80013b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013aa:	4b48      	ldr	r3, [pc, #288]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	4a47      	ldr	r2, [pc, #284]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 80013b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 8081 	beq.w	80014c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013c0:	4b42      	ldr	r3, [pc, #264]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 030c 	and.w	r3, r3, #12
 80013c8:	2b08      	cmp	r3, #8
 80013ca:	d061      	beq.n	8001490 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d146      	bne.n	8001462 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d4:	4b3f      	ldr	r3, [pc, #252]	; (80014d4 <HAL_RCC_OscConfig+0x4fc>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013da:	f7ff fb39 	bl	8000a50 <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e2:	f7ff fb35 	bl	8000a50 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e067      	b.n	80014c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f4:	4b35      	ldr	r3, [pc, #212]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1f0      	bne.n	80013e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001408:	d108      	bne.n	800141c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800140a:	4b30      	ldr	r3, [pc, #192]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	492d      	ldr	r1, [pc, #180]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 8001418:	4313      	orrs	r3, r2
 800141a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800141c:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a19      	ldr	r1, [r3, #32]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142c:	430b      	orrs	r3, r1
 800142e:	4927      	ldr	r1, [pc, #156]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001434:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <HAL_RCC_OscConfig+0x4fc>)
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143a:	f7ff fb09 	bl	8000a50 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001442:	f7ff fb05 	bl	8000a50 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e037      	b.n	80014c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001454:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x46a>
 8001460:	e02f      	b.n	80014c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <HAL_RCC_OscConfig+0x4fc>)
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff faf2 	bl	8000a50 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001470:	f7ff faee 	bl	8000a50 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e020      	b.n	80014c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x498>
 800148e:	e018      	b.n	80014c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d101      	bne.n	800149c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e013      	b.n	80014c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <HAL_RCC_OscConfig+0x4f4>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d106      	bne.n	80014be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d001      	beq.n	80014c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40007000 	.word	0x40007000
 80014d4:	42420060 	.word	0x42420060

080014d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e0d0      	b.n	800168e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014ec:	4b6a      	ldr	r3, [pc, #424]	; (8001698 <HAL_RCC_ClockConfig+0x1c0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d910      	bls.n	800151c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fa:	4b67      	ldr	r3, [pc, #412]	; (8001698 <HAL_RCC_ClockConfig+0x1c0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 0207 	bic.w	r2, r3, #7
 8001502:	4965      	ldr	r1, [pc, #404]	; (8001698 <HAL_RCC_ClockConfig+0x1c0>)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	4313      	orrs	r3, r2
 8001508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800150a:	4b63      	ldr	r3, [pc, #396]	; (8001698 <HAL_RCC_ClockConfig+0x1c0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d001      	beq.n	800151c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e0b8      	b.n	800168e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d020      	beq.n	800156a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d005      	beq.n	8001540 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001534:	4b59      	ldr	r3, [pc, #356]	; (800169c <HAL_RCC_ClockConfig+0x1c4>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	4a58      	ldr	r2, [pc, #352]	; (800169c <HAL_RCC_ClockConfig+0x1c4>)
 800153a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800153e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0308 	and.w	r3, r3, #8
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800154c:	4b53      	ldr	r3, [pc, #332]	; (800169c <HAL_RCC_ClockConfig+0x1c4>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	4a52      	ldr	r2, [pc, #328]	; (800169c <HAL_RCC_ClockConfig+0x1c4>)
 8001552:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001556:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001558:	4b50      	ldr	r3, [pc, #320]	; (800169c <HAL_RCC_ClockConfig+0x1c4>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	494d      	ldr	r1, [pc, #308]	; (800169c <HAL_RCC_ClockConfig+0x1c4>)
 8001566:	4313      	orrs	r3, r2
 8001568:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d040      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d107      	bne.n	800158e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157e:	4b47      	ldr	r3, [pc, #284]	; (800169c <HAL_RCC_ClockConfig+0x1c4>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d115      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e07f      	b.n	800168e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b02      	cmp	r3, #2
 8001594:	d107      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001596:	4b41      	ldr	r3, [pc, #260]	; (800169c <HAL_RCC_ClockConfig+0x1c4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d109      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e073      	b.n	800168e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a6:	4b3d      	ldr	r3, [pc, #244]	; (800169c <HAL_RCC_ClockConfig+0x1c4>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e06b      	b.n	800168e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015b6:	4b39      	ldr	r3, [pc, #228]	; (800169c <HAL_RCC_ClockConfig+0x1c4>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f023 0203 	bic.w	r2, r3, #3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	4936      	ldr	r1, [pc, #216]	; (800169c <HAL_RCC_ClockConfig+0x1c4>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015c8:	f7ff fa42 	bl	8000a50 <HAL_GetTick>
 80015cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ce:	e00a      	b.n	80015e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d0:	f7ff fa3e 	bl	8000a50 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	f241 3288 	movw	r2, #5000	; 0x1388
 80015de:	4293      	cmp	r3, r2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e053      	b.n	800168e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015e6:	4b2d      	ldr	r3, [pc, #180]	; (800169c <HAL_RCC_ClockConfig+0x1c4>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 020c 	and.w	r2, r3, #12
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d1eb      	bne.n	80015d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015f8:	4b27      	ldr	r3, [pc, #156]	; (8001698 <HAL_RCC_ClockConfig+0x1c0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d210      	bcs.n	8001628 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001606:	4b24      	ldr	r3, [pc, #144]	; (8001698 <HAL_RCC_ClockConfig+0x1c0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f023 0207 	bic.w	r2, r3, #7
 800160e:	4922      	ldr	r1, [pc, #136]	; (8001698 <HAL_RCC_ClockConfig+0x1c0>)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	4313      	orrs	r3, r2
 8001614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <HAL_RCC_ClockConfig+0x1c0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d001      	beq.n	8001628 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e032      	b.n	800168e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	d008      	beq.n	8001646 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <HAL_RCC_ClockConfig+0x1c4>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	4916      	ldr	r1, [pc, #88]	; (800169c <HAL_RCC_ClockConfig+0x1c4>)
 8001642:	4313      	orrs	r3, r2
 8001644:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d009      	beq.n	8001666 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001652:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_RCC_ClockConfig+0x1c4>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	490e      	ldr	r1, [pc, #56]	; (800169c <HAL_RCC_ClockConfig+0x1c4>)
 8001662:	4313      	orrs	r3, r2
 8001664:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001666:	f000 f821 	bl	80016ac <HAL_RCC_GetSysClockFreq>
 800166a:	4602      	mov	r2, r0
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <HAL_RCC_ClockConfig+0x1c4>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	091b      	lsrs	r3, r3, #4
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	490a      	ldr	r1, [pc, #40]	; (80016a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001678:	5ccb      	ldrb	r3, [r1, r3]
 800167a:	fa22 f303 	lsr.w	r3, r2, r3
 800167e:	4a09      	ldr	r2, [pc, #36]	; (80016a4 <HAL_RCC_ClockConfig+0x1cc>)
 8001680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_RCC_ClockConfig+0x1d0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff f9a0 	bl	80009cc <HAL_InitTick>

  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40022000 	.word	0x40022000
 800169c:	40021000 	.word	0x40021000
 80016a0:	08002e90 	.word	0x08002e90
 80016a4:	20000000 	.word	0x20000000
 80016a8:	20000004 	.word	0x20000004

080016ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b087      	sub	sp, #28
 80016b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016c6:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <HAL_RCC_GetSysClockFreq+0x94>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d002      	beq.n	80016dc <HAL_RCC_GetSysClockFreq+0x30>
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d003      	beq.n	80016e2 <HAL_RCC_GetSysClockFreq+0x36>
 80016da:	e027      	b.n	800172c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_RCC_GetSysClockFreq+0x98>)
 80016de:	613b      	str	r3, [r7, #16]
      break;
 80016e0:	e027      	b.n	8001732 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	0c9b      	lsrs	r3, r3, #18
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	4a17      	ldr	r2, [pc, #92]	; (8001748 <HAL_RCC_GetSysClockFreq+0x9c>)
 80016ec:	5cd3      	ldrb	r3, [r2, r3]
 80016ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d010      	beq.n	800171c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016fa:	4b11      	ldr	r3, [pc, #68]	; (8001740 <HAL_RCC_GetSysClockFreq+0x94>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	0c5b      	lsrs	r3, r3, #17
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	4a11      	ldr	r2, [pc, #68]	; (800174c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001706:	5cd3      	ldrb	r3, [r2, r3]
 8001708:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a0d      	ldr	r2, [pc, #52]	; (8001744 <HAL_RCC_GetSysClockFreq+0x98>)
 800170e:	fb02 f203 	mul.w	r2, r2, r3
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	fbb2 f3f3 	udiv	r3, r2, r3
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	e004      	b.n	8001726 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a0c      	ldr	r2, [pc, #48]	; (8001750 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001720:	fb02 f303 	mul.w	r3, r2, r3
 8001724:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	613b      	str	r3, [r7, #16]
      break;
 800172a:	e002      	b.n	8001732 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_RCC_GetSysClockFreq+0x98>)
 800172e:	613b      	str	r3, [r7, #16]
      break;
 8001730:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001732:	693b      	ldr	r3, [r7, #16]
}
 8001734:	4618      	mov	r0, r3
 8001736:	371c      	adds	r7, #28
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000
 8001744:	007a1200 	.word	0x007a1200
 8001748:	08002ea0 	.word	0x08002ea0
 800174c:	08002eb0 	.word	0x08002eb0
 8001750:	003d0900 	.word	0x003d0900

08001754 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <RCC_Delay+0x34>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0a      	ldr	r2, [pc, #40]	; (800178c <RCC_Delay+0x38>)
 8001762:	fba2 2303 	umull	r2, r3, r2, r3
 8001766:	0a5b      	lsrs	r3, r3, #9
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	fb02 f303 	mul.w	r3, r2, r3
 800176e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001770:	bf00      	nop
  }
  while (Delay --);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1e5a      	subs	r2, r3, #1
 8001776:	60fa      	str	r2, [r7, #12]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1f9      	bne.n	8001770 <RCC_Delay+0x1c>
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	20000000 	.word	0x20000000
 800178c:	10624dd3 	.word	0x10624dd3

08001790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e041      	b.n	8001826 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d106      	bne.n	80017bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7fe ffd0 	bl	800075c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2202      	movs	r2, #2
 80017c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3304      	adds	r3, #4
 80017cc:	4619      	mov	r1, r3
 80017ce:	4610      	mov	r0, r2
 80017d0:	f000 fa56 	bl	8001c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b01      	cmp	r3, #1
 8001842:	d001      	beq.n	8001848 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e035      	b.n	80018b4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2202      	movs	r2, #2
 800184c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0201 	orr.w	r2, r2, #1
 800185e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a16      	ldr	r2, [pc, #88]	; (80018c0 <HAL_TIM_Base_Start_IT+0x90>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d009      	beq.n	800187e <HAL_TIM_Base_Start_IT+0x4e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001872:	d004      	beq.n	800187e <HAL_TIM_Base_Start_IT+0x4e>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <HAL_TIM_Base_Start_IT+0x94>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d111      	bne.n	80018a2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2b06      	cmp	r3, #6
 800188e:	d010      	beq.n	80018b2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f042 0201 	orr.w	r2, r2, #1
 800189e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018a0:	e007      	b.n	80018b2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 0201 	orr.w	r2, r2, #1
 80018b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40012c00 	.word	0x40012c00
 80018c4:	40000400 	.word	0x40000400

080018c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d020      	beq.n	800192c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d01b      	beq.n	800192c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f06f 0202 	mvn.w	r2, #2
 80018fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f998 	bl	8001c48 <HAL_TIM_IC_CaptureCallback>
 8001918:	e005      	b.n	8001926 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f98b 	bl	8001c36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f99a 	bl	8001c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	2b00      	cmp	r3, #0
 8001934:	d020      	beq.n	8001978 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	d01b      	beq.n	8001978 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f06f 0204 	mvn.w	r2, #4
 8001948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2202      	movs	r2, #2
 800194e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f972 	bl	8001c48 <HAL_TIM_IC_CaptureCallback>
 8001964:	e005      	b.n	8001972 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 f965 	bl	8001c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 f974 	bl	8001c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	2b00      	cmp	r3, #0
 8001980:	d020      	beq.n	80019c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b00      	cmp	r3, #0
 800198a:	d01b      	beq.n	80019c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f06f 0208 	mvn.w	r2, #8
 8001994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2204      	movs	r2, #4
 800199a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f94c 	bl	8001c48 <HAL_TIM_IC_CaptureCallback>
 80019b0:	e005      	b.n	80019be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f93f 	bl	8001c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 f94e 	bl	8001c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	f003 0310 	and.w	r3, r3, #16
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d020      	beq.n	8001a10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f003 0310 	and.w	r3, r3, #16
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d01b      	beq.n	8001a10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f06f 0210 	mvn.w	r2, #16
 80019e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2208      	movs	r2, #8
 80019e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f926 	bl	8001c48 <HAL_TIM_IC_CaptureCallback>
 80019fc:	e005      	b.n	8001a0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f919 	bl	8001c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f928 	bl	8001c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00c      	beq.n	8001a34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d007      	beq.n	8001a34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f06f 0201 	mvn.w	r2, #1
 8001a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7fe fe52 	bl	80006d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00c      	beq.n	8001a58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d007      	beq.n	8001a58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 fa6f 	bl	8001f36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00c      	beq.n	8001a7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d007      	beq.n	8001a7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 f8f8 	bl	8001c6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	f003 0320 	and.w	r3, r3, #32
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00c      	beq.n	8001aa0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f003 0320 	and.w	r3, r3, #32
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d007      	beq.n	8001aa0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f06f 0220 	mvn.w	r2, #32
 8001a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 fa42 	bl	8001f24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d101      	bne.n	8001ac4 <HAL_TIM_ConfigClockSource+0x1c>
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	e0b4      	b.n	8001c2e <HAL_TIM_ConfigClockSource+0x186>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001ae2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001aea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001afc:	d03e      	beq.n	8001b7c <HAL_TIM_ConfigClockSource+0xd4>
 8001afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b02:	f200 8087 	bhi.w	8001c14 <HAL_TIM_ConfigClockSource+0x16c>
 8001b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b0a:	f000 8086 	beq.w	8001c1a <HAL_TIM_ConfigClockSource+0x172>
 8001b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b12:	d87f      	bhi.n	8001c14 <HAL_TIM_ConfigClockSource+0x16c>
 8001b14:	2b70      	cmp	r3, #112	; 0x70
 8001b16:	d01a      	beq.n	8001b4e <HAL_TIM_ConfigClockSource+0xa6>
 8001b18:	2b70      	cmp	r3, #112	; 0x70
 8001b1a:	d87b      	bhi.n	8001c14 <HAL_TIM_ConfigClockSource+0x16c>
 8001b1c:	2b60      	cmp	r3, #96	; 0x60
 8001b1e:	d050      	beq.n	8001bc2 <HAL_TIM_ConfigClockSource+0x11a>
 8001b20:	2b60      	cmp	r3, #96	; 0x60
 8001b22:	d877      	bhi.n	8001c14 <HAL_TIM_ConfigClockSource+0x16c>
 8001b24:	2b50      	cmp	r3, #80	; 0x50
 8001b26:	d03c      	beq.n	8001ba2 <HAL_TIM_ConfigClockSource+0xfa>
 8001b28:	2b50      	cmp	r3, #80	; 0x50
 8001b2a:	d873      	bhi.n	8001c14 <HAL_TIM_ConfigClockSource+0x16c>
 8001b2c:	2b40      	cmp	r3, #64	; 0x40
 8001b2e:	d058      	beq.n	8001be2 <HAL_TIM_ConfigClockSource+0x13a>
 8001b30:	2b40      	cmp	r3, #64	; 0x40
 8001b32:	d86f      	bhi.n	8001c14 <HAL_TIM_ConfigClockSource+0x16c>
 8001b34:	2b30      	cmp	r3, #48	; 0x30
 8001b36:	d064      	beq.n	8001c02 <HAL_TIM_ConfigClockSource+0x15a>
 8001b38:	2b30      	cmp	r3, #48	; 0x30
 8001b3a:	d86b      	bhi.n	8001c14 <HAL_TIM_ConfigClockSource+0x16c>
 8001b3c:	2b20      	cmp	r3, #32
 8001b3e:	d060      	beq.n	8001c02 <HAL_TIM_ConfigClockSource+0x15a>
 8001b40:	2b20      	cmp	r3, #32
 8001b42:	d867      	bhi.n	8001c14 <HAL_TIM_ConfigClockSource+0x16c>
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d05c      	beq.n	8001c02 <HAL_TIM_ConfigClockSource+0x15a>
 8001b48:	2b10      	cmp	r3, #16
 8001b4a:	d05a      	beq.n	8001c02 <HAL_TIM_ConfigClockSource+0x15a>
 8001b4c:	e062      	b.n	8001c14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	6899      	ldr	r1, [r3, #8]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	f000 f96a 	bl	8001e36 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001b70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	609a      	str	r2, [r3, #8]
      break;
 8001b7a:	e04f      	b.n	8001c1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6818      	ldr	r0, [r3, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	6899      	ldr	r1, [r3, #8]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f000 f953 	bl	8001e36 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b9e:	609a      	str	r2, [r3, #8]
      break;
 8001ba0:	e03c      	b.n	8001c1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	6859      	ldr	r1, [r3, #4]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f000 f8ca 	bl	8001d48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2150      	movs	r1, #80	; 0x50
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 f921 	bl	8001e02 <TIM_ITRx_SetConfig>
      break;
 8001bc0:	e02c      	b.n	8001c1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	6859      	ldr	r1, [r3, #4]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f000 f8e8 	bl	8001da4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2160      	movs	r1, #96	; 0x60
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f911 	bl	8001e02 <TIM_ITRx_SetConfig>
      break;
 8001be0:	e01c      	b.n	8001c1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	6859      	ldr	r1, [r3, #4]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	f000 f8aa 	bl	8001d48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2140      	movs	r1, #64	; 0x40
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f901 	bl	8001e02 <TIM_ITRx_SetConfig>
      break;
 8001c00:	e00c      	b.n	8001c1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	f000 f8f8 	bl	8001e02 <TIM_ITRx_SetConfig>
      break;
 8001c12:	e003      	b.n	8001c1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
      break;
 8001c18:	e000      	b.n	8001c1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001c1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr

08001c5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
	...

08001c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a2b      	ldr	r2, [pc, #172]	; (8001d40 <TIM_Base_SetConfig+0xc0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d007      	beq.n	8001ca8 <TIM_Base_SetConfig+0x28>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c9e:	d003      	beq.n	8001ca8 <TIM_Base_SetConfig+0x28>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a28      	ldr	r2, [pc, #160]	; (8001d44 <TIM_Base_SetConfig+0xc4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d108      	bne.n	8001cba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a20      	ldr	r2, [pc, #128]	; (8001d40 <TIM_Base_SetConfig+0xc0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d007      	beq.n	8001cd2 <TIM_Base_SetConfig+0x52>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc8:	d003      	beq.n	8001cd2 <TIM_Base_SetConfig+0x52>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a1d      	ldr	r2, [pc, #116]	; (8001d44 <TIM_Base_SetConfig+0xc4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d108      	bne.n	8001ce4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a0d      	ldr	r2, [pc, #52]	; (8001d40 <TIM_Base_SetConfig+0xc0>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d103      	bne.n	8001d18 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	f023 0201 	bic.w	r2, r3, #1
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	611a      	str	r2, [r3, #16]
  }
}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	40012c00 	.word	0x40012c00
 8001d44:	40000400 	.word	0x40000400

08001d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b087      	sub	sp, #28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	f023 0201 	bic.w	r2, r3, #1
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f023 030a 	bic.w	r3, r3, #10
 8001d84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	621a      	str	r2, [r3, #32]
}
 8001d9a:	bf00      	nop
 8001d9c:	371c      	adds	r7, #28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b087      	sub	sp, #28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	f023 0210 	bic.w	r2, r3, #16
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	031b      	lsls	r3, r3, #12
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001de0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	621a      	str	r2, [r3, #32]
}
 8001df8:	bf00      	nop
 8001dfa:	371c      	adds	r7, #28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr

08001e02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b085      	sub	sp, #20
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	f043 0307 	orr.w	r3, r3, #7
 8001e24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	609a      	str	r2, [r3, #8]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr

08001e36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b087      	sub	sp, #28
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	021a      	lsls	r2, r3, #8
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	609a      	str	r2, [r3, #8]
}
 8001e6a:	bf00      	nop
 8001e6c:	371c      	adds	r7, #28
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e041      	b.n	8001f10 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a14      	ldr	r2, [pc, #80]	; (8001f1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d009      	beq.n	8001ee4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed8:	d004      	beq.n	8001ee4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a10      	ldr	r2, [pc, #64]	; (8001f20 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d10c      	bne.n	8001efe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001eea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40012c00 	.word	0x40012c00
 8001f20:	40000400 	.word	0x40000400

08001f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr

08001f36 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <__errno>:
 8001f48:	4b01      	ldr	r3, [pc, #4]	; (8001f50 <__errno+0x8>)
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	2000000c 	.word	0x2000000c

08001f54 <__libc_init_array>:
 8001f54:	b570      	push	{r4, r5, r6, lr}
 8001f56:	2600      	movs	r6, #0
 8001f58:	4d0c      	ldr	r5, [pc, #48]	; (8001f8c <__libc_init_array+0x38>)
 8001f5a:	4c0d      	ldr	r4, [pc, #52]	; (8001f90 <__libc_init_array+0x3c>)
 8001f5c:	1b64      	subs	r4, r4, r5
 8001f5e:	10a4      	asrs	r4, r4, #2
 8001f60:	42a6      	cmp	r6, r4
 8001f62:	d109      	bne.n	8001f78 <__libc_init_array+0x24>
 8001f64:	f000 ff82 	bl	8002e6c <_init>
 8001f68:	2600      	movs	r6, #0
 8001f6a:	4d0a      	ldr	r5, [pc, #40]	; (8001f94 <__libc_init_array+0x40>)
 8001f6c:	4c0a      	ldr	r4, [pc, #40]	; (8001f98 <__libc_init_array+0x44>)
 8001f6e:	1b64      	subs	r4, r4, r5
 8001f70:	10a4      	asrs	r4, r4, #2
 8001f72:	42a6      	cmp	r6, r4
 8001f74:	d105      	bne.n	8001f82 <__libc_init_array+0x2e>
 8001f76:	bd70      	pop	{r4, r5, r6, pc}
 8001f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f7c:	4798      	blx	r3
 8001f7e:	3601      	adds	r6, #1
 8001f80:	e7ee      	b.n	8001f60 <__libc_init_array+0xc>
 8001f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f86:	4798      	blx	r3
 8001f88:	3601      	adds	r6, #1
 8001f8a:	e7f2      	b.n	8001f72 <__libc_init_array+0x1e>
 8001f8c:	08002f4c 	.word	0x08002f4c
 8001f90:	08002f4c 	.word	0x08002f4c
 8001f94:	08002f4c 	.word	0x08002f4c
 8001f98:	08002f50 	.word	0x08002f50

08001f9c <memset>:
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	4402      	add	r2, r0
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d100      	bne.n	8001fa6 <memset+0xa>
 8001fa4:	4770      	bx	lr
 8001fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8001faa:	e7f9      	b.n	8001fa0 <memset+0x4>

08001fac <iprintf>:
 8001fac:	b40f      	push	{r0, r1, r2, r3}
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <iprintf+0x2c>)
 8001fb0:	b513      	push	{r0, r1, r4, lr}
 8001fb2:	681c      	ldr	r4, [r3, #0]
 8001fb4:	b124      	cbz	r4, 8001fc0 <iprintf+0x14>
 8001fb6:	69a3      	ldr	r3, [r4, #24]
 8001fb8:	b913      	cbnz	r3, 8001fc0 <iprintf+0x14>
 8001fba:	4620      	mov	r0, r4
 8001fbc:	f000 f866 	bl	800208c <__sinit>
 8001fc0:	ab05      	add	r3, sp, #20
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	9a04      	ldr	r2, [sp, #16]
 8001fc6:	68a1      	ldr	r1, [r4, #8]
 8001fc8:	9301      	str	r3, [sp, #4]
 8001fca:	f000 f981 	bl	80022d0 <_vfiprintf_r>
 8001fce:	b002      	add	sp, #8
 8001fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fd4:	b004      	add	sp, #16
 8001fd6:	4770      	bx	lr
 8001fd8:	2000000c 	.word	0x2000000c

08001fdc <std>:
 8001fdc:	2300      	movs	r3, #0
 8001fde:	b510      	push	{r4, lr}
 8001fe0:	4604      	mov	r4, r0
 8001fe2:	e9c0 3300 	strd	r3, r3, [r0]
 8001fe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001fea:	6083      	str	r3, [r0, #8]
 8001fec:	8181      	strh	r1, [r0, #12]
 8001fee:	6643      	str	r3, [r0, #100]	; 0x64
 8001ff0:	81c2      	strh	r2, [r0, #14]
 8001ff2:	6183      	str	r3, [r0, #24]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	2208      	movs	r2, #8
 8001ff8:	305c      	adds	r0, #92	; 0x5c
 8001ffa:	f7ff ffcf 	bl	8001f9c <memset>
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <std+0x38>)
 8002000:	6224      	str	r4, [r4, #32]
 8002002:	6263      	str	r3, [r4, #36]	; 0x24
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <std+0x3c>)
 8002006:	62a3      	str	r3, [r4, #40]	; 0x28
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <std+0x40>)
 800200a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800200c:	4b04      	ldr	r3, [pc, #16]	; (8002020 <std+0x44>)
 800200e:	6323      	str	r3, [r4, #48]	; 0x30
 8002010:	bd10      	pop	{r4, pc}
 8002012:	bf00      	nop
 8002014:	0800287d 	.word	0x0800287d
 8002018:	0800289f 	.word	0x0800289f
 800201c:	080028d7 	.word	0x080028d7
 8002020:	080028fb 	.word	0x080028fb

08002024 <_cleanup_r>:
 8002024:	4901      	ldr	r1, [pc, #4]	; (800202c <_cleanup_r+0x8>)
 8002026:	f000 b8af 	b.w	8002188 <_fwalk_reent>
 800202a:	bf00      	nop
 800202c:	08002bd5 	.word	0x08002bd5

08002030 <__sfmoreglue>:
 8002030:	b570      	push	{r4, r5, r6, lr}
 8002032:	2568      	movs	r5, #104	; 0x68
 8002034:	1e4a      	subs	r2, r1, #1
 8002036:	4355      	muls	r5, r2
 8002038:	460e      	mov	r6, r1
 800203a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800203e:	f000 f8c5 	bl	80021cc <_malloc_r>
 8002042:	4604      	mov	r4, r0
 8002044:	b140      	cbz	r0, 8002058 <__sfmoreglue+0x28>
 8002046:	2100      	movs	r1, #0
 8002048:	e9c0 1600 	strd	r1, r6, [r0]
 800204c:	300c      	adds	r0, #12
 800204e:	60a0      	str	r0, [r4, #8]
 8002050:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002054:	f7ff ffa2 	bl	8001f9c <memset>
 8002058:	4620      	mov	r0, r4
 800205a:	bd70      	pop	{r4, r5, r6, pc}

0800205c <__sfp_lock_acquire>:
 800205c:	4801      	ldr	r0, [pc, #4]	; (8002064 <__sfp_lock_acquire+0x8>)
 800205e:	f000 b8b3 	b.w	80021c8 <__retarget_lock_acquire_recursive>
 8002062:	bf00      	nop
 8002064:	20000410 	.word	0x20000410

08002068 <__sfp_lock_release>:
 8002068:	4801      	ldr	r0, [pc, #4]	; (8002070 <__sfp_lock_release+0x8>)
 800206a:	f000 b8ae 	b.w	80021ca <__retarget_lock_release_recursive>
 800206e:	bf00      	nop
 8002070:	20000410 	.word	0x20000410

08002074 <__sinit_lock_acquire>:
 8002074:	4801      	ldr	r0, [pc, #4]	; (800207c <__sinit_lock_acquire+0x8>)
 8002076:	f000 b8a7 	b.w	80021c8 <__retarget_lock_acquire_recursive>
 800207a:	bf00      	nop
 800207c:	2000040b 	.word	0x2000040b

08002080 <__sinit_lock_release>:
 8002080:	4801      	ldr	r0, [pc, #4]	; (8002088 <__sinit_lock_release+0x8>)
 8002082:	f000 b8a2 	b.w	80021ca <__retarget_lock_release_recursive>
 8002086:	bf00      	nop
 8002088:	2000040b 	.word	0x2000040b

0800208c <__sinit>:
 800208c:	b510      	push	{r4, lr}
 800208e:	4604      	mov	r4, r0
 8002090:	f7ff fff0 	bl	8002074 <__sinit_lock_acquire>
 8002094:	69a3      	ldr	r3, [r4, #24]
 8002096:	b11b      	cbz	r3, 80020a0 <__sinit+0x14>
 8002098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800209c:	f7ff bff0 	b.w	8002080 <__sinit_lock_release>
 80020a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80020a4:	6523      	str	r3, [r4, #80]	; 0x50
 80020a6:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <__sinit+0x68>)
 80020a8:	4a13      	ldr	r2, [pc, #76]	; (80020f8 <__sinit+0x6c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80020ae:	42a3      	cmp	r3, r4
 80020b0:	bf08      	it	eq
 80020b2:	2301      	moveq	r3, #1
 80020b4:	4620      	mov	r0, r4
 80020b6:	bf08      	it	eq
 80020b8:	61a3      	streq	r3, [r4, #24]
 80020ba:	f000 f81f 	bl	80020fc <__sfp>
 80020be:	6060      	str	r0, [r4, #4]
 80020c0:	4620      	mov	r0, r4
 80020c2:	f000 f81b 	bl	80020fc <__sfp>
 80020c6:	60a0      	str	r0, [r4, #8]
 80020c8:	4620      	mov	r0, r4
 80020ca:	f000 f817 	bl	80020fc <__sfp>
 80020ce:	2200      	movs	r2, #0
 80020d0:	2104      	movs	r1, #4
 80020d2:	60e0      	str	r0, [r4, #12]
 80020d4:	6860      	ldr	r0, [r4, #4]
 80020d6:	f7ff ff81 	bl	8001fdc <std>
 80020da:	2201      	movs	r2, #1
 80020dc:	2109      	movs	r1, #9
 80020de:	68a0      	ldr	r0, [r4, #8]
 80020e0:	f7ff ff7c 	bl	8001fdc <std>
 80020e4:	2202      	movs	r2, #2
 80020e6:	2112      	movs	r1, #18
 80020e8:	68e0      	ldr	r0, [r4, #12]
 80020ea:	f7ff ff77 	bl	8001fdc <std>
 80020ee:	2301      	movs	r3, #1
 80020f0:	61a3      	str	r3, [r4, #24]
 80020f2:	e7d1      	b.n	8002098 <__sinit+0xc>
 80020f4:	08002eb4 	.word	0x08002eb4
 80020f8:	08002025 	.word	0x08002025

080020fc <__sfp>:
 80020fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fe:	4607      	mov	r7, r0
 8002100:	f7ff ffac 	bl	800205c <__sfp_lock_acquire>
 8002104:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <__sfp+0x84>)
 8002106:	681e      	ldr	r6, [r3, #0]
 8002108:	69b3      	ldr	r3, [r6, #24]
 800210a:	b913      	cbnz	r3, 8002112 <__sfp+0x16>
 800210c:	4630      	mov	r0, r6
 800210e:	f7ff ffbd 	bl	800208c <__sinit>
 8002112:	3648      	adds	r6, #72	; 0x48
 8002114:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002118:	3b01      	subs	r3, #1
 800211a:	d503      	bpl.n	8002124 <__sfp+0x28>
 800211c:	6833      	ldr	r3, [r6, #0]
 800211e:	b30b      	cbz	r3, 8002164 <__sfp+0x68>
 8002120:	6836      	ldr	r6, [r6, #0]
 8002122:	e7f7      	b.n	8002114 <__sfp+0x18>
 8002124:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002128:	b9d5      	cbnz	r5, 8002160 <__sfp+0x64>
 800212a:	4b16      	ldr	r3, [pc, #88]	; (8002184 <__sfp+0x88>)
 800212c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002130:	60e3      	str	r3, [r4, #12]
 8002132:	6665      	str	r5, [r4, #100]	; 0x64
 8002134:	f000 f847 	bl	80021c6 <__retarget_lock_init_recursive>
 8002138:	f7ff ff96 	bl	8002068 <__sfp_lock_release>
 800213c:	2208      	movs	r2, #8
 800213e:	4629      	mov	r1, r5
 8002140:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002144:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002148:	6025      	str	r5, [r4, #0]
 800214a:	61a5      	str	r5, [r4, #24]
 800214c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002150:	f7ff ff24 	bl	8001f9c <memset>
 8002154:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002158:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800215c:	4620      	mov	r0, r4
 800215e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002160:	3468      	adds	r4, #104	; 0x68
 8002162:	e7d9      	b.n	8002118 <__sfp+0x1c>
 8002164:	2104      	movs	r1, #4
 8002166:	4638      	mov	r0, r7
 8002168:	f7ff ff62 	bl	8002030 <__sfmoreglue>
 800216c:	4604      	mov	r4, r0
 800216e:	6030      	str	r0, [r6, #0]
 8002170:	2800      	cmp	r0, #0
 8002172:	d1d5      	bne.n	8002120 <__sfp+0x24>
 8002174:	f7ff ff78 	bl	8002068 <__sfp_lock_release>
 8002178:	230c      	movs	r3, #12
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	e7ee      	b.n	800215c <__sfp+0x60>
 800217e:	bf00      	nop
 8002180:	08002eb4 	.word	0x08002eb4
 8002184:	ffff0001 	.word	0xffff0001

08002188 <_fwalk_reent>:
 8002188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800218c:	4606      	mov	r6, r0
 800218e:	4688      	mov	r8, r1
 8002190:	2700      	movs	r7, #0
 8002192:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002196:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800219a:	f1b9 0901 	subs.w	r9, r9, #1
 800219e:	d505      	bpl.n	80021ac <_fwalk_reent+0x24>
 80021a0:	6824      	ldr	r4, [r4, #0]
 80021a2:	2c00      	cmp	r4, #0
 80021a4:	d1f7      	bne.n	8002196 <_fwalk_reent+0xe>
 80021a6:	4638      	mov	r0, r7
 80021a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021ac:	89ab      	ldrh	r3, [r5, #12]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d907      	bls.n	80021c2 <_fwalk_reent+0x3a>
 80021b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80021b6:	3301      	adds	r3, #1
 80021b8:	d003      	beq.n	80021c2 <_fwalk_reent+0x3a>
 80021ba:	4629      	mov	r1, r5
 80021bc:	4630      	mov	r0, r6
 80021be:	47c0      	blx	r8
 80021c0:	4307      	orrs	r7, r0
 80021c2:	3568      	adds	r5, #104	; 0x68
 80021c4:	e7e9      	b.n	800219a <_fwalk_reent+0x12>

080021c6 <__retarget_lock_init_recursive>:
 80021c6:	4770      	bx	lr

080021c8 <__retarget_lock_acquire_recursive>:
 80021c8:	4770      	bx	lr

080021ca <__retarget_lock_release_recursive>:
 80021ca:	4770      	bx	lr

080021cc <_malloc_r>:
 80021cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ce:	1ccd      	adds	r5, r1, #3
 80021d0:	f025 0503 	bic.w	r5, r5, #3
 80021d4:	3508      	adds	r5, #8
 80021d6:	2d0c      	cmp	r5, #12
 80021d8:	bf38      	it	cc
 80021da:	250c      	movcc	r5, #12
 80021dc:	2d00      	cmp	r5, #0
 80021de:	4606      	mov	r6, r0
 80021e0:	db01      	blt.n	80021e6 <_malloc_r+0x1a>
 80021e2:	42a9      	cmp	r1, r5
 80021e4:	d903      	bls.n	80021ee <_malloc_r+0x22>
 80021e6:	230c      	movs	r3, #12
 80021e8:	6033      	str	r3, [r6, #0]
 80021ea:	2000      	movs	r0, #0
 80021ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021ee:	f000 fdb1 	bl	8002d54 <__malloc_lock>
 80021f2:	4921      	ldr	r1, [pc, #132]	; (8002278 <_malloc_r+0xac>)
 80021f4:	680a      	ldr	r2, [r1, #0]
 80021f6:	4614      	mov	r4, r2
 80021f8:	b99c      	cbnz	r4, 8002222 <_malloc_r+0x56>
 80021fa:	4f20      	ldr	r7, [pc, #128]	; (800227c <_malloc_r+0xb0>)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	b923      	cbnz	r3, 800220a <_malloc_r+0x3e>
 8002200:	4621      	mov	r1, r4
 8002202:	4630      	mov	r0, r6
 8002204:	f000 fb2a 	bl	800285c <_sbrk_r>
 8002208:	6038      	str	r0, [r7, #0]
 800220a:	4629      	mov	r1, r5
 800220c:	4630      	mov	r0, r6
 800220e:	f000 fb25 	bl	800285c <_sbrk_r>
 8002212:	1c43      	adds	r3, r0, #1
 8002214:	d123      	bne.n	800225e <_malloc_r+0x92>
 8002216:	230c      	movs	r3, #12
 8002218:	4630      	mov	r0, r6
 800221a:	6033      	str	r3, [r6, #0]
 800221c:	f000 fda0 	bl	8002d60 <__malloc_unlock>
 8002220:	e7e3      	b.n	80021ea <_malloc_r+0x1e>
 8002222:	6823      	ldr	r3, [r4, #0]
 8002224:	1b5b      	subs	r3, r3, r5
 8002226:	d417      	bmi.n	8002258 <_malloc_r+0x8c>
 8002228:	2b0b      	cmp	r3, #11
 800222a:	d903      	bls.n	8002234 <_malloc_r+0x68>
 800222c:	6023      	str	r3, [r4, #0]
 800222e:	441c      	add	r4, r3
 8002230:	6025      	str	r5, [r4, #0]
 8002232:	e004      	b.n	800223e <_malloc_r+0x72>
 8002234:	6863      	ldr	r3, [r4, #4]
 8002236:	42a2      	cmp	r2, r4
 8002238:	bf0c      	ite	eq
 800223a:	600b      	streq	r3, [r1, #0]
 800223c:	6053      	strne	r3, [r2, #4]
 800223e:	4630      	mov	r0, r6
 8002240:	f000 fd8e 	bl	8002d60 <__malloc_unlock>
 8002244:	f104 000b 	add.w	r0, r4, #11
 8002248:	1d23      	adds	r3, r4, #4
 800224a:	f020 0007 	bic.w	r0, r0, #7
 800224e:	1ac2      	subs	r2, r0, r3
 8002250:	d0cc      	beq.n	80021ec <_malloc_r+0x20>
 8002252:	1a1b      	subs	r3, r3, r0
 8002254:	50a3      	str	r3, [r4, r2]
 8002256:	e7c9      	b.n	80021ec <_malloc_r+0x20>
 8002258:	4622      	mov	r2, r4
 800225a:	6864      	ldr	r4, [r4, #4]
 800225c:	e7cc      	b.n	80021f8 <_malloc_r+0x2c>
 800225e:	1cc4      	adds	r4, r0, #3
 8002260:	f024 0403 	bic.w	r4, r4, #3
 8002264:	42a0      	cmp	r0, r4
 8002266:	d0e3      	beq.n	8002230 <_malloc_r+0x64>
 8002268:	1a21      	subs	r1, r4, r0
 800226a:	4630      	mov	r0, r6
 800226c:	f000 faf6 	bl	800285c <_sbrk_r>
 8002270:	3001      	adds	r0, #1
 8002272:	d1dd      	bne.n	8002230 <_malloc_r+0x64>
 8002274:	e7cf      	b.n	8002216 <_malloc_r+0x4a>
 8002276:	bf00      	nop
 8002278:	20000094 	.word	0x20000094
 800227c:	20000098 	.word	0x20000098

08002280 <__sfputc_r>:
 8002280:	6893      	ldr	r3, [r2, #8]
 8002282:	b410      	push	{r4}
 8002284:	3b01      	subs	r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	6093      	str	r3, [r2, #8]
 800228a:	da07      	bge.n	800229c <__sfputc_r+0x1c>
 800228c:	6994      	ldr	r4, [r2, #24]
 800228e:	42a3      	cmp	r3, r4
 8002290:	db01      	blt.n	8002296 <__sfputc_r+0x16>
 8002292:	290a      	cmp	r1, #10
 8002294:	d102      	bne.n	800229c <__sfputc_r+0x1c>
 8002296:	bc10      	pop	{r4}
 8002298:	f000 bb34 	b.w	8002904 <__swbuf_r>
 800229c:	6813      	ldr	r3, [r2, #0]
 800229e:	1c58      	adds	r0, r3, #1
 80022a0:	6010      	str	r0, [r2, #0]
 80022a2:	7019      	strb	r1, [r3, #0]
 80022a4:	4608      	mov	r0, r1
 80022a6:	bc10      	pop	{r4}
 80022a8:	4770      	bx	lr

080022aa <__sfputs_r>:
 80022aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ac:	4606      	mov	r6, r0
 80022ae:	460f      	mov	r7, r1
 80022b0:	4614      	mov	r4, r2
 80022b2:	18d5      	adds	r5, r2, r3
 80022b4:	42ac      	cmp	r4, r5
 80022b6:	d101      	bne.n	80022bc <__sfputs_r+0x12>
 80022b8:	2000      	movs	r0, #0
 80022ba:	e007      	b.n	80022cc <__sfputs_r+0x22>
 80022bc:	463a      	mov	r2, r7
 80022be:	4630      	mov	r0, r6
 80022c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022c4:	f7ff ffdc 	bl	8002280 <__sfputc_r>
 80022c8:	1c43      	adds	r3, r0, #1
 80022ca:	d1f3      	bne.n	80022b4 <__sfputs_r+0xa>
 80022cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080022d0 <_vfiprintf_r>:
 80022d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022d4:	460d      	mov	r5, r1
 80022d6:	4614      	mov	r4, r2
 80022d8:	4698      	mov	r8, r3
 80022da:	4606      	mov	r6, r0
 80022dc:	b09d      	sub	sp, #116	; 0x74
 80022de:	b118      	cbz	r0, 80022e8 <_vfiprintf_r+0x18>
 80022e0:	6983      	ldr	r3, [r0, #24]
 80022e2:	b90b      	cbnz	r3, 80022e8 <_vfiprintf_r+0x18>
 80022e4:	f7ff fed2 	bl	800208c <__sinit>
 80022e8:	4b89      	ldr	r3, [pc, #548]	; (8002510 <_vfiprintf_r+0x240>)
 80022ea:	429d      	cmp	r5, r3
 80022ec:	d11b      	bne.n	8002326 <_vfiprintf_r+0x56>
 80022ee:	6875      	ldr	r5, [r6, #4]
 80022f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80022f2:	07d9      	lsls	r1, r3, #31
 80022f4:	d405      	bmi.n	8002302 <_vfiprintf_r+0x32>
 80022f6:	89ab      	ldrh	r3, [r5, #12]
 80022f8:	059a      	lsls	r2, r3, #22
 80022fa:	d402      	bmi.n	8002302 <_vfiprintf_r+0x32>
 80022fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80022fe:	f7ff ff63 	bl	80021c8 <__retarget_lock_acquire_recursive>
 8002302:	89ab      	ldrh	r3, [r5, #12]
 8002304:	071b      	lsls	r3, r3, #28
 8002306:	d501      	bpl.n	800230c <_vfiprintf_r+0x3c>
 8002308:	692b      	ldr	r3, [r5, #16]
 800230a:	b9eb      	cbnz	r3, 8002348 <_vfiprintf_r+0x78>
 800230c:	4629      	mov	r1, r5
 800230e:	4630      	mov	r0, r6
 8002310:	f000 fb5c 	bl	80029cc <__swsetup_r>
 8002314:	b1c0      	cbz	r0, 8002348 <_vfiprintf_r+0x78>
 8002316:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002318:	07dc      	lsls	r4, r3, #31
 800231a:	d50e      	bpl.n	800233a <_vfiprintf_r+0x6a>
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	b01d      	add	sp, #116	; 0x74
 8002322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002326:	4b7b      	ldr	r3, [pc, #492]	; (8002514 <_vfiprintf_r+0x244>)
 8002328:	429d      	cmp	r5, r3
 800232a:	d101      	bne.n	8002330 <_vfiprintf_r+0x60>
 800232c:	68b5      	ldr	r5, [r6, #8]
 800232e:	e7df      	b.n	80022f0 <_vfiprintf_r+0x20>
 8002330:	4b79      	ldr	r3, [pc, #484]	; (8002518 <_vfiprintf_r+0x248>)
 8002332:	429d      	cmp	r5, r3
 8002334:	bf08      	it	eq
 8002336:	68f5      	ldreq	r5, [r6, #12]
 8002338:	e7da      	b.n	80022f0 <_vfiprintf_r+0x20>
 800233a:	89ab      	ldrh	r3, [r5, #12]
 800233c:	0598      	lsls	r0, r3, #22
 800233e:	d4ed      	bmi.n	800231c <_vfiprintf_r+0x4c>
 8002340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002342:	f7ff ff42 	bl	80021ca <__retarget_lock_release_recursive>
 8002346:	e7e9      	b.n	800231c <_vfiprintf_r+0x4c>
 8002348:	2300      	movs	r3, #0
 800234a:	9309      	str	r3, [sp, #36]	; 0x24
 800234c:	2320      	movs	r3, #32
 800234e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002352:	2330      	movs	r3, #48	; 0x30
 8002354:	f04f 0901 	mov.w	r9, #1
 8002358:	f8cd 800c 	str.w	r8, [sp, #12]
 800235c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800251c <_vfiprintf_r+0x24c>
 8002360:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002364:	4623      	mov	r3, r4
 8002366:	469a      	mov	sl, r3
 8002368:	f813 2b01 	ldrb.w	r2, [r3], #1
 800236c:	b10a      	cbz	r2, 8002372 <_vfiprintf_r+0xa2>
 800236e:	2a25      	cmp	r2, #37	; 0x25
 8002370:	d1f9      	bne.n	8002366 <_vfiprintf_r+0x96>
 8002372:	ebba 0b04 	subs.w	fp, sl, r4
 8002376:	d00b      	beq.n	8002390 <_vfiprintf_r+0xc0>
 8002378:	465b      	mov	r3, fp
 800237a:	4622      	mov	r2, r4
 800237c:	4629      	mov	r1, r5
 800237e:	4630      	mov	r0, r6
 8002380:	f7ff ff93 	bl	80022aa <__sfputs_r>
 8002384:	3001      	adds	r0, #1
 8002386:	f000 80aa 	beq.w	80024de <_vfiprintf_r+0x20e>
 800238a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800238c:	445a      	add	r2, fp
 800238e:	9209      	str	r2, [sp, #36]	; 0x24
 8002390:	f89a 3000 	ldrb.w	r3, [sl]
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80a2 	beq.w	80024de <_vfiprintf_r+0x20e>
 800239a:	2300      	movs	r3, #0
 800239c:	f04f 32ff 	mov.w	r2, #4294967295
 80023a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80023a4:	f10a 0a01 	add.w	sl, sl, #1
 80023a8:	9304      	str	r3, [sp, #16]
 80023aa:	9307      	str	r3, [sp, #28]
 80023ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80023b0:	931a      	str	r3, [sp, #104]	; 0x68
 80023b2:	4654      	mov	r4, sl
 80023b4:	2205      	movs	r2, #5
 80023b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023ba:	4858      	ldr	r0, [pc, #352]	; (800251c <_vfiprintf_r+0x24c>)
 80023bc:	f000 fcbc 	bl	8002d38 <memchr>
 80023c0:	9a04      	ldr	r2, [sp, #16]
 80023c2:	b9d8      	cbnz	r0, 80023fc <_vfiprintf_r+0x12c>
 80023c4:	06d1      	lsls	r1, r2, #27
 80023c6:	bf44      	itt	mi
 80023c8:	2320      	movmi	r3, #32
 80023ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023ce:	0713      	lsls	r3, r2, #28
 80023d0:	bf44      	itt	mi
 80023d2:	232b      	movmi	r3, #43	; 0x2b
 80023d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023d8:	f89a 3000 	ldrb.w	r3, [sl]
 80023dc:	2b2a      	cmp	r3, #42	; 0x2a
 80023de:	d015      	beq.n	800240c <_vfiprintf_r+0x13c>
 80023e0:	4654      	mov	r4, sl
 80023e2:	2000      	movs	r0, #0
 80023e4:	f04f 0c0a 	mov.w	ip, #10
 80023e8:	9a07      	ldr	r2, [sp, #28]
 80023ea:	4621      	mov	r1, r4
 80023ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80023f0:	3b30      	subs	r3, #48	; 0x30
 80023f2:	2b09      	cmp	r3, #9
 80023f4:	d94e      	bls.n	8002494 <_vfiprintf_r+0x1c4>
 80023f6:	b1b0      	cbz	r0, 8002426 <_vfiprintf_r+0x156>
 80023f8:	9207      	str	r2, [sp, #28]
 80023fa:	e014      	b.n	8002426 <_vfiprintf_r+0x156>
 80023fc:	eba0 0308 	sub.w	r3, r0, r8
 8002400:	fa09 f303 	lsl.w	r3, r9, r3
 8002404:	4313      	orrs	r3, r2
 8002406:	46a2      	mov	sl, r4
 8002408:	9304      	str	r3, [sp, #16]
 800240a:	e7d2      	b.n	80023b2 <_vfiprintf_r+0xe2>
 800240c:	9b03      	ldr	r3, [sp, #12]
 800240e:	1d19      	adds	r1, r3, #4
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	9103      	str	r1, [sp, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	bfbb      	ittet	lt
 8002418:	425b      	neglt	r3, r3
 800241a:	f042 0202 	orrlt.w	r2, r2, #2
 800241e:	9307      	strge	r3, [sp, #28]
 8002420:	9307      	strlt	r3, [sp, #28]
 8002422:	bfb8      	it	lt
 8002424:	9204      	strlt	r2, [sp, #16]
 8002426:	7823      	ldrb	r3, [r4, #0]
 8002428:	2b2e      	cmp	r3, #46	; 0x2e
 800242a:	d10c      	bne.n	8002446 <_vfiprintf_r+0x176>
 800242c:	7863      	ldrb	r3, [r4, #1]
 800242e:	2b2a      	cmp	r3, #42	; 0x2a
 8002430:	d135      	bne.n	800249e <_vfiprintf_r+0x1ce>
 8002432:	9b03      	ldr	r3, [sp, #12]
 8002434:	3402      	adds	r4, #2
 8002436:	1d1a      	adds	r2, r3, #4
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	9203      	str	r2, [sp, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	bfb8      	it	lt
 8002440:	f04f 33ff 	movlt.w	r3, #4294967295
 8002444:	9305      	str	r3, [sp, #20]
 8002446:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800252c <_vfiprintf_r+0x25c>
 800244a:	2203      	movs	r2, #3
 800244c:	4650      	mov	r0, sl
 800244e:	7821      	ldrb	r1, [r4, #0]
 8002450:	f000 fc72 	bl	8002d38 <memchr>
 8002454:	b140      	cbz	r0, 8002468 <_vfiprintf_r+0x198>
 8002456:	2340      	movs	r3, #64	; 0x40
 8002458:	eba0 000a 	sub.w	r0, r0, sl
 800245c:	fa03 f000 	lsl.w	r0, r3, r0
 8002460:	9b04      	ldr	r3, [sp, #16]
 8002462:	3401      	adds	r4, #1
 8002464:	4303      	orrs	r3, r0
 8002466:	9304      	str	r3, [sp, #16]
 8002468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800246c:	2206      	movs	r2, #6
 800246e:	482c      	ldr	r0, [pc, #176]	; (8002520 <_vfiprintf_r+0x250>)
 8002470:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002474:	f000 fc60 	bl	8002d38 <memchr>
 8002478:	2800      	cmp	r0, #0
 800247a:	d03f      	beq.n	80024fc <_vfiprintf_r+0x22c>
 800247c:	4b29      	ldr	r3, [pc, #164]	; (8002524 <_vfiprintf_r+0x254>)
 800247e:	bb1b      	cbnz	r3, 80024c8 <_vfiprintf_r+0x1f8>
 8002480:	9b03      	ldr	r3, [sp, #12]
 8002482:	3307      	adds	r3, #7
 8002484:	f023 0307 	bic.w	r3, r3, #7
 8002488:	3308      	adds	r3, #8
 800248a:	9303      	str	r3, [sp, #12]
 800248c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800248e:	443b      	add	r3, r7
 8002490:	9309      	str	r3, [sp, #36]	; 0x24
 8002492:	e767      	b.n	8002364 <_vfiprintf_r+0x94>
 8002494:	460c      	mov	r4, r1
 8002496:	2001      	movs	r0, #1
 8002498:	fb0c 3202 	mla	r2, ip, r2, r3
 800249c:	e7a5      	b.n	80023ea <_vfiprintf_r+0x11a>
 800249e:	2300      	movs	r3, #0
 80024a0:	f04f 0c0a 	mov.w	ip, #10
 80024a4:	4619      	mov	r1, r3
 80024a6:	3401      	adds	r4, #1
 80024a8:	9305      	str	r3, [sp, #20]
 80024aa:	4620      	mov	r0, r4
 80024ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80024b0:	3a30      	subs	r2, #48	; 0x30
 80024b2:	2a09      	cmp	r2, #9
 80024b4:	d903      	bls.n	80024be <_vfiprintf_r+0x1ee>
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0c5      	beq.n	8002446 <_vfiprintf_r+0x176>
 80024ba:	9105      	str	r1, [sp, #20]
 80024bc:	e7c3      	b.n	8002446 <_vfiprintf_r+0x176>
 80024be:	4604      	mov	r4, r0
 80024c0:	2301      	movs	r3, #1
 80024c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80024c6:	e7f0      	b.n	80024aa <_vfiprintf_r+0x1da>
 80024c8:	ab03      	add	r3, sp, #12
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	462a      	mov	r2, r5
 80024ce:	4630      	mov	r0, r6
 80024d0:	4b15      	ldr	r3, [pc, #84]	; (8002528 <_vfiprintf_r+0x258>)
 80024d2:	a904      	add	r1, sp, #16
 80024d4:	f3af 8000 	nop.w
 80024d8:	4607      	mov	r7, r0
 80024da:	1c78      	adds	r0, r7, #1
 80024dc:	d1d6      	bne.n	800248c <_vfiprintf_r+0x1bc>
 80024de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80024e0:	07d9      	lsls	r1, r3, #31
 80024e2:	d405      	bmi.n	80024f0 <_vfiprintf_r+0x220>
 80024e4:	89ab      	ldrh	r3, [r5, #12]
 80024e6:	059a      	lsls	r2, r3, #22
 80024e8:	d402      	bmi.n	80024f0 <_vfiprintf_r+0x220>
 80024ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80024ec:	f7ff fe6d 	bl	80021ca <__retarget_lock_release_recursive>
 80024f0:	89ab      	ldrh	r3, [r5, #12]
 80024f2:	065b      	lsls	r3, r3, #25
 80024f4:	f53f af12 	bmi.w	800231c <_vfiprintf_r+0x4c>
 80024f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80024fa:	e711      	b.n	8002320 <_vfiprintf_r+0x50>
 80024fc:	ab03      	add	r3, sp, #12
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	462a      	mov	r2, r5
 8002502:	4630      	mov	r0, r6
 8002504:	4b08      	ldr	r3, [pc, #32]	; (8002528 <_vfiprintf_r+0x258>)
 8002506:	a904      	add	r1, sp, #16
 8002508:	f000 f882 	bl	8002610 <_printf_i>
 800250c:	e7e4      	b.n	80024d8 <_vfiprintf_r+0x208>
 800250e:	bf00      	nop
 8002510:	08002ed8 	.word	0x08002ed8
 8002514:	08002ef8 	.word	0x08002ef8
 8002518:	08002eb8 	.word	0x08002eb8
 800251c:	08002f18 	.word	0x08002f18
 8002520:	08002f22 	.word	0x08002f22
 8002524:	00000000 	.word	0x00000000
 8002528:	080022ab 	.word	0x080022ab
 800252c:	08002f1e 	.word	0x08002f1e

08002530 <_printf_common>:
 8002530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002534:	4616      	mov	r6, r2
 8002536:	4699      	mov	r9, r3
 8002538:	688a      	ldr	r2, [r1, #8]
 800253a:	690b      	ldr	r3, [r1, #16]
 800253c:	4607      	mov	r7, r0
 800253e:	4293      	cmp	r3, r2
 8002540:	bfb8      	it	lt
 8002542:	4613      	movlt	r3, r2
 8002544:	6033      	str	r3, [r6, #0]
 8002546:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800254a:	460c      	mov	r4, r1
 800254c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002550:	b10a      	cbz	r2, 8002556 <_printf_common+0x26>
 8002552:	3301      	adds	r3, #1
 8002554:	6033      	str	r3, [r6, #0]
 8002556:	6823      	ldr	r3, [r4, #0]
 8002558:	0699      	lsls	r1, r3, #26
 800255a:	bf42      	ittt	mi
 800255c:	6833      	ldrmi	r3, [r6, #0]
 800255e:	3302      	addmi	r3, #2
 8002560:	6033      	strmi	r3, [r6, #0]
 8002562:	6825      	ldr	r5, [r4, #0]
 8002564:	f015 0506 	ands.w	r5, r5, #6
 8002568:	d106      	bne.n	8002578 <_printf_common+0x48>
 800256a:	f104 0a19 	add.w	sl, r4, #25
 800256e:	68e3      	ldr	r3, [r4, #12]
 8002570:	6832      	ldr	r2, [r6, #0]
 8002572:	1a9b      	subs	r3, r3, r2
 8002574:	42ab      	cmp	r3, r5
 8002576:	dc28      	bgt.n	80025ca <_printf_common+0x9a>
 8002578:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800257c:	1e13      	subs	r3, r2, #0
 800257e:	6822      	ldr	r2, [r4, #0]
 8002580:	bf18      	it	ne
 8002582:	2301      	movne	r3, #1
 8002584:	0692      	lsls	r2, r2, #26
 8002586:	d42d      	bmi.n	80025e4 <_printf_common+0xb4>
 8002588:	4649      	mov	r1, r9
 800258a:	4638      	mov	r0, r7
 800258c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002590:	47c0      	blx	r8
 8002592:	3001      	adds	r0, #1
 8002594:	d020      	beq.n	80025d8 <_printf_common+0xa8>
 8002596:	6823      	ldr	r3, [r4, #0]
 8002598:	68e5      	ldr	r5, [r4, #12]
 800259a:	f003 0306 	and.w	r3, r3, #6
 800259e:	2b04      	cmp	r3, #4
 80025a0:	bf18      	it	ne
 80025a2:	2500      	movne	r5, #0
 80025a4:	6832      	ldr	r2, [r6, #0]
 80025a6:	f04f 0600 	mov.w	r6, #0
 80025aa:	68a3      	ldr	r3, [r4, #8]
 80025ac:	bf08      	it	eq
 80025ae:	1aad      	subeq	r5, r5, r2
 80025b0:	6922      	ldr	r2, [r4, #16]
 80025b2:	bf08      	it	eq
 80025b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025b8:	4293      	cmp	r3, r2
 80025ba:	bfc4      	itt	gt
 80025bc:	1a9b      	subgt	r3, r3, r2
 80025be:	18ed      	addgt	r5, r5, r3
 80025c0:	341a      	adds	r4, #26
 80025c2:	42b5      	cmp	r5, r6
 80025c4:	d11a      	bne.n	80025fc <_printf_common+0xcc>
 80025c6:	2000      	movs	r0, #0
 80025c8:	e008      	b.n	80025dc <_printf_common+0xac>
 80025ca:	2301      	movs	r3, #1
 80025cc:	4652      	mov	r2, sl
 80025ce:	4649      	mov	r1, r9
 80025d0:	4638      	mov	r0, r7
 80025d2:	47c0      	blx	r8
 80025d4:	3001      	adds	r0, #1
 80025d6:	d103      	bne.n	80025e0 <_printf_common+0xb0>
 80025d8:	f04f 30ff 	mov.w	r0, #4294967295
 80025dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025e0:	3501      	adds	r5, #1
 80025e2:	e7c4      	b.n	800256e <_printf_common+0x3e>
 80025e4:	2030      	movs	r0, #48	; 0x30
 80025e6:	18e1      	adds	r1, r4, r3
 80025e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80025f2:	4422      	add	r2, r4
 80025f4:	3302      	adds	r3, #2
 80025f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80025fa:	e7c5      	b.n	8002588 <_printf_common+0x58>
 80025fc:	2301      	movs	r3, #1
 80025fe:	4622      	mov	r2, r4
 8002600:	4649      	mov	r1, r9
 8002602:	4638      	mov	r0, r7
 8002604:	47c0      	blx	r8
 8002606:	3001      	adds	r0, #1
 8002608:	d0e6      	beq.n	80025d8 <_printf_common+0xa8>
 800260a:	3601      	adds	r6, #1
 800260c:	e7d9      	b.n	80025c2 <_printf_common+0x92>
	...

08002610 <_printf_i>:
 8002610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002614:	460c      	mov	r4, r1
 8002616:	7e27      	ldrb	r7, [r4, #24]
 8002618:	4691      	mov	r9, r2
 800261a:	2f78      	cmp	r7, #120	; 0x78
 800261c:	4680      	mov	r8, r0
 800261e:	469a      	mov	sl, r3
 8002620:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002622:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002626:	d807      	bhi.n	8002638 <_printf_i+0x28>
 8002628:	2f62      	cmp	r7, #98	; 0x62
 800262a:	d80a      	bhi.n	8002642 <_printf_i+0x32>
 800262c:	2f00      	cmp	r7, #0
 800262e:	f000 80d9 	beq.w	80027e4 <_printf_i+0x1d4>
 8002632:	2f58      	cmp	r7, #88	; 0x58
 8002634:	f000 80a4 	beq.w	8002780 <_printf_i+0x170>
 8002638:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800263c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002640:	e03a      	b.n	80026b8 <_printf_i+0xa8>
 8002642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002646:	2b15      	cmp	r3, #21
 8002648:	d8f6      	bhi.n	8002638 <_printf_i+0x28>
 800264a:	a001      	add	r0, pc, #4	; (adr r0, 8002650 <_printf_i+0x40>)
 800264c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002650:	080026a9 	.word	0x080026a9
 8002654:	080026bd 	.word	0x080026bd
 8002658:	08002639 	.word	0x08002639
 800265c:	08002639 	.word	0x08002639
 8002660:	08002639 	.word	0x08002639
 8002664:	08002639 	.word	0x08002639
 8002668:	080026bd 	.word	0x080026bd
 800266c:	08002639 	.word	0x08002639
 8002670:	08002639 	.word	0x08002639
 8002674:	08002639 	.word	0x08002639
 8002678:	08002639 	.word	0x08002639
 800267c:	080027cb 	.word	0x080027cb
 8002680:	080026ed 	.word	0x080026ed
 8002684:	080027ad 	.word	0x080027ad
 8002688:	08002639 	.word	0x08002639
 800268c:	08002639 	.word	0x08002639
 8002690:	080027ed 	.word	0x080027ed
 8002694:	08002639 	.word	0x08002639
 8002698:	080026ed 	.word	0x080026ed
 800269c:	08002639 	.word	0x08002639
 80026a0:	08002639 	.word	0x08002639
 80026a4:	080027b5 	.word	0x080027b5
 80026a8:	680b      	ldr	r3, [r1, #0]
 80026aa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80026ae:	1d1a      	adds	r2, r3, #4
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	600a      	str	r2, [r1, #0]
 80026b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0a4      	b.n	8002806 <_printf_i+0x1f6>
 80026bc:	6825      	ldr	r5, [r4, #0]
 80026be:	6808      	ldr	r0, [r1, #0]
 80026c0:	062e      	lsls	r6, r5, #24
 80026c2:	f100 0304 	add.w	r3, r0, #4
 80026c6:	d50a      	bpl.n	80026de <_printf_i+0xce>
 80026c8:	6805      	ldr	r5, [r0, #0]
 80026ca:	600b      	str	r3, [r1, #0]
 80026cc:	2d00      	cmp	r5, #0
 80026ce:	da03      	bge.n	80026d8 <_printf_i+0xc8>
 80026d0:	232d      	movs	r3, #45	; 0x2d
 80026d2:	426d      	negs	r5, r5
 80026d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026d8:	230a      	movs	r3, #10
 80026da:	485e      	ldr	r0, [pc, #376]	; (8002854 <_printf_i+0x244>)
 80026dc:	e019      	b.n	8002712 <_printf_i+0x102>
 80026de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80026e2:	6805      	ldr	r5, [r0, #0]
 80026e4:	600b      	str	r3, [r1, #0]
 80026e6:	bf18      	it	ne
 80026e8:	b22d      	sxthne	r5, r5
 80026ea:	e7ef      	b.n	80026cc <_printf_i+0xbc>
 80026ec:	680b      	ldr	r3, [r1, #0]
 80026ee:	6825      	ldr	r5, [r4, #0]
 80026f0:	1d18      	adds	r0, r3, #4
 80026f2:	6008      	str	r0, [r1, #0]
 80026f4:	0628      	lsls	r0, r5, #24
 80026f6:	d501      	bpl.n	80026fc <_printf_i+0xec>
 80026f8:	681d      	ldr	r5, [r3, #0]
 80026fa:	e002      	b.n	8002702 <_printf_i+0xf2>
 80026fc:	0669      	lsls	r1, r5, #25
 80026fe:	d5fb      	bpl.n	80026f8 <_printf_i+0xe8>
 8002700:	881d      	ldrh	r5, [r3, #0]
 8002702:	2f6f      	cmp	r7, #111	; 0x6f
 8002704:	bf0c      	ite	eq
 8002706:	2308      	moveq	r3, #8
 8002708:	230a      	movne	r3, #10
 800270a:	4852      	ldr	r0, [pc, #328]	; (8002854 <_printf_i+0x244>)
 800270c:	2100      	movs	r1, #0
 800270e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002712:	6866      	ldr	r6, [r4, #4]
 8002714:	2e00      	cmp	r6, #0
 8002716:	bfa8      	it	ge
 8002718:	6821      	ldrge	r1, [r4, #0]
 800271a:	60a6      	str	r6, [r4, #8]
 800271c:	bfa4      	itt	ge
 800271e:	f021 0104 	bicge.w	r1, r1, #4
 8002722:	6021      	strge	r1, [r4, #0]
 8002724:	b90d      	cbnz	r5, 800272a <_printf_i+0x11a>
 8002726:	2e00      	cmp	r6, #0
 8002728:	d04d      	beq.n	80027c6 <_printf_i+0x1b6>
 800272a:	4616      	mov	r6, r2
 800272c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002730:	fb03 5711 	mls	r7, r3, r1, r5
 8002734:	5dc7      	ldrb	r7, [r0, r7]
 8002736:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800273a:	462f      	mov	r7, r5
 800273c:	42bb      	cmp	r3, r7
 800273e:	460d      	mov	r5, r1
 8002740:	d9f4      	bls.n	800272c <_printf_i+0x11c>
 8002742:	2b08      	cmp	r3, #8
 8002744:	d10b      	bne.n	800275e <_printf_i+0x14e>
 8002746:	6823      	ldr	r3, [r4, #0]
 8002748:	07df      	lsls	r7, r3, #31
 800274a:	d508      	bpl.n	800275e <_printf_i+0x14e>
 800274c:	6923      	ldr	r3, [r4, #16]
 800274e:	6861      	ldr	r1, [r4, #4]
 8002750:	4299      	cmp	r1, r3
 8002752:	bfde      	ittt	le
 8002754:	2330      	movle	r3, #48	; 0x30
 8002756:	f806 3c01 	strble.w	r3, [r6, #-1]
 800275a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800275e:	1b92      	subs	r2, r2, r6
 8002760:	6122      	str	r2, [r4, #16]
 8002762:	464b      	mov	r3, r9
 8002764:	4621      	mov	r1, r4
 8002766:	4640      	mov	r0, r8
 8002768:	f8cd a000 	str.w	sl, [sp]
 800276c:	aa03      	add	r2, sp, #12
 800276e:	f7ff fedf 	bl	8002530 <_printf_common>
 8002772:	3001      	adds	r0, #1
 8002774:	d14c      	bne.n	8002810 <_printf_i+0x200>
 8002776:	f04f 30ff 	mov.w	r0, #4294967295
 800277a:	b004      	add	sp, #16
 800277c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002780:	4834      	ldr	r0, [pc, #208]	; (8002854 <_printf_i+0x244>)
 8002782:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002786:	680e      	ldr	r6, [r1, #0]
 8002788:	6823      	ldr	r3, [r4, #0]
 800278a:	f856 5b04 	ldr.w	r5, [r6], #4
 800278e:	061f      	lsls	r7, r3, #24
 8002790:	600e      	str	r6, [r1, #0]
 8002792:	d514      	bpl.n	80027be <_printf_i+0x1ae>
 8002794:	07d9      	lsls	r1, r3, #31
 8002796:	bf44      	itt	mi
 8002798:	f043 0320 	orrmi.w	r3, r3, #32
 800279c:	6023      	strmi	r3, [r4, #0]
 800279e:	b91d      	cbnz	r5, 80027a8 <_printf_i+0x198>
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	f023 0320 	bic.w	r3, r3, #32
 80027a6:	6023      	str	r3, [r4, #0]
 80027a8:	2310      	movs	r3, #16
 80027aa:	e7af      	b.n	800270c <_printf_i+0xfc>
 80027ac:	6823      	ldr	r3, [r4, #0]
 80027ae:	f043 0320 	orr.w	r3, r3, #32
 80027b2:	6023      	str	r3, [r4, #0]
 80027b4:	2378      	movs	r3, #120	; 0x78
 80027b6:	4828      	ldr	r0, [pc, #160]	; (8002858 <_printf_i+0x248>)
 80027b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80027bc:	e7e3      	b.n	8002786 <_printf_i+0x176>
 80027be:	065e      	lsls	r6, r3, #25
 80027c0:	bf48      	it	mi
 80027c2:	b2ad      	uxthmi	r5, r5
 80027c4:	e7e6      	b.n	8002794 <_printf_i+0x184>
 80027c6:	4616      	mov	r6, r2
 80027c8:	e7bb      	b.n	8002742 <_printf_i+0x132>
 80027ca:	680b      	ldr	r3, [r1, #0]
 80027cc:	6826      	ldr	r6, [r4, #0]
 80027ce:	1d1d      	adds	r5, r3, #4
 80027d0:	6960      	ldr	r0, [r4, #20]
 80027d2:	600d      	str	r5, [r1, #0]
 80027d4:	0635      	lsls	r5, r6, #24
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	d501      	bpl.n	80027de <_printf_i+0x1ce>
 80027da:	6018      	str	r0, [r3, #0]
 80027dc:	e002      	b.n	80027e4 <_printf_i+0x1d4>
 80027de:	0671      	lsls	r1, r6, #25
 80027e0:	d5fb      	bpl.n	80027da <_printf_i+0x1ca>
 80027e2:	8018      	strh	r0, [r3, #0]
 80027e4:	2300      	movs	r3, #0
 80027e6:	4616      	mov	r6, r2
 80027e8:	6123      	str	r3, [r4, #16]
 80027ea:	e7ba      	b.n	8002762 <_printf_i+0x152>
 80027ec:	680b      	ldr	r3, [r1, #0]
 80027ee:	1d1a      	adds	r2, r3, #4
 80027f0:	600a      	str	r2, [r1, #0]
 80027f2:	681e      	ldr	r6, [r3, #0]
 80027f4:	2100      	movs	r1, #0
 80027f6:	4630      	mov	r0, r6
 80027f8:	6862      	ldr	r2, [r4, #4]
 80027fa:	f000 fa9d 	bl	8002d38 <memchr>
 80027fe:	b108      	cbz	r0, 8002804 <_printf_i+0x1f4>
 8002800:	1b80      	subs	r0, r0, r6
 8002802:	6060      	str	r0, [r4, #4]
 8002804:	6863      	ldr	r3, [r4, #4]
 8002806:	6123      	str	r3, [r4, #16]
 8002808:	2300      	movs	r3, #0
 800280a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800280e:	e7a8      	b.n	8002762 <_printf_i+0x152>
 8002810:	4632      	mov	r2, r6
 8002812:	4649      	mov	r1, r9
 8002814:	4640      	mov	r0, r8
 8002816:	6923      	ldr	r3, [r4, #16]
 8002818:	47d0      	blx	sl
 800281a:	3001      	adds	r0, #1
 800281c:	d0ab      	beq.n	8002776 <_printf_i+0x166>
 800281e:	6823      	ldr	r3, [r4, #0]
 8002820:	079b      	lsls	r3, r3, #30
 8002822:	d413      	bmi.n	800284c <_printf_i+0x23c>
 8002824:	68e0      	ldr	r0, [r4, #12]
 8002826:	9b03      	ldr	r3, [sp, #12]
 8002828:	4298      	cmp	r0, r3
 800282a:	bfb8      	it	lt
 800282c:	4618      	movlt	r0, r3
 800282e:	e7a4      	b.n	800277a <_printf_i+0x16a>
 8002830:	2301      	movs	r3, #1
 8002832:	4632      	mov	r2, r6
 8002834:	4649      	mov	r1, r9
 8002836:	4640      	mov	r0, r8
 8002838:	47d0      	blx	sl
 800283a:	3001      	adds	r0, #1
 800283c:	d09b      	beq.n	8002776 <_printf_i+0x166>
 800283e:	3501      	adds	r5, #1
 8002840:	68e3      	ldr	r3, [r4, #12]
 8002842:	9903      	ldr	r1, [sp, #12]
 8002844:	1a5b      	subs	r3, r3, r1
 8002846:	42ab      	cmp	r3, r5
 8002848:	dcf2      	bgt.n	8002830 <_printf_i+0x220>
 800284a:	e7eb      	b.n	8002824 <_printf_i+0x214>
 800284c:	2500      	movs	r5, #0
 800284e:	f104 0619 	add.w	r6, r4, #25
 8002852:	e7f5      	b.n	8002840 <_printf_i+0x230>
 8002854:	08002f29 	.word	0x08002f29
 8002858:	08002f3a 	.word	0x08002f3a

0800285c <_sbrk_r>:
 800285c:	b538      	push	{r3, r4, r5, lr}
 800285e:	2300      	movs	r3, #0
 8002860:	4d05      	ldr	r5, [pc, #20]	; (8002878 <_sbrk_r+0x1c>)
 8002862:	4604      	mov	r4, r0
 8002864:	4608      	mov	r0, r1
 8002866:	602b      	str	r3, [r5, #0]
 8002868:	f7fe f838 	bl	80008dc <_sbrk>
 800286c:	1c43      	adds	r3, r0, #1
 800286e:	d102      	bne.n	8002876 <_sbrk_r+0x1a>
 8002870:	682b      	ldr	r3, [r5, #0]
 8002872:	b103      	cbz	r3, 8002876 <_sbrk_r+0x1a>
 8002874:	6023      	str	r3, [r4, #0]
 8002876:	bd38      	pop	{r3, r4, r5, pc}
 8002878:	20000414 	.word	0x20000414

0800287c <__sread>:
 800287c:	b510      	push	{r4, lr}
 800287e:	460c      	mov	r4, r1
 8002880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002884:	f000 fabe 	bl	8002e04 <_read_r>
 8002888:	2800      	cmp	r0, #0
 800288a:	bfab      	itete	ge
 800288c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800288e:	89a3      	ldrhlt	r3, [r4, #12]
 8002890:	181b      	addge	r3, r3, r0
 8002892:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002896:	bfac      	ite	ge
 8002898:	6563      	strge	r3, [r4, #84]	; 0x54
 800289a:	81a3      	strhlt	r3, [r4, #12]
 800289c:	bd10      	pop	{r4, pc}

0800289e <__swrite>:
 800289e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028a2:	461f      	mov	r7, r3
 80028a4:	898b      	ldrh	r3, [r1, #12]
 80028a6:	4605      	mov	r5, r0
 80028a8:	05db      	lsls	r3, r3, #23
 80028aa:	460c      	mov	r4, r1
 80028ac:	4616      	mov	r6, r2
 80028ae:	d505      	bpl.n	80028bc <__swrite+0x1e>
 80028b0:	2302      	movs	r3, #2
 80028b2:	2200      	movs	r2, #0
 80028b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028b8:	f000 f9c8 	bl	8002c4c <_lseek_r>
 80028bc:	89a3      	ldrh	r3, [r4, #12]
 80028be:	4632      	mov	r2, r6
 80028c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028c4:	81a3      	strh	r3, [r4, #12]
 80028c6:	4628      	mov	r0, r5
 80028c8:	463b      	mov	r3, r7
 80028ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028d2:	f000 b869 	b.w	80029a8 <_write_r>

080028d6 <__sseek>:
 80028d6:	b510      	push	{r4, lr}
 80028d8:	460c      	mov	r4, r1
 80028da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028de:	f000 f9b5 	bl	8002c4c <_lseek_r>
 80028e2:	1c43      	adds	r3, r0, #1
 80028e4:	89a3      	ldrh	r3, [r4, #12]
 80028e6:	bf15      	itete	ne
 80028e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80028ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80028ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80028f2:	81a3      	strheq	r3, [r4, #12]
 80028f4:	bf18      	it	ne
 80028f6:	81a3      	strhne	r3, [r4, #12]
 80028f8:	bd10      	pop	{r4, pc}

080028fa <__sclose>:
 80028fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028fe:	f000 b8d3 	b.w	8002aa8 <_close_r>
	...

08002904 <__swbuf_r>:
 8002904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002906:	460e      	mov	r6, r1
 8002908:	4614      	mov	r4, r2
 800290a:	4605      	mov	r5, r0
 800290c:	b118      	cbz	r0, 8002916 <__swbuf_r+0x12>
 800290e:	6983      	ldr	r3, [r0, #24]
 8002910:	b90b      	cbnz	r3, 8002916 <__swbuf_r+0x12>
 8002912:	f7ff fbbb 	bl	800208c <__sinit>
 8002916:	4b21      	ldr	r3, [pc, #132]	; (800299c <__swbuf_r+0x98>)
 8002918:	429c      	cmp	r4, r3
 800291a:	d12b      	bne.n	8002974 <__swbuf_r+0x70>
 800291c:	686c      	ldr	r4, [r5, #4]
 800291e:	69a3      	ldr	r3, [r4, #24]
 8002920:	60a3      	str	r3, [r4, #8]
 8002922:	89a3      	ldrh	r3, [r4, #12]
 8002924:	071a      	lsls	r2, r3, #28
 8002926:	d52f      	bpl.n	8002988 <__swbuf_r+0x84>
 8002928:	6923      	ldr	r3, [r4, #16]
 800292a:	b36b      	cbz	r3, 8002988 <__swbuf_r+0x84>
 800292c:	6923      	ldr	r3, [r4, #16]
 800292e:	6820      	ldr	r0, [r4, #0]
 8002930:	b2f6      	uxtb	r6, r6
 8002932:	1ac0      	subs	r0, r0, r3
 8002934:	6963      	ldr	r3, [r4, #20]
 8002936:	4637      	mov	r7, r6
 8002938:	4283      	cmp	r3, r0
 800293a:	dc04      	bgt.n	8002946 <__swbuf_r+0x42>
 800293c:	4621      	mov	r1, r4
 800293e:	4628      	mov	r0, r5
 8002940:	f000 f948 	bl	8002bd4 <_fflush_r>
 8002944:	bb30      	cbnz	r0, 8002994 <__swbuf_r+0x90>
 8002946:	68a3      	ldr	r3, [r4, #8]
 8002948:	3001      	adds	r0, #1
 800294a:	3b01      	subs	r3, #1
 800294c:	60a3      	str	r3, [r4, #8]
 800294e:	6823      	ldr	r3, [r4, #0]
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	6022      	str	r2, [r4, #0]
 8002954:	701e      	strb	r6, [r3, #0]
 8002956:	6963      	ldr	r3, [r4, #20]
 8002958:	4283      	cmp	r3, r0
 800295a:	d004      	beq.n	8002966 <__swbuf_r+0x62>
 800295c:	89a3      	ldrh	r3, [r4, #12]
 800295e:	07db      	lsls	r3, r3, #31
 8002960:	d506      	bpl.n	8002970 <__swbuf_r+0x6c>
 8002962:	2e0a      	cmp	r6, #10
 8002964:	d104      	bne.n	8002970 <__swbuf_r+0x6c>
 8002966:	4621      	mov	r1, r4
 8002968:	4628      	mov	r0, r5
 800296a:	f000 f933 	bl	8002bd4 <_fflush_r>
 800296e:	b988      	cbnz	r0, 8002994 <__swbuf_r+0x90>
 8002970:	4638      	mov	r0, r7
 8002972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002974:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <__swbuf_r+0x9c>)
 8002976:	429c      	cmp	r4, r3
 8002978:	d101      	bne.n	800297e <__swbuf_r+0x7a>
 800297a:	68ac      	ldr	r4, [r5, #8]
 800297c:	e7cf      	b.n	800291e <__swbuf_r+0x1a>
 800297e:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <__swbuf_r+0xa0>)
 8002980:	429c      	cmp	r4, r3
 8002982:	bf08      	it	eq
 8002984:	68ec      	ldreq	r4, [r5, #12]
 8002986:	e7ca      	b.n	800291e <__swbuf_r+0x1a>
 8002988:	4621      	mov	r1, r4
 800298a:	4628      	mov	r0, r5
 800298c:	f000 f81e 	bl	80029cc <__swsetup_r>
 8002990:	2800      	cmp	r0, #0
 8002992:	d0cb      	beq.n	800292c <__swbuf_r+0x28>
 8002994:	f04f 37ff 	mov.w	r7, #4294967295
 8002998:	e7ea      	b.n	8002970 <__swbuf_r+0x6c>
 800299a:	bf00      	nop
 800299c:	08002ed8 	.word	0x08002ed8
 80029a0:	08002ef8 	.word	0x08002ef8
 80029a4:	08002eb8 	.word	0x08002eb8

080029a8 <_write_r>:
 80029a8:	b538      	push	{r3, r4, r5, lr}
 80029aa:	4604      	mov	r4, r0
 80029ac:	4608      	mov	r0, r1
 80029ae:	4611      	mov	r1, r2
 80029b0:	2200      	movs	r2, #0
 80029b2:	4d05      	ldr	r5, [pc, #20]	; (80029c8 <_write_r+0x20>)
 80029b4:	602a      	str	r2, [r5, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	f7fd ff43 	bl	8000842 <_write>
 80029bc:	1c43      	adds	r3, r0, #1
 80029be:	d102      	bne.n	80029c6 <_write_r+0x1e>
 80029c0:	682b      	ldr	r3, [r5, #0]
 80029c2:	b103      	cbz	r3, 80029c6 <_write_r+0x1e>
 80029c4:	6023      	str	r3, [r4, #0]
 80029c6:	bd38      	pop	{r3, r4, r5, pc}
 80029c8:	20000414 	.word	0x20000414

080029cc <__swsetup_r>:
 80029cc:	4b32      	ldr	r3, [pc, #200]	; (8002a98 <__swsetup_r+0xcc>)
 80029ce:	b570      	push	{r4, r5, r6, lr}
 80029d0:	681d      	ldr	r5, [r3, #0]
 80029d2:	4606      	mov	r6, r0
 80029d4:	460c      	mov	r4, r1
 80029d6:	b125      	cbz	r5, 80029e2 <__swsetup_r+0x16>
 80029d8:	69ab      	ldr	r3, [r5, #24]
 80029da:	b913      	cbnz	r3, 80029e2 <__swsetup_r+0x16>
 80029dc:	4628      	mov	r0, r5
 80029de:	f7ff fb55 	bl	800208c <__sinit>
 80029e2:	4b2e      	ldr	r3, [pc, #184]	; (8002a9c <__swsetup_r+0xd0>)
 80029e4:	429c      	cmp	r4, r3
 80029e6:	d10f      	bne.n	8002a08 <__swsetup_r+0x3c>
 80029e8:	686c      	ldr	r4, [r5, #4]
 80029ea:	89a3      	ldrh	r3, [r4, #12]
 80029ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80029f0:	0719      	lsls	r1, r3, #28
 80029f2:	d42c      	bmi.n	8002a4e <__swsetup_r+0x82>
 80029f4:	06dd      	lsls	r5, r3, #27
 80029f6:	d411      	bmi.n	8002a1c <__swsetup_r+0x50>
 80029f8:	2309      	movs	r3, #9
 80029fa:	6033      	str	r3, [r6, #0]
 80029fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002a00:	f04f 30ff 	mov.w	r0, #4294967295
 8002a04:	81a3      	strh	r3, [r4, #12]
 8002a06:	e03e      	b.n	8002a86 <__swsetup_r+0xba>
 8002a08:	4b25      	ldr	r3, [pc, #148]	; (8002aa0 <__swsetup_r+0xd4>)
 8002a0a:	429c      	cmp	r4, r3
 8002a0c:	d101      	bne.n	8002a12 <__swsetup_r+0x46>
 8002a0e:	68ac      	ldr	r4, [r5, #8]
 8002a10:	e7eb      	b.n	80029ea <__swsetup_r+0x1e>
 8002a12:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <__swsetup_r+0xd8>)
 8002a14:	429c      	cmp	r4, r3
 8002a16:	bf08      	it	eq
 8002a18:	68ec      	ldreq	r4, [r5, #12]
 8002a1a:	e7e6      	b.n	80029ea <__swsetup_r+0x1e>
 8002a1c:	0758      	lsls	r0, r3, #29
 8002a1e:	d512      	bpl.n	8002a46 <__swsetup_r+0x7a>
 8002a20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a22:	b141      	cbz	r1, 8002a36 <__swsetup_r+0x6a>
 8002a24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a28:	4299      	cmp	r1, r3
 8002a2a:	d002      	beq.n	8002a32 <__swsetup_r+0x66>
 8002a2c:	4630      	mov	r0, r6
 8002a2e:	f000 f99d 	bl	8002d6c <_free_r>
 8002a32:	2300      	movs	r3, #0
 8002a34:	6363      	str	r3, [r4, #52]	; 0x34
 8002a36:	89a3      	ldrh	r3, [r4, #12]
 8002a38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002a3c:	81a3      	strh	r3, [r4, #12]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	6063      	str	r3, [r4, #4]
 8002a42:	6923      	ldr	r3, [r4, #16]
 8002a44:	6023      	str	r3, [r4, #0]
 8002a46:	89a3      	ldrh	r3, [r4, #12]
 8002a48:	f043 0308 	orr.w	r3, r3, #8
 8002a4c:	81a3      	strh	r3, [r4, #12]
 8002a4e:	6923      	ldr	r3, [r4, #16]
 8002a50:	b94b      	cbnz	r3, 8002a66 <__swsetup_r+0x9a>
 8002a52:	89a3      	ldrh	r3, [r4, #12]
 8002a54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a5c:	d003      	beq.n	8002a66 <__swsetup_r+0x9a>
 8002a5e:	4621      	mov	r1, r4
 8002a60:	4630      	mov	r0, r6
 8002a62:	f000 f929 	bl	8002cb8 <__smakebuf_r>
 8002a66:	89a0      	ldrh	r0, [r4, #12]
 8002a68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002a6c:	f010 0301 	ands.w	r3, r0, #1
 8002a70:	d00a      	beq.n	8002a88 <__swsetup_r+0xbc>
 8002a72:	2300      	movs	r3, #0
 8002a74:	60a3      	str	r3, [r4, #8]
 8002a76:	6963      	ldr	r3, [r4, #20]
 8002a78:	425b      	negs	r3, r3
 8002a7a:	61a3      	str	r3, [r4, #24]
 8002a7c:	6923      	ldr	r3, [r4, #16]
 8002a7e:	b943      	cbnz	r3, 8002a92 <__swsetup_r+0xc6>
 8002a80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002a84:	d1ba      	bne.n	80029fc <__swsetup_r+0x30>
 8002a86:	bd70      	pop	{r4, r5, r6, pc}
 8002a88:	0781      	lsls	r1, r0, #30
 8002a8a:	bf58      	it	pl
 8002a8c:	6963      	ldrpl	r3, [r4, #20]
 8002a8e:	60a3      	str	r3, [r4, #8]
 8002a90:	e7f4      	b.n	8002a7c <__swsetup_r+0xb0>
 8002a92:	2000      	movs	r0, #0
 8002a94:	e7f7      	b.n	8002a86 <__swsetup_r+0xba>
 8002a96:	bf00      	nop
 8002a98:	2000000c 	.word	0x2000000c
 8002a9c:	08002ed8 	.word	0x08002ed8
 8002aa0:	08002ef8 	.word	0x08002ef8
 8002aa4:	08002eb8 	.word	0x08002eb8

08002aa8 <_close_r>:
 8002aa8:	b538      	push	{r3, r4, r5, lr}
 8002aaa:	2300      	movs	r3, #0
 8002aac:	4d05      	ldr	r5, [pc, #20]	; (8002ac4 <_close_r+0x1c>)
 8002aae:	4604      	mov	r4, r0
 8002ab0:	4608      	mov	r0, r1
 8002ab2:	602b      	str	r3, [r5, #0]
 8002ab4:	f7fd fee1 	bl	800087a <_close>
 8002ab8:	1c43      	adds	r3, r0, #1
 8002aba:	d102      	bne.n	8002ac2 <_close_r+0x1a>
 8002abc:	682b      	ldr	r3, [r5, #0]
 8002abe:	b103      	cbz	r3, 8002ac2 <_close_r+0x1a>
 8002ac0:	6023      	str	r3, [r4, #0]
 8002ac2:	bd38      	pop	{r3, r4, r5, pc}
 8002ac4:	20000414 	.word	0x20000414

08002ac8 <__sflush_r>:
 8002ac8:	898a      	ldrh	r2, [r1, #12]
 8002aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ace:	4605      	mov	r5, r0
 8002ad0:	0710      	lsls	r0, r2, #28
 8002ad2:	460c      	mov	r4, r1
 8002ad4:	d458      	bmi.n	8002b88 <__sflush_r+0xc0>
 8002ad6:	684b      	ldr	r3, [r1, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	dc05      	bgt.n	8002ae8 <__sflush_r+0x20>
 8002adc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	dc02      	bgt.n	8002ae8 <__sflush_r+0x20>
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ae8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002aea:	2e00      	cmp	r6, #0
 8002aec:	d0f9      	beq.n	8002ae2 <__sflush_r+0x1a>
 8002aee:	2300      	movs	r3, #0
 8002af0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002af4:	682f      	ldr	r7, [r5, #0]
 8002af6:	602b      	str	r3, [r5, #0]
 8002af8:	d032      	beq.n	8002b60 <__sflush_r+0x98>
 8002afa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002afc:	89a3      	ldrh	r3, [r4, #12]
 8002afe:	075a      	lsls	r2, r3, #29
 8002b00:	d505      	bpl.n	8002b0e <__sflush_r+0x46>
 8002b02:	6863      	ldr	r3, [r4, #4]
 8002b04:	1ac0      	subs	r0, r0, r3
 8002b06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b08:	b10b      	cbz	r3, 8002b0e <__sflush_r+0x46>
 8002b0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b0c:	1ac0      	subs	r0, r0, r3
 8002b0e:	2300      	movs	r3, #0
 8002b10:	4602      	mov	r2, r0
 8002b12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b14:	4628      	mov	r0, r5
 8002b16:	6a21      	ldr	r1, [r4, #32]
 8002b18:	47b0      	blx	r6
 8002b1a:	1c43      	adds	r3, r0, #1
 8002b1c:	89a3      	ldrh	r3, [r4, #12]
 8002b1e:	d106      	bne.n	8002b2e <__sflush_r+0x66>
 8002b20:	6829      	ldr	r1, [r5, #0]
 8002b22:	291d      	cmp	r1, #29
 8002b24:	d82c      	bhi.n	8002b80 <__sflush_r+0xb8>
 8002b26:	4a2a      	ldr	r2, [pc, #168]	; (8002bd0 <__sflush_r+0x108>)
 8002b28:	40ca      	lsrs	r2, r1
 8002b2a:	07d6      	lsls	r6, r2, #31
 8002b2c:	d528      	bpl.n	8002b80 <__sflush_r+0xb8>
 8002b2e:	2200      	movs	r2, #0
 8002b30:	6062      	str	r2, [r4, #4]
 8002b32:	6922      	ldr	r2, [r4, #16]
 8002b34:	04d9      	lsls	r1, r3, #19
 8002b36:	6022      	str	r2, [r4, #0]
 8002b38:	d504      	bpl.n	8002b44 <__sflush_r+0x7c>
 8002b3a:	1c42      	adds	r2, r0, #1
 8002b3c:	d101      	bne.n	8002b42 <__sflush_r+0x7a>
 8002b3e:	682b      	ldr	r3, [r5, #0]
 8002b40:	b903      	cbnz	r3, 8002b44 <__sflush_r+0x7c>
 8002b42:	6560      	str	r0, [r4, #84]	; 0x54
 8002b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b46:	602f      	str	r7, [r5, #0]
 8002b48:	2900      	cmp	r1, #0
 8002b4a:	d0ca      	beq.n	8002ae2 <__sflush_r+0x1a>
 8002b4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b50:	4299      	cmp	r1, r3
 8002b52:	d002      	beq.n	8002b5a <__sflush_r+0x92>
 8002b54:	4628      	mov	r0, r5
 8002b56:	f000 f909 	bl	8002d6c <_free_r>
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	6360      	str	r0, [r4, #52]	; 0x34
 8002b5e:	e7c1      	b.n	8002ae4 <__sflush_r+0x1c>
 8002b60:	6a21      	ldr	r1, [r4, #32]
 8002b62:	2301      	movs	r3, #1
 8002b64:	4628      	mov	r0, r5
 8002b66:	47b0      	blx	r6
 8002b68:	1c41      	adds	r1, r0, #1
 8002b6a:	d1c7      	bne.n	8002afc <__sflush_r+0x34>
 8002b6c:	682b      	ldr	r3, [r5, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0c4      	beq.n	8002afc <__sflush_r+0x34>
 8002b72:	2b1d      	cmp	r3, #29
 8002b74:	d001      	beq.n	8002b7a <__sflush_r+0xb2>
 8002b76:	2b16      	cmp	r3, #22
 8002b78:	d101      	bne.n	8002b7e <__sflush_r+0xb6>
 8002b7a:	602f      	str	r7, [r5, #0]
 8002b7c:	e7b1      	b.n	8002ae2 <__sflush_r+0x1a>
 8002b7e:	89a3      	ldrh	r3, [r4, #12]
 8002b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b84:	81a3      	strh	r3, [r4, #12]
 8002b86:	e7ad      	b.n	8002ae4 <__sflush_r+0x1c>
 8002b88:	690f      	ldr	r7, [r1, #16]
 8002b8a:	2f00      	cmp	r7, #0
 8002b8c:	d0a9      	beq.n	8002ae2 <__sflush_r+0x1a>
 8002b8e:	0793      	lsls	r3, r2, #30
 8002b90:	bf18      	it	ne
 8002b92:	2300      	movne	r3, #0
 8002b94:	680e      	ldr	r6, [r1, #0]
 8002b96:	bf08      	it	eq
 8002b98:	694b      	ldreq	r3, [r1, #20]
 8002b9a:	eba6 0807 	sub.w	r8, r6, r7
 8002b9e:	600f      	str	r7, [r1, #0]
 8002ba0:	608b      	str	r3, [r1, #8]
 8002ba2:	f1b8 0f00 	cmp.w	r8, #0
 8002ba6:	dd9c      	ble.n	8002ae2 <__sflush_r+0x1a>
 8002ba8:	4643      	mov	r3, r8
 8002baa:	463a      	mov	r2, r7
 8002bac:	4628      	mov	r0, r5
 8002bae:	6a21      	ldr	r1, [r4, #32]
 8002bb0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002bb2:	47b0      	blx	r6
 8002bb4:	2800      	cmp	r0, #0
 8002bb6:	dc06      	bgt.n	8002bc6 <__sflush_r+0xfe>
 8002bb8:	89a3      	ldrh	r3, [r4, #12]
 8002bba:	f04f 30ff 	mov.w	r0, #4294967295
 8002bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bc2:	81a3      	strh	r3, [r4, #12]
 8002bc4:	e78e      	b.n	8002ae4 <__sflush_r+0x1c>
 8002bc6:	4407      	add	r7, r0
 8002bc8:	eba8 0800 	sub.w	r8, r8, r0
 8002bcc:	e7e9      	b.n	8002ba2 <__sflush_r+0xda>
 8002bce:	bf00      	nop
 8002bd0:	20400001 	.word	0x20400001

08002bd4 <_fflush_r>:
 8002bd4:	b538      	push	{r3, r4, r5, lr}
 8002bd6:	690b      	ldr	r3, [r1, #16]
 8002bd8:	4605      	mov	r5, r0
 8002bda:	460c      	mov	r4, r1
 8002bdc:	b913      	cbnz	r3, 8002be4 <_fflush_r+0x10>
 8002bde:	2500      	movs	r5, #0
 8002be0:	4628      	mov	r0, r5
 8002be2:	bd38      	pop	{r3, r4, r5, pc}
 8002be4:	b118      	cbz	r0, 8002bee <_fflush_r+0x1a>
 8002be6:	6983      	ldr	r3, [r0, #24]
 8002be8:	b90b      	cbnz	r3, 8002bee <_fflush_r+0x1a>
 8002bea:	f7ff fa4f 	bl	800208c <__sinit>
 8002bee:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <_fflush_r+0x6c>)
 8002bf0:	429c      	cmp	r4, r3
 8002bf2:	d11b      	bne.n	8002c2c <_fflush_r+0x58>
 8002bf4:	686c      	ldr	r4, [r5, #4]
 8002bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0ef      	beq.n	8002bde <_fflush_r+0xa>
 8002bfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002c00:	07d0      	lsls	r0, r2, #31
 8002c02:	d404      	bmi.n	8002c0e <_fflush_r+0x3a>
 8002c04:	0599      	lsls	r1, r3, #22
 8002c06:	d402      	bmi.n	8002c0e <_fflush_r+0x3a>
 8002c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c0a:	f7ff fadd 	bl	80021c8 <__retarget_lock_acquire_recursive>
 8002c0e:	4628      	mov	r0, r5
 8002c10:	4621      	mov	r1, r4
 8002c12:	f7ff ff59 	bl	8002ac8 <__sflush_r>
 8002c16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c18:	4605      	mov	r5, r0
 8002c1a:	07da      	lsls	r2, r3, #31
 8002c1c:	d4e0      	bmi.n	8002be0 <_fflush_r+0xc>
 8002c1e:	89a3      	ldrh	r3, [r4, #12]
 8002c20:	059b      	lsls	r3, r3, #22
 8002c22:	d4dd      	bmi.n	8002be0 <_fflush_r+0xc>
 8002c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c26:	f7ff fad0 	bl	80021ca <__retarget_lock_release_recursive>
 8002c2a:	e7d9      	b.n	8002be0 <_fflush_r+0xc>
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <_fflush_r+0x70>)
 8002c2e:	429c      	cmp	r4, r3
 8002c30:	d101      	bne.n	8002c36 <_fflush_r+0x62>
 8002c32:	68ac      	ldr	r4, [r5, #8]
 8002c34:	e7df      	b.n	8002bf6 <_fflush_r+0x22>
 8002c36:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <_fflush_r+0x74>)
 8002c38:	429c      	cmp	r4, r3
 8002c3a:	bf08      	it	eq
 8002c3c:	68ec      	ldreq	r4, [r5, #12]
 8002c3e:	e7da      	b.n	8002bf6 <_fflush_r+0x22>
 8002c40:	08002ed8 	.word	0x08002ed8
 8002c44:	08002ef8 	.word	0x08002ef8
 8002c48:	08002eb8 	.word	0x08002eb8

08002c4c <_lseek_r>:
 8002c4c:	b538      	push	{r3, r4, r5, lr}
 8002c4e:	4604      	mov	r4, r0
 8002c50:	4608      	mov	r0, r1
 8002c52:	4611      	mov	r1, r2
 8002c54:	2200      	movs	r2, #0
 8002c56:	4d05      	ldr	r5, [pc, #20]	; (8002c6c <_lseek_r+0x20>)
 8002c58:	602a      	str	r2, [r5, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f7fd fe31 	bl	80008c2 <_lseek>
 8002c60:	1c43      	adds	r3, r0, #1
 8002c62:	d102      	bne.n	8002c6a <_lseek_r+0x1e>
 8002c64:	682b      	ldr	r3, [r5, #0]
 8002c66:	b103      	cbz	r3, 8002c6a <_lseek_r+0x1e>
 8002c68:	6023      	str	r3, [r4, #0]
 8002c6a:	bd38      	pop	{r3, r4, r5, pc}
 8002c6c:	20000414 	.word	0x20000414

08002c70 <__swhatbuf_r>:
 8002c70:	b570      	push	{r4, r5, r6, lr}
 8002c72:	460e      	mov	r6, r1
 8002c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c78:	4614      	mov	r4, r2
 8002c7a:	2900      	cmp	r1, #0
 8002c7c:	461d      	mov	r5, r3
 8002c7e:	b096      	sub	sp, #88	; 0x58
 8002c80:	da07      	bge.n	8002c92 <__swhatbuf_r+0x22>
 8002c82:	2300      	movs	r3, #0
 8002c84:	602b      	str	r3, [r5, #0]
 8002c86:	89b3      	ldrh	r3, [r6, #12]
 8002c88:	061a      	lsls	r2, r3, #24
 8002c8a:	d410      	bmi.n	8002cae <__swhatbuf_r+0x3e>
 8002c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c90:	e00e      	b.n	8002cb0 <__swhatbuf_r+0x40>
 8002c92:	466a      	mov	r2, sp
 8002c94:	f000 f8c8 	bl	8002e28 <_fstat_r>
 8002c98:	2800      	cmp	r0, #0
 8002c9a:	dbf2      	blt.n	8002c82 <__swhatbuf_r+0x12>
 8002c9c:	9a01      	ldr	r2, [sp, #4]
 8002c9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002ca2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002ca6:	425a      	negs	r2, r3
 8002ca8:	415a      	adcs	r2, r3
 8002caa:	602a      	str	r2, [r5, #0]
 8002cac:	e7ee      	b.n	8002c8c <__swhatbuf_r+0x1c>
 8002cae:	2340      	movs	r3, #64	; 0x40
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	6023      	str	r3, [r4, #0]
 8002cb4:	b016      	add	sp, #88	; 0x58
 8002cb6:	bd70      	pop	{r4, r5, r6, pc}

08002cb8 <__smakebuf_r>:
 8002cb8:	898b      	ldrh	r3, [r1, #12]
 8002cba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002cbc:	079d      	lsls	r5, r3, #30
 8002cbe:	4606      	mov	r6, r0
 8002cc0:	460c      	mov	r4, r1
 8002cc2:	d507      	bpl.n	8002cd4 <__smakebuf_r+0x1c>
 8002cc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002cc8:	6023      	str	r3, [r4, #0]
 8002cca:	6123      	str	r3, [r4, #16]
 8002ccc:	2301      	movs	r3, #1
 8002cce:	6163      	str	r3, [r4, #20]
 8002cd0:	b002      	add	sp, #8
 8002cd2:	bd70      	pop	{r4, r5, r6, pc}
 8002cd4:	466a      	mov	r2, sp
 8002cd6:	ab01      	add	r3, sp, #4
 8002cd8:	f7ff ffca 	bl	8002c70 <__swhatbuf_r>
 8002cdc:	9900      	ldr	r1, [sp, #0]
 8002cde:	4605      	mov	r5, r0
 8002ce0:	4630      	mov	r0, r6
 8002ce2:	f7ff fa73 	bl	80021cc <_malloc_r>
 8002ce6:	b948      	cbnz	r0, 8002cfc <__smakebuf_r+0x44>
 8002ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cec:	059a      	lsls	r2, r3, #22
 8002cee:	d4ef      	bmi.n	8002cd0 <__smakebuf_r+0x18>
 8002cf0:	f023 0303 	bic.w	r3, r3, #3
 8002cf4:	f043 0302 	orr.w	r3, r3, #2
 8002cf8:	81a3      	strh	r3, [r4, #12]
 8002cfa:	e7e3      	b.n	8002cc4 <__smakebuf_r+0xc>
 8002cfc:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <__smakebuf_r+0x7c>)
 8002cfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8002d00:	89a3      	ldrh	r3, [r4, #12]
 8002d02:	6020      	str	r0, [r4, #0]
 8002d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d08:	81a3      	strh	r3, [r4, #12]
 8002d0a:	9b00      	ldr	r3, [sp, #0]
 8002d0c:	6120      	str	r0, [r4, #16]
 8002d0e:	6163      	str	r3, [r4, #20]
 8002d10:	9b01      	ldr	r3, [sp, #4]
 8002d12:	b15b      	cbz	r3, 8002d2c <__smakebuf_r+0x74>
 8002d14:	4630      	mov	r0, r6
 8002d16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d1a:	f000 f897 	bl	8002e4c <_isatty_r>
 8002d1e:	b128      	cbz	r0, 8002d2c <__smakebuf_r+0x74>
 8002d20:	89a3      	ldrh	r3, [r4, #12]
 8002d22:	f023 0303 	bic.w	r3, r3, #3
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	81a3      	strh	r3, [r4, #12]
 8002d2c:	89a0      	ldrh	r0, [r4, #12]
 8002d2e:	4305      	orrs	r5, r0
 8002d30:	81a5      	strh	r5, [r4, #12]
 8002d32:	e7cd      	b.n	8002cd0 <__smakebuf_r+0x18>
 8002d34:	08002025 	.word	0x08002025

08002d38 <memchr>:
 8002d38:	4603      	mov	r3, r0
 8002d3a:	b510      	push	{r4, lr}
 8002d3c:	b2c9      	uxtb	r1, r1
 8002d3e:	4402      	add	r2, r0
 8002d40:	4293      	cmp	r3, r2
 8002d42:	4618      	mov	r0, r3
 8002d44:	d101      	bne.n	8002d4a <memchr+0x12>
 8002d46:	2000      	movs	r0, #0
 8002d48:	e003      	b.n	8002d52 <memchr+0x1a>
 8002d4a:	7804      	ldrb	r4, [r0, #0]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	428c      	cmp	r4, r1
 8002d50:	d1f6      	bne.n	8002d40 <memchr+0x8>
 8002d52:	bd10      	pop	{r4, pc}

08002d54 <__malloc_lock>:
 8002d54:	4801      	ldr	r0, [pc, #4]	; (8002d5c <__malloc_lock+0x8>)
 8002d56:	f7ff ba37 	b.w	80021c8 <__retarget_lock_acquire_recursive>
 8002d5a:	bf00      	nop
 8002d5c:	2000040c 	.word	0x2000040c

08002d60 <__malloc_unlock>:
 8002d60:	4801      	ldr	r0, [pc, #4]	; (8002d68 <__malloc_unlock+0x8>)
 8002d62:	f7ff ba32 	b.w	80021ca <__retarget_lock_release_recursive>
 8002d66:	bf00      	nop
 8002d68:	2000040c 	.word	0x2000040c

08002d6c <_free_r>:
 8002d6c:	b538      	push	{r3, r4, r5, lr}
 8002d6e:	4605      	mov	r5, r0
 8002d70:	2900      	cmp	r1, #0
 8002d72:	d043      	beq.n	8002dfc <_free_r+0x90>
 8002d74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d78:	1f0c      	subs	r4, r1, #4
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	bfb8      	it	lt
 8002d7e:	18e4      	addlt	r4, r4, r3
 8002d80:	f7ff ffe8 	bl	8002d54 <__malloc_lock>
 8002d84:	4a1e      	ldr	r2, [pc, #120]	; (8002e00 <_free_r+0x94>)
 8002d86:	6813      	ldr	r3, [r2, #0]
 8002d88:	4610      	mov	r0, r2
 8002d8a:	b933      	cbnz	r3, 8002d9a <_free_r+0x2e>
 8002d8c:	6063      	str	r3, [r4, #4]
 8002d8e:	6014      	str	r4, [r2, #0]
 8002d90:	4628      	mov	r0, r5
 8002d92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d96:	f7ff bfe3 	b.w	8002d60 <__malloc_unlock>
 8002d9a:	42a3      	cmp	r3, r4
 8002d9c:	d90a      	bls.n	8002db4 <_free_r+0x48>
 8002d9e:	6821      	ldr	r1, [r4, #0]
 8002da0:	1862      	adds	r2, r4, r1
 8002da2:	4293      	cmp	r3, r2
 8002da4:	bf01      	itttt	eq
 8002da6:	681a      	ldreq	r2, [r3, #0]
 8002da8:	685b      	ldreq	r3, [r3, #4]
 8002daa:	1852      	addeq	r2, r2, r1
 8002dac:	6022      	streq	r2, [r4, #0]
 8002dae:	6063      	str	r3, [r4, #4]
 8002db0:	6004      	str	r4, [r0, #0]
 8002db2:	e7ed      	b.n	8002d90 <_free_r+0x24>
 8002db4:	461a      	mov	r2, r3
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	b10b      	cbz	r3, 8002dbe <_free_r+0x52>
 8002dba:	42a3      	cmp	r3, r4
 8002dbc:	d9fa      	bls.n	8002db4 <_free_r+0x48>
 8002dbe:	6811      	ldr	r1, [r2, #0]
 8002dc0:	1850      	adds	r0, r2, r1
 8002dc2:	42a0      	cmp	r0, r4
 8002dc4:	d10b      	bne.n	8002dde <_free_r+0x72>
 8002dc6:	6820      	ldr	r0, [r4, #0]
 8002dc8:	4401      	add	r1, r0
 8002dca:	1850      	adds	r0, r2, r1
 8002dcc:	4283      	cmp	r3, r0
 8002dce:	6011      	str	r1, [r2, #0]
 8002dd0:	d1de      	bne.n	8002d90 <_free_r+0x24>
 8002dd2:	6818      	ldr	r0, [r3, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	4401      	add	r1, r0
 8002dd8:	6011      	str	r1, [r2, #0]
 8002dda:	6053      	str	r3, [r2, #4]
 8002ddc:	e7d8      	b.n	8002d90 <_free_r+0x24>
 8002dde:	d902      	bls.n	8002de6 <_free_r+0x7a>
 8002de0:	230c      	movs	r3, #12
 8002de2:	602b      	str	r3, [r5, #0]
 8002de4:	e7d4      	b.n	8002d90 <_free_r+0x24>
 8002de6:	6820      	ldr	r0, [r4, #0]
 8002de8:	1821      	adds	r1, r4, r0
 8002dea:	428b      	cmp	r3, r1
 8002dec:	bf01      	itttt	eq
 8002dee:	6819      	ldreq	r1, [r3, #0]
 8002df0:	685b      	ldreq	r3, [r3, #4]
 8002df2:	1809      	addeq	r1, r1, r0
 8002df4:	6021      	streq	r1, [r4, #0]
 8002df6:	6063      	str	r3, [r4, #4]
 8002df8:	6054      	str	r4, [r2, #4]
 8002dfa:	e7c9      	b.n	8002d90 <_free_r+0x24>
 8002dfc:	bd38      	pop	{r3, r4, r5, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000094 	.word	0x20000094

08002e04 <_read_r>:
 8002e04:	b538      	push	{r3, r4, r5, lr}
 8002e06:	4604      	mov	r4, r0
 8002e08:	4608      	mov	r0, r1
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	4d05      	ldr	r5, [pc, #20]	; (8002e24 <_read_r+0x20>)
 8002e10:	602a      	str	r2, [r5, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	f7fd fcf8 	bl	8000808 <_read>
 8002e18:	1c43      	adds	r3, r0, #1
 8002e1a:	d102      	bne.n	8002e22 <_read_r+0x1e>
 8002e1c:	682b      	ldr	r3, [r5, #0]
 8002e1e:	b103      	cbz	r3, 8002e22 <_read_r+0x1e>
 8002e20:	6023      	str	r3, [r4, #0]
 8002e22:	bd38      	pop	{r3, r4, r5, pc}
 8002e24:	20000414 	.word	0x20000414

08002e28 <_fstat_r>:
 8002e28:	b538      	push	{r3, r4, r5, lr}
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	4d06      	ldr	r5, [pc, #24]	; (8002e48 <_fstat_r+0x20>)
 8002e2e:	4604      	mov	r4, r0
 8002e30:	4608      	mov	r0, r1
 8002e32:	4611      	mov	r1, r2
 8002e34:	602b      	str	r3, [r5, #0]
 8002e36:	f7fd fd2b 	bl	8000890 <_fstat>
 8002e3a:	1c43      	adds	r3, r0, #1
 8002e3c:	d102      	bne.n	8002e44 <_fstat_r+0x1c>
 8002e3e:	682b      	ldr	r3, [r5, #0]
 8002e40:	b103      	cbz	r3, 8002e44 <_fstat_r+0x1c>
 8002e42:	6023      	str	r3, [r4, #0]
 8002e44:	bd38      	pop	{r3, r4, r5, pc}
 8002e46:	bf00      	nop
 8002e48:	20000414 	.word	0x20000414

08002e4c <_isatty_r>:
 8002e4c:	b538      	push	{r3, r4, r5, lr}
 8002e4e:	2300      	movs	r3, #0
 8002e50:	4d05      	ldr	r5, [pc, #20]	; (8002e68 <_isatty_r+0x1c>)
 8002e52:	4604      	mov	r4, r0
 8002e54:	4608      	mov	r0, r1
 8002e56:	602b      	str	r3, [r5, #0]
 8002e58:	f7fd fd29 	bl	80008ae <_isatty>
 8002e5c:	1c43      	adds	r3, r0, #1
 8002e5e:	d102      	bne.n	8002e66 <_isatty_r+0x1a>
 8002e60:	682b      	ldr	r3, [r5, #0]
 8002e62:	b103      	cbz	r3, 8002e66 <_isatty_r+0x1a>
 8002e64:	6023      	str	r3, [r4, #0]
 8002e66:	bd38      	pop	{r3, r4, r5, pc}
 8002e68:	20000414 	.word	0x20000414

08002e6c <_init>:
 8002e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6e:	bf00      	nop
 8002e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e72:	bc08      	pop	{r3}
 8002e74:	469e      	mov	lr, r3
 8002e76:	4770      	bx	lr

08002e78 <_fini>:
 8002e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7a:	bf00      	nop
 8002e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e7e:	bc08      	pop	{r3}
 8002e80:	469e      	mov	lr, r3
 8002e82:	4770      	bx	lr
