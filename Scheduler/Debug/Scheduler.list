
Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003218  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003324  08003324  00013324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003348  08003348  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003348  08003348  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003348  08003348  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003348  08003348  00013348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800334c  0800334c  0001334c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  20000018  08003368  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08003368  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a233  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da1  00000000  00000000  0002a274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  0002c018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a98  00000000  00000000  0002cbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a1a  00000000  00000000  0002d678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c67a  00000000  00000000  00045092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086b1e  00000000  00000000  0005170c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d822a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d60  00000000  00000000  000d8280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	0800330c 	.word	0x0800330c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	0800330c 	.word	0x0800330c

0800014c <SCH_Update>:
	}
	Error_code_G = 0;
	Timer_init();
	Watchdog_init();
}
void SCH_Update(void){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	unsigned char Index;
	for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e05c      	b.n	8000212 <SCH_Update+0xc6>
		if(SCH_tasks_G[Index].pTask){
 8000158:	79fa      	ldrb	r2, [r7, #7]
 800015a:	4932      	ldr	r1, [pc, #200]	; (8000224 <SCH_Update+0xd8>)
 800015c:	4613      	mov	r3, r2
 800015e:	009b      	lsls	r3, r3, #2
 8000160:	4413      	add	r3, r2
 8000162:	009b      	lsls	r3, r3, #2
 8000164:	440b      	add	r3, r1
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	2b00      	cmp	r3, #0
 800016a:	d04f      	beq.n	800020c <SCH_Update+0xc0>
			if(SCH_tasks_G[Index].Delay == 0){
 800016c:	79fa      	ldrb	r2, [r7, #7]
 800016e:	492d      	ldr	r1, [pc, #180]	; (8000224 <SCH_Update+0xd8>)
 8000170:	4613      	mov	r3, r2
 8000172:	009b      	lsls	r3, r3, #2
 8000174:	4413      	add	r3, r2
 8000176:	009b      	lsls	r3, r3, #2
 8000178:	440b      	add	r3, r1
 800017a:	3304      	adds	r3, #4
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d132      	bne.n	80001e8 <SCH_Update+0x9c>
				SCH_tasks_G[Index].RunMe += 1;
 8000182:	79fa      	ldrb	r2, [r7, #7]
 8000184:	4927      	ldr	r1, [pc, #156]	; (8000224 <SCH_Update+0xd8>)
 8000186:	4613      	mov	r3, r2
 8000188:	009b      	lsls	r3, r3, #2
 800018a:	4413      	add	r3, r2
 800018c:	009b      	lsls	r3, r3, #2
 800018e:	440b      	add	r3, r1
 8000190:	330c      	adds	r3, #12
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	79fa      	ldrb	r2, [r7, #7]
 8000196:	3301      	adds	r3, #1
 8000198:	b2d8      	uxtb	r0, r3
 800019a:	4922      	ldr	r1, [pc, #136]	; (8000224 <SCH_Update+0xd8>)
 800019c:	4613      	mov	r3, r2
 800019e:	009b      	lsls	r3, r3, #2
 80001a0:	4413      	add	r3, r2
 80001a2:	009b      	lsls	r3, r3, #2
 80001a4:	440b      	add	r3, r1
 80001a6:	330c      	adds	r3, #12
 80001a8:	4602      	mov	r2, r0
 80001aa:	701a      	strb	r2, [r3, #0]
				if(SCH_tasks_G[Index].Period){
 80001ac:	79fa      	ldrb	r2, [r7, #7]
 80001ae:	491d      	ldr	r1, [pc, #116]	; (8000224 <SCH_Update+0xd8>)
 80001b0:	4613      	mov	r3, r2
 80001b2:	009b      	lsls	r3, r3, #2
 80001b4:	4413      	add	r3, r2
 80001b6:	009b      	lsls	r3, r3, #2
 80001b8:	440b      	add	r3, r1
 80001ba:	3308      	adds	r3, #8
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d024      	beq.n	800020c <SCH_Update+0xc0>
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 80001c2:	79f9      	ldrb	r1, [r7, #7]
 80001c4:	79fa      	ldrb	r2, [r7, #7]
 80001c6:	4817      	ldr	r0, [pc, #92]	; (8000224 <SCH_Update+0xd8>)
 80001c8:	460b      	mov	r3, r1
 80001ca:	009b      	lsls	r3, r3, #2
 80001cc:	440b      	add	r3, r1
 80001ce:	009b      	lsls	r3, r3, #2
 80001d0:	4403      	add	r3, r0
 80001d2:	3308      	adds	r3, #8
 80001d4:	6819      	ldr	r1, [r3, #0]
 80001d6:	4813      	ldr	r0, [pc, #76]	; (8000224 <SCH_Update+0xd8>)
 80001d8:	4613      	mov	r3, r2
 80001da:	009b      	lsls	r3, r3, #2
 80001dc:	4413      	add	r3, r2
 80001de:	009b      	lsls	r3, r3, #2
 80001e0:	4403      	add	r3, r0
 80001e2:	3304      	adds	r3, #4
 80001e4:	6019      	str	r1, [r3, #0]
 80001e6:	e011      	b.n	800020c <SCH_Update+0xc0>
				}
			}
			else{
				SCH_tasks_G[Index].Delay--;
 80001e8:	79fa      	ldrb	r2, [r7, #7]
 80001ea:	490e      	ldr	r1, [pc, #56]	; (8000224 <SCH_Update+0xd8>)
 80001ec:	4613      	mov	r3, r2
 80001ee:	009b      	lsls	r3, r3, #2
 80001f0:	4413      	add	r3, r2
 80001f2:	009b      	lsls	r3, r3, #2
 80001f4:	440b      	add	r3, r1
 80001f6:	3304      	adds	r3, #4
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	1e59      	subs	r1, r3, #1
 80001fc:	4809      	ldr	r0, [pc, #36]	; (8000224 <SCH_Update+0xd8>)
 80001fe:	4613      	mov	r3, r2
 8000200:	009b      	lsls	r3, r3, #2
 8000202:	4413      	add	r3, r2
 8000204:	009b      	lsls	r3, r3, #2
 8000206:	4403      	add	r3, r0
 8000208:	3304      	adds	r3, #4
 800020a:	6019      	str	r1, [r3, #0]
	for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	3301      	adds	r3, #1
 8000210:	71fb      	strb	r3, [r7, #7]
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	2b27      	cmp	r3, #39	; 0x27
 8000216:	d99f      	bls.n	8000158 <SCH_Update+0xc>
			}
		}
	}
}
 8000218:	bf00      	nop
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr
 8000224:	20000098 	.word	0x20000098

08000228 <SCH_Add_Task>:
unsigned char SCH_Add_Task(void(*pFunction)() , unsigned int DELAY,unsigned int PERIOD){
 8000228:	b480      	push	{r7}
 800022a:	b087      	sub	sp, #28
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	607a      	str	r2, [r7, #4]
	unsigned char Index = 0;
 8000234:	2300      	movs	r3, #0
 8000236:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)){
 8000238:	e002      	b.n	8000240 <SCH_Add_Task+0x18>
		Index++;
 800023a:	7dfb      	ldrb	r3, [r7, #23]
 800023c:	3301      	adds	r3, #1
 800023e:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)){
 8000240:	7dfa      	ldrb	r2, [r7, #23]
 8000242:	4920      	ldr	r1, [pc, #128]	; (80002c4 <SCH_Add_Task+0x9c>)
 8000244:	4613      	mov	r3, r2
 8000246:	009b      	lsls	r3, r3, #2
 8000248:	4413      	add	r3, r2
 800024a:	009b      	lsls	r3, r3, #2
 800024c:	440b      	add	r3, r1
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d002      	beq.n	800025a <SCH_Add_Task+0x32>
 8000254:	7dfb      	ldrb	r3, [r7, #23]
 8000256:	2b27      	cmp	r3, #39	; 0x27
 8000258:	d9ef      	bls.n	800023a <SCH_Add_Task+0x12>
	}
	if(Index == SCH_MAX_TASKS){
 800025a:	7dfb      	ldrb	r3, [r7, #23]
 800025c:	2b28      	cmp	r3, #40	; 0x28
 800025e:	d104      	bne.n	800026a <SCH_Add_Task+0x42>
		Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 8000260:	4b19      	ldr	r3, [pc, #100]	; (80002c8 <SCH_Add_Task+0xa0>)
 8000262:	2201      	movs	r2, #1
 8000264:	701a      	strb	r2, [r3, #0]
		return SCH_MAX_TASKS;
 8000266:	2328      	movs	r3, #40	; 0x28
 8000268:	e027      	b.n	80002ba <SCH_Add_Task+0x92>
	}
	SCH_tasks_G[Index].pTask = pFunction;
 800026a:	7dfa      	ldrb	r2, [r7, #23]
 800026c:	4915      	ldr	r1, [pc, #84]	; (80002c4 <SCH_Add_Task+0x9c>)
 800026e:	4613      	mov	r3, r2
 8000270:	009b      	lsls	r3, r3, #2
 8000272:	4413      	add	r3, r2
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	440b      	add	r3, r1
 8000278:	68fa      	ldr	r2, [r7, #12]
 800027a:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Delay = DELAY;
 800027c:	7dfa      	ldrb	r2, [r7, #23]
 800027e:	4911      	ldr	r1, [pc, #68]	; (80002c4 <SCH_Add_Task+0x9c>)
 8000280:	4613      	mov	r3, r2
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	4413      	add	r3, r2
 8000286:	009b      	lsls	r3, r3, #2
 8000288:	440b      	add	r3, r1
 800028a:	3304      	adds	r3, #4
 800028c:	68ba      	ldr	r2, [r7, #8]
 800028e:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Period = PERIOD;
 8000290:	7dfa      	ldrb	r2, [r7, #23]
 8000292:	490c      	ldr	r1, [pc, #48]	; (80002c4 <SCH_Add_Task+0x9c>)
 8000294:	4613      	mov	r3, r2
 8000296:	009b      	lsls	r3, r3, #2
 8000298:	4413      	add	r3, r2
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	440b      	add	r3, r1
 800029e:	3308      	adds	r3, #8
 80002a0:	687a      	ldr	r2, [r7, #4]
 80002a2:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].RunMe = 0;
 80002a4:	7dfa      	ldrb	r2, [r7, #23]
 80002a6:	4907      	ldr	r1, [pc, #28]	; (80002c4 <SCH_Add_Task+0x9c>)
 80002a8:	4613      	mov	r3, r2
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	4413      	add	r3, r2
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	440b      	add	r3, r1
 80002b2:	330c      	adds	r3, #12
 80002b4:	2200      	movs	r2, #0
 80002b6:	701a      	strb	r2, [r3, #0]
	return Index;
 80002b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	371c      	adds	r7, #28
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	20000098 	.word	0x20000098
 80002c8:	20000034 	.word	0x20000034

080002cc <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
	unsigned char Index ;
	for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 80002d2:	2300      	movs	r3, #0
 80002d4:	71fb      	strb	r3, [r7, #7]
 80002d6:	e039      	b.n	800034c <SCH_Dispatch_Tasks+0x80>
		if(SCH_tasks_G [Index].RunMe > 0){
 80002d8:	79fa      	ldrb	r2, [r7, #7]
 80002da:	4922      	ldr	r1, [pc, #136]	; (8000364 <SCH_Dispatch_Tasks+0x98>)
 80002dc:	4613      	mov	r3, r2
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	4413      	add	r3, r2
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	440b      	add	r3, r1
 80002e6:	330c      	adds	r3, #12
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d02b      	beq.n	8000346 <SCH_Dispatch_Tasks+0x7a>
			(*SCH_tasks_G[Index].pTask)();
 80002ee:	79fa      	ldrb	r2, [r7, #7]
 80002f0:	491c      	ldr	r1, [pc, #112]	; (8000364 <SCH_Dispatch_Tasks+0x98>)
 80002f2:	4613      	mov	r3, r2
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	4413      	add	r3, r2
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	440b      	add	r3, r1
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4798      	blx	r3
			SCH_tasks_G[Index].RunMe--;
 8000300:	79fa      	ldrb	r2, [r7, #7]
 8000302:	4918      	ldr	r1, [pc, #96]	; (8000364 <SCH_Dispatch_Tasks+0x98>)
 8000304:	4613      	mov	r3, r2
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	4413      	add	r3, r2
 800030a:	009b      	lsls	r3, r3, #2
 800030c:	440b      	add	r3, r1
 800030e:	330c      	adds	r3, #12
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	3b01      	subs	r3, #1
 8000314:	b2d8      	uxtb	r0, r3
 8000316:	4913      	ldr	r1, [pc, #76]	; (8000364 <SCH_Dispatch_Tasks+0x98>)
 8000318:	4613      	mov	r3, r2
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	4413      	add	r3, r2
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	440b      	add	r3, r1
 8000322:	330c      	adds	r3, #12
 8000324:	4602      	mov	r2, r0
 8000326:	701a      	strb	r2, [r3, #0]
			if(SCH_tasks_G[Index].Period == 0){
 8000328:	79fa      	ldrb	r2, [r7, #7]
 800032a:	490e      	ldr	r1, [pc, #56]	; (8000364 <SCH_Dispatch_Tasks+0x98>)
 800032c:	4613      	mov	r3, r2
 800032e:	009b      	lsls	r3, r3, #2
 8000330:	4413      	add	r3, r2
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	440b      	add	r3, r1
 8000336:	3308      	adds	r3, #8
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d103      	bne.n	8000346 <SCH_Dispatch_Tasks+0x7a>
				SCH_Delete_Task(Index);
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	4618      	mov	r0, r3
 8000342:	f000 f811 	bl	8000368 <SCH_Delete_Task>
	for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	3301      	adds	r3, #1
 800034a:	71fb      	strb	r3, [r7, #7]
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	2b27      	cmp	r3, #39	; 0x27
 8000350:	d9c2      	bls.n	80002d8 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
	SCH_Report_Status();
 8000352:	f000 f857 	bl	8000404 <SCH_Report_Status>
	SCH_Go_To_Sleep();
 8000356:	f000 f84f 	bl	80003f8 <SCH_Go_To_Sleep>
}
 800035a:	bf00      	nop
 800035c:	3708      	adds	r7, #8
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000098 	.word	0x20000098

08000368 <SCH_Delete_Task>:
uint8_t SCH_Delete_Task(const uint32_t TASK_INDEX){
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	unsigned char Return_code;
	if(SCH_tasks_G[TASK_INDEX].pTask == 0){
 8000370:	491f      	ldr	r1, [pc, #124]	; (80003f0 <SCH_Delete_Task+0x88>)
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	4613      	mov	r3, r2
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	4413      	add	r3, r2
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	440b      	add	r3, r1
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d105      	bne.n	8000390 <SCH_Delete_Task+0x28>
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 8000384:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <SCH_Delete_Task+0x8c>)
 8000386:	2208      	movs	r2, #8
 8000388:	701a      	strb	r2, [r3, #0]
		Return_code = RETURN_ERROR;
 800038a:	2309      	movs	r3, #9
 800038c:	73fb      	strb	r3, [r7, #15]
 800038e:	e001      	b.n	8000394 <SCH_Delete_Task+0x2c>
	}
	else{
		Return_code = RETURN_NORMAL;
 8000390:	230a      	movs	r3, #10
 8000392:	73fb      	strb	r3, [r7, #15]
	}
	SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 8000394:	4916      	ldr	r1, [pc, #88]	; (80003f0 <SCH_Delete_Task+0x88>)
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	4613      	mov	r3, r2
 800039a:	009b      	lsls	r3, r3, #2
 800039c:	4413      	add	r3, r2
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	440b      	add	r3, r1
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Delay = 0;
 80003a6:	4912      	ldr	r1, [pc, #72]	; (80003f0 <SCH_Delete_Task+0x88>)
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	4613      	mov	r3, r2
 80003ac:	009b      	lsls	r3, r3, #2
 80003ae:	4413      	add	r3, r2
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	440b      	add	r3, r1
 80003b4:	3304      	adds	r3, #4
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Period = 0;
 80003ba:	490d      	ldr	r1, [pc, #52]	; (80003f0 <SCH_Delete_Task+0x88>)
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	4613      	mov	r3, r2
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	4413      	add	r3, r2
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	440b      	add	r3, r1
 80003c8:	3308      	adds	r3, #8
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].RunMe = 0;
 80003ce:	4908      	ldr	r1, [pc, #32]	; (80003f0 <SCH_Delete_Task+0x88>)
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	4613      	mov	r3, r2
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	4413      	add	r3, r2
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	440b      	add	r3, r1
 80003dc:	330c      	adds	r3, #12
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
	return Return_code;
 80003e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	3714      	adds	r7, #20
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	20000098 	.word	0x20000098
 80003f4:	20000034 	.word	0x20000034

080003f8 <SCH_Go_To_Sleep>:
void SCH_Go_To_Sleep(void){
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
//todo
}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr

08000404 <SCH_Report_Status>:
void SCH_Report_Status(void){
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
				Error_code_G = 0;
			}
		}
	}
#endif
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr

08000410 <task1>:
	statusy = AUTO_GREEN;
}
void task_auto_yellowY(void){
	statusy = AUTO_YELLOW;
}
void task1(void){
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED8_GPIO_Port, LED8_Pin);
 8000414:	2104      	movs	r1, #4
 8000416:	4802      	ldr	r0, [pc, #8]	; (8000420 <task1+0x10>)
 8000418:	f001 ff7b 	bl	8002312 <HAL_GPIO_TogglePin>
}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40010800 	.word	0x40010800

08000424 <task2>:
void task2(void){
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED9_GPIO_Port, LED9_Pin);
 8000428:	2108      	movs	r1, #8
 800042a:	4802      	ldr	r0, [pc, #8]	; (8000434 <task2+0x10>)
 800042c:	f001 ff71 	bl	8002312 <HAL_GPIO_TogglePin>
}
 8000430:	bf00      	nop
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40010800 	.word	0x40010800

08000438 <task3>:
void task3(void){
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED10_GPIO_Port, LED10_Pin);
 800043c:	2110      	movs	r1, #16
 800043e:	4802      	ldr	r0, [pc, #8]	; (8000448 <task3+0x10>)
 8000440:	f001 ff67 	bl	8002312 <HAL_GPIO_TogglePin>
}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40010800 	.word	0x40010800

0800044c <task4>:
void task4(void){
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED11_GPIO_Port, LED11_Pin);
 8000450:	2120      	movs	r1, #32
 8000452:	4802      	ldr	r0, [pc, #8]	; (800045c <task4+0x10>)
 8000454:	f001 ff5d 	bl	8002312 <HAL_GPIO_TogglePin>
}
 8000458:	bf00      	nop
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40010800 	.word	0x40010800

08000460 <task5>:
void task5(void){
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED12_GPIO_Port, LED12_Pin);
 8000464:	2140      	movs	r1, #64	; 0x40
 8000466:	4802      	ldr	r0, [pc, #8]	; (8000470 <task5+0x10>)
 8000468:	f001 ff53 	bl	8002312 <HAL_GPIO_TogglePin>
}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40010800 	.word	0x40010800

08000474 <SetMode>:
int Time_red = 50;
int Time_green = 30;
int Time_yellow = 20;
int counter_x = 0;
int counter_y = 0;
void SetMode(void){
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	if(ProcessButton3() == 1){
 8000478:	f000 fd68 	bl	8000f4c <ProcessButton3>
 800047c:	4603      	mov	r3, r0
 800047e:	2b01      	cmp	r3, #1
 8000480:	f040 8084 	bne.w	800058c <SetMode+0x118>
		if(counterMode == 2){
 8000484:	4b42      	ldr	r3, [pc, #264]	; (8000590 <SetMode+0x11c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b02      	cmp	r3, #2
 800048a:	d12b      	bne.n	80004e4 <SetMode+0x70>
			Time_red = counterTimeSet * 10;
 800048c:	4b41      	ldr	r3, [pc, #260]	; (8000594 <SetMode+0x120>)
 800048e:	681a      	ldr	r2, [r3, #0]
 8000490:	4613      	mov	r3, r2
 8000492:	009b      	lsls	r3, r3, #2
 8000494:	4413      	add	r3, r2
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	461a      	mov	r2, r3
 800049a:	4b3f      	ldr	r3, [pc, #252]	; (8000598 <SetMode+0x124>)
 800049c:	601a      	str	r2, [r3, #0]
			if(Time_red <= Time_green || Time_red <= Time_yellow){
 800049e:	4b3e      	ldr	r3, [pc, #248]	; (8000598 <SetMode+0x124>)
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	4b3e      	ldr	r3, [pc, #248]	; (800059c <SetMode+0x128>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	429a      	cmp	r2, r3
 80004a8:	dd05      	ble.n	80004b6 <SetMode+0x42>
 80004aa:	4b3b      	ldr	r3, [pc, #236]	; (8000598 <SetMode+0x124>)
 80004ac:	681a      	ldr	r2, [r3, #0]
 80004ae:	4b3c      	ldr	r3, [pc, #240]	; (80005a0 <SetMode+0x12c>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	429a      	cmp	r2, r3
 80004b4:	dc07      	bgt.n	80004c6 <SetMode+0x52>
				Time_red = Time_green + Time_yellow;
 80004b6:	4b39      	ldr	r3, [pc, #228]	; (800059c <SetMode+0x128>)
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	4b39      	ldr	r3, [pc, #228]	; (80005a0 <SetMode+0x12c>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4413      	add	r3, r2
 80004c0:	4a35      	ldr	r2, [pc, #212]	; (8000598 <SetMode+0x124>)
 80004c2:	6013      	str	r3, [r2, #0]
 80004c4:	e006      	b.n	80004d4 <SetMode+0x60>
			}
			else{
				Time_green = Time_red - Time_yellow;
 80004c6:	4b34      	ldr	r3, [pc, #208]	; (8000598 <SetMode+0x124>)
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	4b35      	ldr	r3, [pc, #212]	; (80005a0 <SetMode+0x12c>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	1ad3      	subs	r3, r2, r3
 80004d0:	4a32      	ldr	r2, [pc, #200]	; (800059c <SetMode+0x128>)
 80004d2:	6013      	str	r3, [r2, #0]
			}
			number_clock1 = Time_red;
 80004d4:	4b30      	ldr	r3, [pc, #192]	; (8000598 <SetMode+0x124>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a32      	ldr	r2, [pc, #200]	; (80005a4 <SetMode+0x130>)
 80004da:	6013      	str	r3, [r2, #0]
			number_clock2 = Time_green;
 80004dc:	4b2f      	ldr	r3, [pc, #188]	; (800059c <SetMode+0x128>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a31      	ldr	r2, [pc, #196]	; (80005a8 <SetMode+0x134>)
 80004e2:	6013      	str	r3, [r2, #0]
		}
		if(counterMode == 3){
 80004e4:	4b2a      	ldr	r3, [pc, #168]	; (8000590 <SetMode+0x11c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2b03      	cmp	r3, #3
 80004ea:	d125      	bne.n	8000538 <SetMode+0xc4>
			Time_green = counterTimeSet * 10;
 80004ec:	4b29      	ldr	r3, [pc, #164]	; (8000594 <SetMode+0x120>)
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	4613      	mov	r3, r2
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	4413      	add	r3, r2
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	461a      	mov	r2, r3
 80004fa:	4b28      	ldr	r3, [pc, #160]	; (800059c <SetMode+0x128>)
 80004fc:	601a      	str	r2, [r3, #0]
			if(Time_red <= Time_green){
 80004fe:	4b26      	ldr	r3, [pc, #152]	; (8000598 <SetMode+0x124>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	4b26      	ldr	r3, [pc, #152]	; (800059c <SetMode+0x128>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	429a      	cmp	r2, r3
 8000508:	dc07      	bgt.n	800051a <SetMode+0xa6>
				Time_red =  Time_yellow + Time_green;
 800050a:	4b25      	ldr	r3, [pc, #148]	; (80005a0 <SetMode+0x12c>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	4b23      	ldr	r3, [pc, #140]	; (800059c <SetMode+0x128>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4413      	add	r3, r2
 8000514:	4a20      	ldr	r2, [pc, #128]	; (8000598 <SetMode+0x124>)
 8000516:	6013      	str	r3, [r2, #0]
 8000518:	e006      	b.n	8000528 <SetMode+0xb4>
			}
			else{
				Time_yellow = Time_red - Time_green;
 800051a:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <SetMode+0x124>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	4b1f      	ldr	r3, [pc, #124]	; (800059c <SetMode+0x128>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	1ad3      	subs	r3, r2, r3
 8000524:	4a1e      	ldr	r2, [pc, #120]	; (80005a0 <SetMode+0x12c>)
 8000526:	6013      	str	r3, [r2, #0]
			}
			number_clock1 = Time_red;
 8000528:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <SetMode+0x124>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a1d      	ldr	r2, [pc, #116]	; (80005a4 <SetMode+0x130>)
 800052e:	6013      	str	r3, [r2, #0]
			number_clock2 = Time_green;
 8000530:	4b1a      	ldr	r3, [pc, #104]	; (800059c <SetMode+0x128>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a1c      	ldr	r2, [pc, #112]	; (80005a8 <SetMode+0x134>)
 8000536:	6013      	str	r3, [r2, #0]
		}
		if(counterMode == 4){
 8000538:	4b15      	ldr	r3, [pc, #84]	; (8000590 <SetMode+0x11c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b04      	cmp	r3, #4
 800053e:	d125      	bne.n	800058c <SetMode+0x118>
			Time_yellow = counterTimeSet * 10;
 8000540:	4b14      	ldr	r3, [pc, #80]	; (8000594 <SetMode+0x120>)
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	4613      	mov	r3, r2
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	4413      	add	r3, r2
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	461a      	mov	r2, r3
 800054e:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <SetMode+0x12c>)
 8000550:	601a      	str	r2, [r3, #0]
			if(Time_red <= Time_yellow){
 8000552:	4b11      	ldr	r3, [pc, #68]	; (8000598 <SetMode+0x124>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <SetMode+0x12c>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	429a      	cmp	r2, r3
 800055c:	dc07      	bgt.n	800056e <SetMode+0xfa>
				Time_red =  Time_yellow + Time_green;
 800055e:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <SetMode+0x12c>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	4b0e      	ldr	r3, [pc, #56]	; (800059c <SetMode+0x128>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4413      	add	r3, r2
 8000568:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <SetMode+0x124>)
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	e006      	b.n	800057c <SetMode+0x108>
			}
			else{
				Time_green = Time_red - Time_yellow;
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <SetMode+0x124>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <SetMode+0x12c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	1ad3      	subs	r3, r2, r3
 8000578:	4a08      	ldr	r2, [pc, #32]	; (800059c <SetMode+0x128>)
 800057a:	6013      	str	r3, [r2, #0]
			}
			number_clock1 =  Time_red;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <SetMode+0x124>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a08      	ldr	r2, [pc, #32]	; (80005a4 <SetMode+0x130>)
 8000582:	6013      	str	r3, [r2, #0]
			number_clock2 = Time_green;
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <SetMode+0x128>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <SetMode+0x134>)
 800058a:	6013      	str	r3, [r2, #0]
		}
	}
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	2000006c 	.word	0x2000006c
 8000594:	20000070 	.word	0x20000070
 8000598:	20000000 	.word	0x20000000
 800059c:	20000004 	.word	0x20000004
 80005a0:	20000008 	.word	0x20000008
 80005a4:	20000060 	.word	0x20000060
 80005a8:	20000064 	.word	0x20000064

080005ac <ChangeModeX>:
void ChangeModeX(void){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	if(counterMode == 1){
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <ChangeModeX+0x58>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d102      	bne.n	80005be <ChangeModeX+0x12>
		mode4_flag = 0;
 80005b8:	4b13      	ldr	r3, [pc, #76]	; (8000608 <ChangeModeX+0x5c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
	}
	if(counterMode == 2){
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <ChangeModeX+0x58>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	d104      	bne.n	80005d0 <ChangeModeX+0x24>
		statusx = MAN_RED;
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <ChangeModeX+0x60>)
 80005c8:	2205      	movs	r2, #5
 80005ca:	601a      	str	r2, [r3, #0]
		InitLED();
 80005cc:	f001 f8b2 	bl	8001734 <InitLED>
	}
	if(counterMode == 3){
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <ChangeModeX+0x58>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b03      	cmp	r3, #3
 80005d6:	d107      	bne.n	80005e8 <ChangeModeX+0x3c>
		mode2_flag = 0;
 80005d8:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <ChangeModeX+0x64>)
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
		statusx = MAN_GREEN;
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <ChangeModeX+0x60>)
 80005e0:	2206      	movs	r2, #6
 80005e2:	601a      	str	r2, [r3, #0]
		InitLED();
 80005e4:	f001 f8a6 	bl	8001734 <InitLED>
	}
	if(counterMode == 4){
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <ChangeModeX+0x58>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b04      	cmp	r3, #4
 80005ee:	d107      	bne.n	8000600 <ChangeModeX+0x54>
		mode3_flag = 0;
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <ChangeModeX+0x68>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
		statusx = MAN_YELLOW;
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <ChangeModeX+0x60>)
 80005f8:	2207      	movs	r2, #7
 80005fa:	601a      	str	r2, [r3, #0]
		InitLED();
 80005fc:	f001 f89a 	bl	8001734 <InitLED>
	}
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	2000006c 	.word	0x2000006c
 8000608:	20000044 	.word	0x20000044
 800060c:	20000058 	.word	0x20000058
 8000610:	2000003c 	.word	0x2000003c
 8000614:	20000040 	.word	0x20000040

08000618 <ChangeModeY>:
void ChangeModeY(void){
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	if(counterMode == 1){
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <ChangeModeY+0x58>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d102      	bne.n	800062a <ChangeModeY+0x12>
		mode4_flag = 0;
 8000624:	4b13      	ldr	r3, [pc, #76]	; (8000674 <ChangeModeY+0x5c>)
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
	}
	if(counterMode == 2){
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <ChangeModeY+0x58>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b02      	cmp	r3, #2
 8000630:	d104      	bne.n	800063c <ChangeModeY+0x24>
		statusy = MAN_RED;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <ChangeModeY+0x60>)
 8000634:	2205      	movs	r2, #5
 8000636:	601a      	str	r2, [r3, #0]
		InitLED();
 8000638:	f001 f87c 	bl	8001734 <InitLED>
	}
	if(counterMode == 3){
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <ChangeModeY+0x58>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b03      	cmp	r3, #3
 8000642:	d107      	bne.n	8000654 <ChangeModeY+0x3c>
		mode2_flag = 0;
 8000644:	4b0d      	ldr	r3, [pc, #52]	; (800067c <ChangeModeY+0x64>)
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
		statusy = MAN_GREEN;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <ChangeModeY+0x60>)
 800064c:	2206      	movs	r2, #6
 800064e:	601a      	str	r2, [r3, #0]
		InitLED();
 8000650:	f001 f870 	bl	8001734 <InitLED>
	}
	if(counterMode == 4){
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <ChangeModeY+0x58>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b04      	cmp	r3, #4
 800065a:	d107      	bne.n	800066c <ChangeModeY+0x54>
		mode3_flag = 0;
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <ChangeModeY+0x68>)
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
		statusy = MAN_YELLOW;
 8000662:	4b05      	ldr	r3, [pc, #20]	; (8000678 <ChangeModeY+0x60>)
 8000664:	2207      	movs	r2, #7
 8000666:	601a      	str	r2, [r3, #0]
		InitLED();
 8000668:	f001 f864 	bl	8001734 <InitLED>
	}
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000006c 	.word	0x2000006c
 8000674:	20000044 	.word	0x20000044
 8000678:	2000005c 	.word	0x2000005c
 800067c:	2000003c 	.word	0x2000003c
 8000680:	20000040 	.word	0x20000040

08000684 <fsm_clock>:
void fsm_clock(void){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	if(statusx != MAN_GREEN && statusx != MAN_RED && statusx != MAN_YELLOW){
 8000688:	4b33      	ldr	r3, [pc, #204]	; (8000758 <fsm_clock+0xd4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b06      	cmp	r3, #6
 800068e:	d061      	beq.n	8000754 <fsm_clock+0xd0>
 8000690:	4b31      	ldr	r3, [pc, #196]	; (8000758 <fsm_clock+0xd4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b05      	cmp	r3, #5
 8000696:	d05d      	beq.n	8000754 <fsm_clock+0xd0>
 8000698:	4b2f      	ldr	r3, [pc, #188]	; (8000758 <fsm_clock+0xd4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b07      	cmp	r3, #7
 800069e:	d059      	beq.n	8000754 <fsm_clock+0xd0>
		if(DisplayCounter == 0){
 80006a0:	4b2e      	ldr	r3, [pc, #184]	; (800075c <fsm_clock+0xd8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d10b      	bne.n	80006c0 <fsm_clock+0x3c>
			Display7Seg(number_clock2/10);
 80006a8:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <fsm_clock+0xdc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a2d      	ldr	r2, [pc, #180]	; (8000764 <fsm_clock+0xe0>)
 80006ae:	fb82 1203 	smull	r1, r2, r2, r3
 80006b2:	1092      	asrs	r2, r2, #2
 80006b4:	17db      	asrs	r3, r3, #31
 80006b6:	1ad3      	subs	r3, r2, r3
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 fd35 	bl	8001128 <Display7Seg>
 80006be:	e038      	b.n	8000732 <fsm_clock+0xae>
		}
		else if(DisplayCounter == 1){
 80006c0:	4b26      	ldr	r3, [pc, #152]	; (800075c <fsm_clock+0xd8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d110      	bne.n	80006ea <fsm_clock+0x66>
			Display7Seg(number_clock2%10);
 80006c8:	4b25      	ldr	r3, [pc, #148]	; (8000760 <fsm_clock+0xdc>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4b25      	ldr	r3, [pc, #148]	; (8000764 <fsm_clock+0xe0>)
 80006ce:	fb83 1302 	smull	r1, r3, r3, r2
 80006d2:	1099      	asrs	r1, r3, #2
 80006d4:	17d3      	asrs	r3, r2, #31
 80006d6:	1ac9      	subs	r1, r1, r3
 80006d8:	460b      	mov	r3, r1
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	440b      	add	r3, r1
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	1ad1      	subs	r1, r2, r3
 80006e2:	4608      	mov	r0, r1
 80006e4:	f000 fd20 	bl	8001128 <Display7Seg>
 80006e8:	e023      	b.n	8000732 <fsm_clock+0xae>
		}
		else if(DisplayCounter == 2){
 80006ea:	4b1c      	ldr	r3, [pc, #112]	; (800075c <fsm_clock+0xd8>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	d10b      	bne.n	800070a <fsm_clock+0x86>

			Display7Seg(number_clock1/10);
 80006f2:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <fsm_clock+0xe4>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a1b      	ldr	r2, [pc, #108]	; (8000764 <fsm_clock+0xe0>)
 80006f8:	fb82 1203 	smull	r1, r2, r2, r3
 80006fc:	1092      	asrs	r2, r2, #2
 80006fe:	17db      	asrs	r3, r3, #31
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fd10 	bl	8001128 <Display7Seg>
 8000708:	e013      	b.n	8000732 <fsm_clock+0xae>
		}
		else if(DisplayCounter == 3){
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <fsm_clock+0xd8>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b03      	cmp	r3, #3
 8000710:	d10f      	bne.n	8000732 <fsm_clock+0xae>
			Display7Seg(number_clock1%10);
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <fsm_clock+0xe4>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <fsm_clock+0xe0>)
 8000718:	fb83 1302 	smull	r1, r3, r3, r2
 800071c:	1099      	asrs	r1, r3, #2
 800071e:	17d3      	asrs	r3, r2, #31
 8000720:	1ac9      	subs	r1, r1, r3
 8000722:	460b      	mov	r3, r1
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	440b      	add	r3, r1
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	1ad1      	subs	r1, r2, r3
 800072c:	4608      	mov	r0, r1
 800072e:	f000 fcfb 	bl	8001128 <Display7Seg>

		}
		Display(DisplayCounter);
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <fsm_clock+0xd8>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f000 febc 	bl	80014b4 <Display>
		DisplayCounter++;
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <fsm_clock+0xd8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	3301      	adds	r3, #1
 8000742:	4a06      	ldr	r2, [pc, #24]	; (800075c <fsm_clock+0xd8>)
 8000744:	6013      	str	r3, [r2, #0]
		if(DisplayCounter > 4){
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <fsm_clock+0xd8>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2b04      	cmp	r3, #4
 800074c:	dd02      	ble.n	8000754 <fsm_clock+0xd0>
			DisplayCounter = 0;
 800074e:	4b03      	ldr	r3, [pc, #12]	; (800075c <fsm_clock+0xd8>)
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000058 	.word	0x20000058
 800075c:	20000038 	.word	0x20000038
 8000760:	20000064 	.word	0x20000064
 8000764:	66666667 	.word	0x66666667
 8000768:	20000060 	.word	0x20000060

0800076c <clockX>:
void clockX(void){
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
	if(statusx != MAN_GREEN && statusx != MAN_RED && statusx != MAN_YELLOW){
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <clockX+0x30>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b06      	cmp	r3, #6
 8000776:	d00c      	beq.n	8000792 <clockX+0x26>
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <clockX+0x30>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b05      	cmp	r3, #5
 800077e:	d008      	beq.n	8000792 <clockX+0x26>
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <clockX+0x30>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b07      	cmp	r3, #7
 8000786:	d004      	beq.n	8000792 <clockX+0x26>
		number_clock1--;
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <clockX+0x34>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	3b01      	subs	r3, #1
 800078e:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <clockX+0x34>)
 8000790:	6013      	str	r3, [r2, #0]
	}
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	20000058 	.word	0x20000058
 80007a0:	20000060 	.word	0x20000060

080007a4 <clockY>:
void clockY(void){
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
	if(statusx != MAN_GREEN && statusx != MAN_RED && statusx != MAN_YELLOW){
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <clockY+0x30>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b06      	cmp	r3, #6
 80007ae:	d00c      	beq.n	80007ca <clockY+0x26>
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <clockY+0x30>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b05      	cmp	r3, #5
 80007b6:	d008      	beq.n	80007ca <clockY+0x26>
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <clockY+0x30>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b07      	cmp	r3, #7
 80007be:	d004      	beq.n	80007ca <clockY+0x26>
		number_clock2--;
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <clockY+0x34>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	3b01      	subs	r3, #1
 80007c6:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <clockY+0x34>)
 80007c8:	6013      	str	r3, [r2, #0]
	}
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	20000058 	.word	0x20000058
 80007d8:	20000064 	.word	0x20000064

080007dc <fsm_mode>:
void fsm_mode(void){
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	if(statusx == MAN_GREEN || statusx == MAN_RED || statusx == MAN_YELLOW){
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <fsm_mode+0xb0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b06      	cmp	r3, #6
 80007e6:	d007      	beq.n	80007f8 <fsm_mode+0x1c>
 80007e8:	4b28      	ldr	r3, [pc, #160]	; (800088c <fsm_mode+0xb0>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b05      	cmp	r3, #5
 80007ee:	d003      	beq.n	80007f8 <fsm_mode+0x1c>
 80007f0:	4b26      	ldr	r3, [pc, #152]	; (800088c <fsm_mode+0xb0>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b07      	cmp	r3, #7
 80007f6:	d146      	bne.n	8000886 <fsm_mode+0xaa>
		Display(DisplayCounter);
 80007f8:	4b25      	ldr	r3, [pc, #148]	; (8000890 <fsm_mode+0xb4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 fe59 	bl	80014b4 <Display>
		if(DisplayCounter == 0){
 8000802:	4b23      	ldr	r3, [pc, #140]	; (8000890 <fsm_mode+0xb4>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d103      	bne.n	8000812 <fsm_mode+0x36>
			Display7Seg(0);
 800080a:	2000      	movs	r0, #0
 800080c:	f000 fc8c 	bl	8001128 <Display7Seg>
 8000810:	e02d      	b.n	800086e <fsm_mode+0x92>
		}
		else if(DisplayCounter == 1){
 8000812:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <fsm_mode+0xb4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d105      	bne.n	8000826 <fsm_mode+0x4a>
			Display7Seg(counterMode);
 800081a:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <fsm_mode+0xb8>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4618      	mov	r0, r3
 8000820:	f000 fc82 	bl	8001128 <Display7Seg>
 8000824:	e023      	b.n	800086e <fsm_mode+0x92>
		}
		else if(DisplayCounter == 2){
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <fsm_mode+0xb4>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b02      	cmp	r3, #2
 800082c:	d10b      	bne.n	8000846 <fsm_mode+0x6a>
			Display7Seg(counterTimeSet/10);
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <fsm_mode+0xbc>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a1a      	ldr	r2, [pc, #104]	; (800089c <fsm_mode+0xc0>)
 8000834:	fb82 1203 	smull	r1, r2, r2, r3
 8000838:	1092      	asrs	r2, r2, #2
 800083a:	17db      	asrs	r3, r3, #31
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fc72 	bl	8001128 <Display7Seg>
 8000844:	e013      	b.n	800086e <fsm_mode+0x92>
		}
		else if(DisplayCounter == 3){
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <fsm_mode+0xb4>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b03      	cmp	r3, #3
 800084c:	d10f      	bne.n	800086e <fsm_mode+0x92>
			Display7Seg(counterTimeSet%10);
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <fsm_mode+0xbc>)
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <fsm_mode+0xc0>)
 8000854:	fb83 1302 	smull	r1, r3, r3, r2
 8000858:	1099      	asrs	r1, r3, #2
 800085a:	17d3      	asrs	r3, r2, #31
 800085c:	1ac9      	subs	r1, r1, r3
 800085e:	460b      	mov	r3, r1
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	440b      	add	r3, r1
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	1ad1      	subs	r1, r2, r3
 8000868:	4608      	mov	r0, r1
 800086a:	f000 fc5d 	bl	8001128 <Display7Seg>
		}
		DisplayCounter++;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <fsm_mode+0xb4>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	3301      	adds	r3, #1
 8000874:	4a06      	ldr	r2, [pc, #24]	; (8000890 <fsm_mode+0xb4>)
 8000876:	6013      	str	r3, [r2, #0]
		if(DisplayCounter > 4){
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <fsm_mode+0xb4>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b04      	cmp	r3, #4
 800087e:	dd02      	ble.n	8000886 <fsm_mode+0xaa>
			DisplayCounter = 0;
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <fsm_mode+0xb4>)
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000058 	.word	0x20000058
 8000890:	20000038 	.word	0x20000038
 8000894:	2000006c 	.word	0x2000006c
 8000898:	20000070 	.word	0x20000070
 800089c:	66666667 	.word	0x66666667

080008a0 <fsm_automatic_runx>:
void fsm_automatic_runx(){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	switch(statusx){
 80008a4:	4b46      	ldr	r3, [pc, #280]	; (80009c0 <fsm_automatic_runx+0x120>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	3b01      	subs	r3, #1
 80008aa:	2b03      	cmp	r3, #3
 80008ac:	d876      	bhi.n	800099c <fsm_automatic_runx+0xfc>
 80008ae:	a201      	add	r2, pc, #4	; (adr r2, 80008b4 <fsm_automatic_runx+0x14>)
 80008b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b4:	080008c5 	.word	0x080008c5
 80008b8:	080008e9 	.word	0x080008e9
 80008bc:	08000925 	.word	0x08000925
 80008c0:	08000961 	.word	0x08000961
	case INIT:
		statusx = AUTO_RED;
 80008c4:	4b3e      	ldr	r3, [pc, #248]	; (80009c0 <fsm_automatic_runx+0x120>)
 80008c6:	2202      	movs	r2, #2
 80008c8:	601a      	str	r2, [r3, #0]
		counter_x = Time_red;
 80008ca:	4b3e      	ldr	r3, [pc, #248]	; (80009c4 <fsm_automatic_runx+0x124>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a3e      	ldr	r2, [pc, #248]	; (80009c8 <fsm_automatic_runx+0x128>)
 80008d0:	6013      	str	r3, [r2, #0]
		number_clock1 = counter_x/10;
 80008d2:	4b3d      	ldr	r3, [pc, #244]	; (80009c8 <fsm_automatic_runx+0x128>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a3d      	ldr	r2, [pc, #244]	; (80009cc <fsm_automatic_runx+0x12c>)
 80008d8:	fb82 1203 	smull	r1, r2, r2, r3
 80008dc:	1092      	asrs	r2, r2, #2
 80008de:	17db      	asrs	r3, r3, #31
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	4a3b      	ldr	r2, [pc, #236]	; (80009d0 <fsm_automatic_runx+0x130>)
 80008e4:	6013      	str	r3, [r2, #0]
		break;
 80008e6:	e060      	b.n	80009aa <fsm_automatic_runx+0x10a>
	case AUTO_RED:
		DisplayREDX();
 80008e8:	f000 fe62 	bl	80015b0 <DisplayREDX>
		SetMode();
 80008ec:	f7ff fdc2 	bl	8000474 <SetMode>
		ChangeModeX();
 80008f0:	f7ff fe5c 	bl	80005ac <ChangeModeX>
		if(counter_x == 0){
 80008f4:	4b34      	ldr	r3, [pc, #208]	; (80009c8 <fsm_automatic_runx+0x128>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d151      	bne.n	80009a0 <fsm_automatic_runx+0x100>
			InitLED();
 80008fc:	f000 ff1a 	bl	8001734 <InitLED>
			statusx = AUTO_GREEN;
 8000900:	4b2f      	ldr	r3, [pc, #188]	; (80009c0 <fsm_automatic_runx+0x120>)
 8000902:	2203      	movs	r2, #3
 8000904:	601a      	str	r2, [r3, #0]
			counter_x = Time_green;
 8000906:	4b33      	ldr	r3, [pc, #204]	; (80009d4 <fsm_automatic_runx+0x134>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a2f      	ldr	r2, [pc, #188]	; (80009c8 <fsm_automatic_runx+0x128>)
 800090c:	6013      	str	r3, [r2, #0]
			number_clock1 = counter_x/10;
 800090e:	4b2e      	ldr	r3, [pc, #184]	; (80009c8 <fsm_automatic_runx+0x128>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a2e      	ldr	r2, [pc, #184]	; (80009cc <fsm_automatic_runx+0x12c>)
 8000914:	fb82 1203 	smull	r1, r2, r2, r3
 8000918:	1092      	asrs	r2, r2, #2
 800091a:	17db      	asrs	r3, r3, #31
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	4a2c      	ldr	r2, [pc, #176]	; (80009d0 <fsm_automatic_runx+0x130>)
 8000920:	6013      	str	r3, [r2, #0]
		}
		break;
 8000922:	e03d      	b.n	80009a0 <fsm_automatic_runx+0x100>
	case AUTO_GREEN:
		DisplayGREENX();
 8000924:	f000 fe70 	bl	8001608 <DisplayGREENX>
		SetMode();
 8000928:	f7ff fda4 	bl	8000474 <SetMode>
		ChangeModeX();
 800092c:	f7ff fe3e 	bl	80005ac <ChangeModeX>
		if(counter_x == 0){
 8000930:	4b25      	ldr	r3, [pc, #148]	; (80009c8 <fsm_automatic_runx+0x128>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d135      	bne.n	80009a4 <fsm_automatic_runx+0x104>
			InitLED();
 8000938:	f000 fefc 	bl	8001734 <InitLED>
			statusx = AUTO_YELLOW;
 800093c:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <fsm_automatic_runx+0x120>)
 800093e:	2204      	movs	r2, #4
 8000940:	601a      	str	r2, [r3, #0]
			counter_x = Time_yellow;
 8000942:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <fsm_automatic_runx+0x138>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a20      	ldr	r2, [pc, #128]	; (80009c8 <fsm_automatic_runx+0x128>)
 8000948:	6013      	str	r3, [r2, #0]
			number_clock1 = counter_x/10;
 800094a:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <fsm_automatic_runx+0x128>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a1f      	ldr	r2, [pc, #124]	; (80009cc <fsm_automatic_runx+0x12c>)
 8000950:	fb82 1203 	smull	r1, r2, r2, r3
 8000954:	1092      	asrs	r2, r2, #2
 8000956:	17db      	asrs	r3, r3, #31
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	4a1d      	ldr	r2, [pc, #116]	; (80009d0 <fsm_automatic_runx+0x130>)
 800095c:	6013      	str	r3, [r2, #0]
		}
		break;
 800095e:	e021      	b.n	80009a4 <fsm_automatic_runx+0x104>
	case AUTO_YELLOW:
		DisplayYELLOWX();
 8000960:	f000 fe3c 	bl	80015dc <DisplayYELLOWX>
		SetMode();
 8000964:	f7ff fd86 	bl	8000474 <SetMode>
		ChangeModeX();
 8000968:	f7ff fe20 	bl	80005ac <ChangeModeX>
		if(counter_x == 0){
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <fsm_automatic_runx+0x128>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d119      	bne.n	80009a8 <fsm_automatic_runx+0x108>
			InitLED();
 8000974:	f000 fede 	bl	8001734 <InitLED>
			statusx = AUTO_RED;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <fsm_automatic_runx+0x120>)
 800097a:	2202      	movs	r2, #2
 800097c:	601a      	str	r2, [r3, #0]
			counter_x = Time_red;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <fsm_automatic_runx+0x124>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a11      	ldr	r2, [pc, #68]	; (80009c8 <fsm_automatic_runx+0x128>)
 8000984:	6013      	str	r3, [r2, #0]
			number_clock1 = counter_x/10;
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <fsm_automatic_runx+0x128>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a10      	ldr	r2, [pc, #64]	; (80009cc <fsm_automatic_runx+0x12c>)
 800098c:	fb82 1203 	smull	r1, r2, r2, r3
 8000990:	1092      	asrs	r2, r2, #2
 8000992:	17db      	asrs	r3, r3, #31
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <fsm_automatic_runx+0x130>)
 8000998:	6013      	str	r3, [r2, #0]
		}
		break;
 800099a:	e005      	b.n	80009a8 <fsm_automatic_runx+0x108>
	default:
		break;
 800099c:	bf00      	nop
 800099e:	e004      	b.n	80009aa <fsm_automatic_runx+0x10a>
		break;
 80009a0:	bf00      	nop
 80009a2:	e002      	b.n	80009aa <fsm_automatic_runx+0x10a>
		break;
 80009a4:	bf00      	nop
 80009a6:	e000      	b.n	80009aa <fsm_automatic_runx+0x10a>
		break;
 80009a8:	bf00      	nop
	}
	if(counter_x > 0){
 80009aa:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <fsm_automatic_runx+0x128>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	dd04      	ble.n	80009bc <fsm_automatic_runx+0x11c>
		counter_x--;
 80009b2:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <fsm_automatic_runx+0x128>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	4a03      	ldr	r2, [pc, #12]	; (80009c8 <fsm_automatic_runx+0x128>)
 80009ba:	6013      	str	r3, [r2, #0]
	}
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000058 	.word	0x20000058
 80009c4:	20000000 	.word	0x20000000
 80009c8:	20000048 	.word	0x20000048
 80009cc:	66666667 	.word	0x66666667
 80009d0:	20000060 	.word	0x20000060
 80009d4:	20000004 	.word	0x20000004
 80009d8:	20000008 	.word	0x20000008

080009dc <fsm_automatic_runy>:
void fsm_automatic_runy(){
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	switch(statusy){
 80009e0:	4b46      	ldr	r3, [pc, #280]	; (8000afc <fsm_automatic_runy+0x120>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	3b01      	subs	r3, #1
 80009e6:	2b03      	cmp	r3, #3
 80009e8:	d876      	bhi.n	8000ad8 <fsm_automatic_runy+0xfc>
 80009ea:	a201      	add	r2, pc, #4	; (adr r2, 80009f0 <fsm_automatic_runy+0x14>)
 80009ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f0:	08000a01 	.word	0x08000a01
 80009f4:	08000a25 	.word	0x08000a25
 80009f8:	08000a61 	.word	0x08000a61
 80009fc:	08000a9d 	.word	0x08000a9d
	case INIT:
		statusy = AUTO_GREEN;
 8000a00:	4b3e      	ldr	r3, [pc, #248]	; (8000afc <fsm_automatic_runy+0x120>)
 8000a02:	2203      	movs	r2, #3
 8000a04:	601a      	str	r2, [r3, #0]
		counter_y = Time_green;
 8000a06:	4b3e      	ldr	r3, [pc, #248]	; (8000b00 <fsm_automatic_runy+0x124>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a3e      	ldr	r2, [pc, #248]	; (8000b04 <fsm_automatic_runy+0x128>)
 8000a0c:	6013      	str	r3, [r2, #0]
		number_clock2 = counter_y/10;
 8000a0e:	4b3d      	ldr	r3, [pc, #244]	; (8000b04 <fsm_automatic_runy+0x128>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a3d      	ldr	r2, [pc, #244]	; (8000b08 <fsm_automatic_runy+0x12c>)
 8000a14:	fb82 1203 	smull	r1, r2, r2, r3
 8000a18:	1092      	asrs	r2, r2, #2
 8000a1a:	17db      	asrs	r3, r3, #31
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	4a3b      	ldr	r2, [pc, #236]	; (8000b0c <fsm_automatic_runy+0x130>)
 8000a20:	6013      	str	r3, [r2, #0]
		break;
 8000a22:	e060      	b.n	8000ae6 <fsm_automatic_runy+0x10a>
	case AUTO_RED:
		DisplayREDY();
 8000a24:	f000 fe06 	bl	8001634 <DisplayREDY>
		SetMode();
 8000a28:	f7ff fd24 	bl	8000474 <SetMode>
		ChangeModeY();
 8000a2c:	f7ff fdf4 	bl	8000618 <ChangeModeY>
		if(counter_y == 0){
 8000a30:	4b34      	ldr	r3, [pc, #208]	; (8000b04 <fsm_automatic_runy+0x128>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d151      	bne.n	8000adc <fsm_automatic_runy+0x100>
			InitLED();
 8000a38:	f000 fe7c 	bl	8001734 <InitLED>
			statusy = AUTO_GREEN;
 8000a3c:	4b2f      	ldr	r3, [pc, #188]	; (8000afc <fsm_automatic_runy+0x120>)
 8000a3e:	2203      	movs	r2, #3
 8000a40:	601a      	str	r2, [r3, #0]
			counter_y = Time_green;
 8000a42:	4b2f      	ldr	r3, [pc, #188]	; (8000b00 <fsm_automatic_runy+0x124>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a2f      	ldr	r2, [pc, #188]	; (8000b04 <fsm_automatic_runy+0x128>)
 8000a48:	6013      	str	r3, [r2, #0]
			number_clock2 = counter_y/10;
 8000a4a:	4b2e      	ldr	r3, [pc, #184]	; (8000b04 <fsm_automatic_runy+0x128>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a2e      	ldr	r2, [pc, #184]	; (8000b08 <fsm_automatic_runy+0x12c>)
 8000a50:	fb82 1203 	smull	r1, r2, r2, r3
 8000a54:	1092      	asrs	r2, r2, #2
 8000a56:	17db      	asrs	r3, r3, #31
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	4a2c      	ldr	r2, [pc, #176]	; (8000b0c <fsm_automatic_runy+0x130>)
 8000a5c:	6013      	str	r3, [r2, #0]
		}
		break;
 8000a5e:	e03d      	b.n	8000adc <fsm_automatic_runy+0x100>
	case AUTO_GREEN:
		DisplayGREENY();
 8000a60:	f000 fe14 	bl	800168c <DisplayGREENY>
		SetMode();
 8000a64:	f7ff fd06 	bl	8000474 <SetMode>
		ChangeModeY();
 8000a68:	f7ff fdd6 	bl	8000618 <ChangeModeY>
		if(counter_y == 0){
 8000a6c:	4b25      	ldr	r3, [pc, #148]	; (8000b04 <fsm_automatic_runy+0x128>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d135      	bne.n	8000ae0 <fsm_automatic_runy+0x104>
			InitLED();
 8000a74:	f000 fe5e 	bl	8001734 <InitLED>
			statusy = AUTO_YELLOW;
 8000a78:	4b20      	ldr	r3, [pc, #128]	; (8000afc <fsm_automatic_runy+0x120>)
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	601a      	str	r2, [r3, #0]
			counter_y = Time_yellow;
 8000a7e:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <fsm_automatic_runy+0x134>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a20      	ldr	r2, [pc, #128]	; (8000b04 <fsm_automatic_runy+0x128>)
 8000a84:	6013      	str	r3, [r2, #0]
			number_clock2 = counter_y/10;
 8000a86:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <fsm_automatic_runy+0x128>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a1f      	ldr	r2, [pc, #124]	; (8000b08 <fsm_automatic_runy+0x12c>)
 8000a8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a90:	1092      	asrs	r2, r2, #2
 8000a92:	17db      	asrs	r3, r3, #31
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	4a1d      	ldr	r2, [pc, #116]	; (8000b0c <fsm_automatic_runy+0x130>)
 8000a98:	6013      	str	r3, [r2, #0]
		}
		break;
 8000a9a:	e021      	b.n	8000ae0 <fsm_automatic_runy+0x104>
	case AUTO_YELLOW:
		DisplayYELLOWY();
 8000a9c:	f000 fde0 	bl	8001660 <DisplayYELLOWY>
		SetMode();
 8000aa0:	f7ff fce8 	bl	8000474 <SetMode>
		ChangeModeY();
 8000aa4:	f7ff fdb8 	bl	8000618 <ChangeModeY>
		if(counter_y == 0){
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <fsm_automatic_runy+0x128>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d119      	bne.n	8000ae4 <fsm_automatic_runy+0x108>
			InitLED();
 8000ab0:	f000 fe40 	bl	8001734 <InitLED>
			statusy = AUTO_RED;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <fsm_automatic_runy+0x120>)
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	601a      	str	r2, [r3, #0]
			counter_y = Time_red;
 8000aba:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <fsm_automatic_runy+0x138>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a11      	ldr	r2, [pc, #68]	; (8000b04 <fsm_automatic_runy+0x128>)
 8000ac0:	6013      	str	r3, [r2, #0]
			number_clock2 = counter_y/10;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <fsm_automatic_runy+0x128>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a10      	ldr	r2, [pc, #64]	; (8000b08 <fsm_automatic_runy+0x12c>)
 8000ac8:	fb82 1203 	smull	r1, r2, r2, r3
 8000acc:	1092      	asrs	r2, r2, #2
 8000ace:	17db      	asrs	r3, r3, #31
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <fsm_automatic_runy+0x130>)
 8000ad4:	6013      	str	r3, [r2, #0]
		}
		break;
 8000ad6:	e005      	b.n	8000ae4 <fsm_automatic_runy+0x108>
	default:
		break;
 8000ad8:	bf00      	nop
 8000ada:	e004      	b.n	8000ae6 <fsm_automatic_runy+0x10a>
		break;
 8000adc:	bf00      	nop
 8000ade:	e002      	b.n	8000ae6 <fsm_automatic_runy+0x10a>
		break;
 8000ae0:	bf00      	nop
 8000ae2:	e000      	b.n	8000ae6 <fsm_automatic_runy+0x10a>
		break;
 8000ae4:	bf00      	nop
	}
	if(counter_y > 0){
 8000ae6:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <fsm_automatic_runy+0x128>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	dd04      	ble.n	8000af8 <fsm_automatic_runy+0x11c>
		counter_y--;
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <fsm_automatic_runy+0x128>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	4a03      	ldr	r2, [pc, #12]	; (8000b04 <fsm_automatic_runy+0x128>)
 8000af6:	6013      	str	r3, [r2, #0]
	}
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2000005c 	.word	0x2000005c
 8000b00:	20000004 	.word	0x20000004
 8000b04:	2000004c 	.word	0x2000004c
 8000b08:	66666667 	.word	0x66666667
 8000b0c:	20000064 	.word	0x20000064
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000000 	.word	0x20000000

08000b18 <fsm_manual_run1>:
#include "led_display.h"
#include "input_processing.h"
#include "fsm_automatic.h"
int counter_led_x = 0;
int counter_led_y = 0;
void fsm_manual_run1(void){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	switch(statusx){
 8000b1c:	4b33      	ldr	r3, [pc, #204]	; (8000bec <fsm_manual_run1+0xd4>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b07      	cmp	r3, #7
 8000b22:	d030      	beq.n	8000b86 <fsm_manual_run1+0x6e>
 8000b24:	2b07      	cmp	r3, #7
 8000b26:	dc51      	bgt.n	8000bcc <fsm_manual_run1+0xb4>
 8000b28:	2b05      	cmp	r3, #5
 8000b2a:	d002      	beq.n	8000b32 <fsm_manual_run1+0x1a>
 8000b2c:	2b06      	cmp	r3, #6
 8000b2e:	d015      	beq.n	8000b5c <fsm_manual_run1+0x44>
			counter_x = Time_red;
			InitLED();
		}
		break;
	default:
		break;
 8000b30:	e04c      	b.n	8000bcc <fsm_manual_run1+0xb4>
		if(counter_led_x == 0){
 8000b32:	4b2f      	ldr	r3, [pc, #188]	; (8000bf0 <fsm_manual_run1+0xd8>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d104      	bne.n	8000b44 <fsm_manual_run1+0x2c>
			DisplayMAN_REDX();
 8000b3a:	f000 fdbd 	bl	80016b8 <DisplayMAN_REDX>
			counter_led_x = 5;
 8000b3e:	4b2c      	ldr	r3, [pc, #176]	; (8000bf0 <fsm_manual_run1+0xd8>)
 8000b40:	2205      	movs	r2, #5
 8000b42:	601a      	str	r2, [r3, #0]
		if(counterMode == 3){
 8000b44:	4b2b      	ldr	r3, [pc, #172]	; (8000bf4 <fsm_manual_run1+0xdc>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b03      	cmp	r3, #3
 8000b4a:	d104      	bne.n	8000b56 <fsm_manual_run1+0x3e>
			statusx = MAN_GREEN;
 8000b4c:	4b27      	ldr	r3, [pc, #156]	; (8000bec <fsm_manual_run1+0xd4>)
 8000b4e:	2206      	movs	r2, #6
 8000b50:	601a      	str	r2, [r3, #0]
			InitLED();
 8000b52:	f000 fdef 	bl	8001734 <InitLED>
		SetMode();
 8000b56:	f7ff fc8d 	bl	8000474 <SetMode>
		break;
 8000b5a:	e03c      	b.n	8000bd6 <fsm_manual_run1+0xbe>
		if(counter_led_x == 0){
 8000b5c:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <fsm_manual_run1+0xd8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d104      	bne.n	8000b6e <fsm_manual_run1+0x56>
			DisplayMAN_GREENX();
 8000b64:	f000 fdbc 	bl	80016e0 <DisplayMAN_GREENX>
			counter_led_x = 5;
 8000b68:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <fsm_manual_run1+0xd8>)
 8000b6a:	2205      	movs	r2, #5
 8000b6c:	601a      	str	r2, [r3, #0]
		SetMode();
 8000b6e:	f7ff fc81 	bl	8000474 <SetMode>
		if(counterMode == 4){
 8000b72:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <fsm_manual_run1+0xdc>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b04      	cmp	r3, #4
 8000b78:	d12a      	bne.n	8000bd0 <fsm_manual_run1+0xb8>
			statusx = MAN_YELLOW;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <fsm_manual_run1+0xd4>)
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	601a      	str	r2, [r3, #0]
			InitLED();
 8000b80:	f000 fdd8 	bl	8001734 <InitLED>
		break;
 8000b84:	e024      	b.n	8000bd0 <fsm_manual_run1+0xb8>
		if(counter_led_x == 0){
 8000b86:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <fsm_manual_run1+0xd8>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d104      	bne.n	8000b98 <fsm_manual_run1+0x80>
			DisplayMAN_YELLOWX();
 8000b8e:	f000 fdbd 	bl	800170c <DisplayMAN_YELLOWX>
			counter_led_x = 5;
 8000b92:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <fsm_manual_run1+0xd8>)
 8000b94:	2205      	movs	r2, #5
 8000b96:	601a      	str	r2, [r3, #0]
		SetMode();
 8000b98:	f7ff fc6c 	bl	8000474 <SetMode>
		if(counterMode == 1){
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <fsm_manual_run1+0xdc>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d117      	bne.n	8000bd4 <fsm_manual_run1+0xbc>
			statusx = AUTO_RED;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <fsm_manual_run1+0xd4>)
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	601a      	str	r2, [r3, #0]
			number_clock1 = Time_red/10;
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <fsm_manual_run1+0xe0>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a13      	ldr	r2, [pc, #76]	; (8000bfc <fsm_manual_run1+0xe4>)
 8000bb0:	fb82 1203 	smull	r1, r2, r2, r3
 8000bb4:	1092      	asrs	r2, r2, #2
 8000bb6:	17db      	asrs	r3, r3, #31
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	4a11      	ldr	r2, [pc, #68]	; (8000c00 <fsm_manual_run1+0xe8>)
 8000bbc:	6013      	str	r3, [r2, #0]
			counter_x = Time_red;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <fsm_manual_run1+0xe0>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a10      	ldr	r2, [pc, #64]	; (8000c04 <fsm_manual_run1+0xec>)
 8000bc4:	6013      	str	r3, [r2, #0]
			InitLED();
 8000bc6:	f000 fdb5 	bl	8001734 <InitLED>
		break;
 8000bca:	e003      	b.n	8000bd4 <fsm_manual_run1+0xbc>
		break;
 8000bcc:	bf00      	nop
 8000bce:	e002      	b.n	8000bd6 <fsm_manual_run1+0xbe>
		break;
 8000bd0:	bf00      	nop
 8000bd2:	e000      	b.n	8000bd6 <fsm_manual_run1+0xbe>
		break;
 8000bd4:	bf00      	nop
	}
	if(counter_led_x > 0){
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <fsm_manual_run1+0xd8>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	dd04      	ble.n	8000be8 <fsm_manual_run1+0xd0>
		counter_led_x--;
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <fsm_manual_run1+0xd8>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	4a02      	ldr	r2, [pc, #8]	; (8000bf0 <fsm_manual_run1+0xd8>)
 8000be6:	6013      	str	r3, [r2, #0]
	}
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000058 	.word	0x20000058
 8000bf0:	20000050 	.word	0x20000050
 8000bf4:	2000006c 	.word	0x2000006c
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	66666667 	.word	0x66666667
 8000c00:	20000060 	.word	0x20000060
 8000c04:	20000048 	.word	0x20000048

08000c08 <fsm_manual_run2>:
void fsm_manual_run2(void){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	switch(statusy){
 8000c0c:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <fsm_manual_run2+0xcc>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b07      	cmp	r3, #7
 8000c12:	d02c      	beq.n	8000c6e <fsm_manual_run2+0x66>
 8000c14:	2b07      	cmp	r3, #7
 8000c16:	dc4b      	bgt.n	8000cb0 <fsm_manual_run2+0xa8>
 8000c18:	2b05      	cmp	r3, #5
 8000c1a:	d002      	beq.n	8000c22 <fsm_manual_run2+0x1a>
 8000c1c:	2b06      	cmp	r3, #6
 8000c1e:	d013      	beq.n	8000c48 <fsm_manual_run2+0x40>
			counter_y = Time_green;
			InitLED();
		}
		break;
	default:
		break;
 8000c20:	e046      	b.n	8000cb0 <fsm_manual_run2+0xa8>
		if(counter_led_y == 0){
 8000c22:	4b2d      	ldr	r3, [pc, #180]	; (8000cd8 <fsm_manual_run2+0xd0>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d104      	bne.n	8000c34 <fsm_manual_run2+0x2c>
			DisplayMAN_REDY();
 8000c2a:	f000 fd4f 	bl	80016cc <DisplayMAN_REDY>
			counter_led_y = 5;
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <fsm_manual_run2+0xd0>)
 8000c30:	2205      	movs	r2, #5
 8000c32:	601a      	str	r2, [r3, #0]
		if(counterMode == 3){
 8000c34:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <fsm_manual_run2+0xd4>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d13b      	bne.n	8000cb4 <fsm_manual_run2+0xac>
			statusy = MAN_GREEN;
 8000c3c:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <fsm_manual_run2+0xcc>)
 8000c3e:	2206      	movs	r2, #6
 8000c40:	601a      	str	r2, [r3, #0]
			InitLED();
 8000c42:	f000 fd77 	bl	8001734 <InitLED>
		break;
 8000c46:	e035      	b.n	8000cb4 <fsm_manual_run2+0xac>
		if(counter_led_y == 0){
 8000c48:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <fsm_manual_run2+0xd0>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d104      	bne.n	8000c5a <fsm_manual_run2+0x52>
			DisplayMAN_GREENY();
 8000c50:	f000 fd50 	bl	80016f4 <DisplayMAN_GREENY>
			counter_led_y = 5;
 8000c54:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <fsm_manual_run2+0xd0>)
 8000c56:	2205      	movs	r2, #5
 8000c58:	601a      	str	r2, [r3, #0]
		if(counterMode == 4){
 8000c5a:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <fsm_manual_run2+0xd4>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	d12a      	bne.n	8000cb8 <fsm_manual_run2+0xb0>
			statusy = MAN_YELLOW;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <fsm_manual_run2+0xcc>)
 8000c64:	2207      	movs	r2, #7
 8000c66:	601a      	str	r2, [r3, #0]
			InitLED();
 8000c68:	f000 fd64 	bl	8001734 <InitLED>
		break;
 8000c6c:	e024      	b.n	8000cb8 <fsm_manual_run2+0xb0>
		if(counter_led_y == 0){
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <fsm_manual_run2+0xd0>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d104      	bne.n	8000c80 <fsm_manual_run2+0x78>
			DisplayMAN_YELLOWY();
 8000c76:	f000 fd53 	bl	8001720 <DisplayMAN_YELLOWY>
			counter_led_y = 5;
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <fsm_manual_run2+0xd0>)
 8000c7c:	2205      	movs	r2, #5
 8000c7e:	601a      	str	r2, [r3, #0]
		if(counterMode == 1){
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <fsm_manual_run2+0xd4>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d119      	bne.n	8000cbc <fsm_manual_run2+0xb4>
			statusy = AUTO_GREEN;
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <fsm_manual_run2+0xcc>)
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	601a      	str	r2, [r3, #0]
			number_clock2 = Time_green/10;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <fsm_manual_run2+0xd8>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a14      	ldr	r2, [pc, #80]	; (8000ce4 <fsm_manual_run2+0xdc>)
 8000c94:	fb82 1203 	smull	r1, r2, r2, r3
 8000c98:	1092      	asrs	r2, r2, #2
 8000c9a:	17db      	asrs	r3, r3, #31
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <fsm_manual_run2+0xe0>)
 8000ca0:	6013      	str	r3, [r2, #0]
			counter_y = Time_green;
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <fsm_manual_run2+0xd8>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a11      	ldr	r2, [pc, #68]	; (8000cec <fsm_manual_run2+0xe4>)
 8000ca8:	6013      	str	r3, [r2, #0]
			InitLED();
 8000caa:	f000 fd43 	bl	8001734 <InitLED>
		break;
 8000cae:	e005      	b.n	8000cbc <fsm_manual_run2+0xb4>
		break;
 8000cb0:	bf00      	nop
 8000cb2:	e004      	b.n	8000cbe <fsm_manual_run2+0xb6>
		break;
 8000cb4:	bf00      	nop
 8000cb6:	e002      	b.n	8000cbe <fsm_manual_run2+0xb6>
		break;
 8000cb8:	bf00      	nop
 8000cba:	e000      	b.n	8000cbe <fsm_manual_run2+0xb6>
		break;
 8000cbc:	bf00      	nop
	}
	if(counter_led_y > 0){
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <fsm_manual_run2+0xd0>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	dd04      	ble.n	8000cd0 <fsm_manual_run2+0xc8>
		counter_led_y--;
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <fsm_manual_run2+0xd0>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	4a02      	ldr	r2, [pc, #8]	; (8000cd8 <fsm_manual_run2+0xd0>)
 8000cce:	6013      	str	r3, [r2, #0]
	}
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	2000005c 	.word	0x2000005c
 8000cd8:	20000054 	.word	0x20000054
 8000cdc:	2000006c 	.word	0x2000006c
 8000ce0:	20000004 	.word	0x20000004
 8000ce4:	66666667 	.word	0x66666667
 8000ce8:	20000064 	.word	0x20000064
 8000cec:	2000004c 	.word	0x2000004c

08000cf0 <fsm_for_input_processing1>:
enum ButtonState buttonState1 = BUTTON_RELEASED;
enum ButtonState buttonState2 = BUTTON_RELEASED;
enum ButtonState buttonState3 = BUTTON_RELEASED;
int counterMode = 0;
int counterTimeSet = 0;
void fsm_for_input_processing1(void){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	switch(buttonState1){
 8000cf4:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <fsm_for_input_processing1+0xa0>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d038      	beq.n	8000d6e <fsm_for_input_processing1+0x7e>
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	dc45      	bgt.n	8000d8c <fsm_for_input_processing1+0x9c>
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d002      	beq.n	8000d0a <fsm_for_input_processing1+0x1a>
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d01e      	beq.n	8000d46 <fsm_for_input_processing1+0x56>
			if(!is_button_pressed(0)){
				buttonState1 = BUTTON_RELEASED;
			}
		break;
		}
	}
 8000d08:	e040      	b.n	8000d8c <fsm_for_input_processing1+0x9c>
			if(is_button_pressed(0)){
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f000 f9d8 	bl	80010c0 <is_button_pressed>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d035      	beq.n	8000d82 <fsm_for_input_processing1+0x92>
				buttonState1 = BUTTON_PRESSED ;
 8000d16:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <fsm_for_input_processing1+0xa0>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	701a      	strb	r2, [r3, #0]
				if(ProcessButton1() == 1){
 8000d1c:	f000 f8da 	bl	8000ed4 <ProcessButton1>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d12d      	bne.n	8000d82 <fsm_for_input_processing1+0x92>
					  counterMode++;
 8000d26:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <fsm_for_input_processing1+0xa4>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	4a19      	ldr	r2, [pc, #100]	; (8000d94 <fsm_for_input_processing1+0xa4>)
 8000d2e:	6013      	str	r3, [r2, #0]
					  counterTimeSet = 0;
 8000d30:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <fsm_for_input_processing1+0xa8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
					  if(counterMode > 4){
 8000d36:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <fsm_for_input_processing1+0xa4>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	dd21      	ble.n	8000d82 <fsm_for_input_processing1+0x92>
						  counterMode = 1;
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <fsm_for_input_processing1+0xa4>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	601a      	str	r2, [r3, #0]
		break;
 8000d44:	e01d      	b.n	8000d82 <fsm_for_input_processing1+0x92>
			if(!is_button_pressed(0)){
 8000d46:	2000      	movs	r0, #0
 8000d48:	f000 f9ba 	bl	80010c0 <is_button_pressed>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d103      	bne.n	8000d5a <fsm_for_input_processing1+0x6a>
				buttonState1 = BUTTON_RELEASED;
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <fsm_for_input_processing1+0xa0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
		break;
 8000d58:	e015      	b.n	8000d86 <fsm_for_input_processing1+0x96>
				if(is_button_pressed_1s(0) == 1){
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f000 f9ca 	bl	80010f4 <is_button_pressed_1s>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d10f      	bne.n	8000d86 <fsm_for_input_processing1+0x96>
					buttonState1 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000d66:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <fsm_for_input_processing1+0xa0>)
 8000d68:	2202      	movs	r2, #2
 8000d6a:	701a      	strb	r2, [r3, #0]
		break;
 8000d6c:	e00b      	b.n	8000d86 <fsm_for_input_processing1+0x96>
			if(!is_button_pressed(0)){
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f000 f9a6 	bl	80010c0 <is_button_pressed>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d107      	bne.n	8000d8a <fsm_for_input_processing1+0x9a>
				buttonState1 = BUTTON_RELEASED;
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <fsm_for_input_processing1+0xa0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
		break;
 8000d80:	e003      	b.n	8000d8a <fsm_for_input_processing1+0x9a>
		break;
 8000d82:	bf00      	nop
 8000d84:	e002      	b.n	8000d8c <fsm_for_input_processing1+0x9c>
		break;
 8000d86:	bf00      	nop
 8000d88:	e000      	b.n	8000d8c <fsm_for_input_processing1+0x9c>
		break;
 8000d8a:	bf00      	nop
	}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000068 	.word	0x20000068
 8000d94:	2000006c 	.word	0x2000006c
 8000d98:	20000070 	.word	0x20000070

08000d9c <fsm_for_input_processing2>:
void fsm_for_input_processing2(void){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	switch(buttonState2){
 8000da0:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <fsm_for_input_processing2+0x9c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d035      	beq.n	8000e14 <fsm_for_input_processing2+0x78>
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	dc42      	bgt.n	8000e32 <fsm_for_input_processing2+0x96>
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d002      	beq.n	8000db6 <fsm_for_input_processing2+0x1a>
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d01b      	beq.n	8000dec <fsm_for_input_processing2+0x50>
			if(!is_button_pressed(1)){
				buttonState2 = BUTTON_RELEASED;
			}
		break;
		}
	}
 8000db4:	e03d      	b.n	8000e32 <fsm_for_input_processing2+0x96>
			if(is_button_pressed(1)){
 8000db6:	2001      	movs	r0, #1
 8000db8:	f000 f982 	bl	80010c0 <is_button_pressed>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d032      	beq.n	8000e28 <fsm_for_input_processing2+0x8c>
				buttonState2 = BUTTON_PRESSED ;
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <fsm_for_input_processing2+0x9c>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
				if(ProcessButton2() == 1){
 8000dc8:	f000 f8a2 	bl	8000f10 <ProcessButton2>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d12a      	bne.n	8000e28 <fsm_for_input_processing2+0x8c>
					  counterTimeSet++;
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <fsm_for_input_processing2+0xa0>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <fsm_for_input_processing2+0xa0>)
 8000dda:	6013      	str	r3, [r2, #0]
					  if(counterTimeSet > 99){
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <fsm_for_input_processing2+0xa0>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b63      	cmp	r3, #99	; 0x63
 8000de2:	dd21      	ble.n	8000e28 <fsm_for_input_processing2+0x8c>
						  counterTimeSet = 0;
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <fsm_for_input_processing2+0xa0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
		break;
 8000dea:	e01d      	b.n	8000e28 <fsm_for_input_processing2+0x8c>
			if(!is_button_pressed(1)){
 8000dec:	2001      	movs	r0, #1
 8000dee:	f000 f967 	bl	80010c0 <is_button_pressed>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d103      	bne.n	8000e00 <fsm_for_input_processing2+0x64>
				buttonState2 = BUTTON_RELEASED;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <fsm_for_input_processing2+0x9c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
		break;
 8000dfe:	e015      	b.n	8000e2c <fsm_for_input_processing2+0x90>
				if(is_button_pressed_1s(1) == 1){
 8000e00:	2001      	movs	r0, #1
 8000e02:	f000 f977 	bl	80010f4 <is_button_pressed_1s>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d10f      	bne.n	8000e2c <fsm_for_input_processing2+0x90>
					buttonState2 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <fsm_for_input_processing2+0x9c>)
 8000e0e:	2202      	movs	r2, #2
 8000e10:	701a      	strb	r2, [r3, #0]
		break;
 8000e12:	e00b      	b.n	8000e2c <fsm_for_input_processing2+0x90>
			if(!is_button_pressed(1)){
 8000e14:	2001      	movs	r0, #1
 8000e16:	f000 f953 	bl	80010c0 <is_button_pressed>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d107      	bne.n	8000e30 <fsm_for_input_processing2+0x94>
				buttonState2 = BUTTON_RELEASED;
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <fsm_for_input_processing2+0x9c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
		break;
 8000e26:	e003      	b.n	8000e30 <fsm_for_input_processing2+0x94>
		break;
 8000e28:	bf00      	nop
 8000e2a:	e002      	b.n	8000e32 <fsm_for_input_processing2+0x96>
		break;
 8000e2c:	bf00      	nop
 8000e2e:	e000      	b.n	8000e32 <fsm_for_input_processing2+0x96>
		break;
 8000e30:	bf00      	nop
	}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000069 	.word	0x20000069
 8000e3c:	20000070 	.word	0x20000070

08000e40 <fsm_for_input_processing3>:
void fsm_for_input_processing3(void){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	switch(buttonState3){
 8000e44:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <fsm_for_input_processing3+0x78>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d024      	beq.n	8000e96 <fsm_for_input_processing3+0x56>
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	dc31      	bgt.n	8000eb4 <fsm_for_input_processing3+0x74>
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d002      	beq.n	8000e5a <fsm_for_input_processing3+0x1a>
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d00a      	beq.n	8000e6e <fsm_for_input_processing3+0x2e>
			if(!is_button_pressed(2)){
				buttonState3 = BUTTON_RELEASED;
			}
		break;
		}
	}
 8000e58:	e02c      	b.n	8000eb4 <fsm_for_input_processing3+0x74>
			if(is_button_pressed(2)){
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	f000 f930 	bl	80010c0 <is_button_pressed>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d021      	beq.n	8000eaa <fsm_for_input_processing3+0x6a>
				buttonState3 = BUTTON_PRESSED ;
 8000e66:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <fsm_for_input_processing3+0x78>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	701a      	strb	r2, [r3, #0]
		break;
 8000e6c:	e01d      	b.n	8000eaa <fsm_for_input_processing3+0x6a>
			if(!is_button_pressed(2)){
 8000e6e:	2002      	movs	r0, #2
 8000e70:	f000 f926 	bl	80010c0 <is_button_pressed>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d103      	bne.n	8000e82 <fsm_for_input_processing3+0x42>
				buttonState3 = BUTTON_RELEASED;
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <fsm_for_input_processing3+0x78>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
		break;
 8000e80:	e015      	b.n	8000eae <fsm_for_input_processing3+0x6e>
				if(is_button_pressed_1s(2) == 1){
 8000e82:	2002      	movs	r0, #2
 8000e84:	f000 f936 	bl	80010f4 <is_button_pressed_1s>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d10f      	bne.n	8000eae <fsm_for_input_processing3+0x6e>
					buttonState3 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <fsm_for_input_processing3+0x78>)
 8000e90:	2202      	movs	r2, #2
 8000e92:	701a      	strb	r2, [r3, #0]
		break;
 8000e94:	e00b      	b.n	8000eae <fsm_for_input_processing3+0x6e>
			if(!is_button_pressed(2)){
 8000e96:	2002      	movs	r0, #2
 8000e98:	f000 f912 	bl	80010c0 <is_button_pressed>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d107      	bne.n	8000eb2 <fsm_for_input_processing3+0x72>
				buttonState3 = BUTTON_RELEASED;
 8000ea2:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <fsm_for_input_processing3+0x78>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
		break;
 8000ea8:	e003      	b.n	8000eb2 <fsm_for_input_processing3+0x72>
		break;
 8000eaa:	bf00      	nop
 8000eac:	e002      	b.n	8000eb4 <fsm_for_input_processing3+0x74>
		break;
 8000eae:	bf00      	nop
 8000eb0:	e000      	b.n	8000eb4 <fsm_for_input_processing3+0x74>
		break;
 8000eb2:	bf00      	nop
	}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	2000006a 	.word	0x2000006a

08000ebc <Button1Run>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;
void Button1Run(void){
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
 	button1_flag = 1;
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <Button1Run+0x14>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	601a      	str	r2, [r3, #0]
 }
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	2000008c 	.word	0x2000008c

08000ed4 <ProcessButton1>:
int ProcessButton1(void){
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
	 if(button1_flag == 1){
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <ProcessButton1+0x20>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d104      	bne.n	8000eea <ProcessButton1+0x16>
		 button1_flag = 0;
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <ProcessButton1+0x20>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
		 return 1;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e000      	b.n	8000eec <ProcessButton1+0x18>
	 }
	 return 0;
 8000eea:	2300      	movs	r3, #0
 }
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	2000008c 	.word	0x2000008c

08000ef8 <Button2Run>:
void Button2Run(void){
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
 	button2_flag = 1;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <Button2Run+0x14>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	601a      	str	r2, [r3, #0]
 }
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000090 	.word	0x20000090

08000f10 <ProcessButton2>:
int ProcessButton2(void){
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
	 if(button2_flag == 1){
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <ProcessButton2+0x20>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d104      	bne.n	8000f26 <ProcessButton2+0x16>
		 button2_flag = 0;
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <ProcessButton2+0x20>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
		 return 1;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <ProcessButton2+0x18>
	 }
	 return 0;
 8000f26:	2300      	movs	r3, #0
 }
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	20000090 	.word	0x20000090

08000f34 <Button3Run>:
void Button3Run(void){
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
 	button3_flag = 1;
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <Button3Run+0x14>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	601a      	str	r2, [r3, #0]
 }
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000094 	.word	0x20000094

08000f4c <ProcessButton3>:
int ProcessButton3(void){
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
	 if(button3_flag == 1){
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <ProcessButton3+0x20>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d104      	bne.n	8000f62 <ProcessButton3+0x16>
		 button3_flag = 0;
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <ProcessButton3+0x20>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
		 return 1;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e000      	b.n	8000f64 <ProcessButton3+0x18>
	 }
	 return 0;
 8000f62:	2300      	movs	r3, #0
 }
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	20000094 	.word	0x20000094

08000f70 <button_reading>:
		void button_reading(void){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
			 for(unsigned char i = 0;i < N0_OF_BUTTONS;i++){
 8000f76:	2300      	movs	r3, #0
 8000f78:	71fb      	strb	r3, [r7, #7]
 8000f7a:	e08b      	b.n	8001094 <button_reading+0x124>
				 debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000f7c:	79fa      	ldrb	r2, [r7, #7]
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	4949      	ldr	r1, [pc, #292]	; (80010a8 <button_reading+0x138>)
 8000f82:	5c89      	ldrb	r1, [r1, r2]
 8000f84:	4a49      	ldr	r2, [pc, #292]	; (80010ac <button_reading+0x13c>)
 8000f86:	54d1      	strb	r1, [r2, r3]
				 if(i == 0){
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d108      	bne.n	8000fa0 <button_reading+0x30>
				 debounceButtonBuffer1[0] = HAL_GPIO_ReadPin(Button_GPIO_Port,Button_Pin);
 8000f8e:	2101      	movs	r1, #1
 8000f90:	4847      	ldr	r0, [pc, #284]	; (80010b0 <button_reading+0x140>)
 8000f92:	f001 f98f 	bl	80022b4 <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b43      	ldr	r3, [pc, #268]	; (80010a8 <button_reading+0x138>)
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	e016      	b.n	8000fce <button_reading+0x5e>
				 }
				 else if(i == 1){
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d108      	bne.n	8000fb8 <button_reading+0x48>
				 debounceButtonBuffer1[1] = HAL_GPIO_ReadPin(Button1_GPIO_Port,Button1_Pin);
 8000fa6:	2102      	movs	r1, #2
 8000fa8:	4841      	ldr	r0, [pc, #260]	; (80010b0 <button_reading+0x140>)
 8000faa:	f001 f983 	bl	80022b4 <HAL_GPIO_ReadPin>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b3d      	ldr	r3, [pc, #244]	; (80010a8 <button_reading+0x138>)
 8000fb4:	705a      	strb	r2, [r3, #1]
 8000fb6:	e00a      	b.n	8000fce <button_reading+0x5e>
				 }
				 else if(i == 2){
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d107      	bne.n	8000fce <button_reading+0x5e>
				 debounceButtonBuffer1[2] = HAL_GPIO_ReadPin(Button2_GPIO_Port,Button2_Pin);
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	483b      	ldr	r0, [pc, #236]	; (80010b0 <button_reading+0x140>)
 8000fc2:	f001 f977 	bl	80022b4 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b37      	ldr	r3, [pc, #220]	; (80010a8 <button_reading+0x138>)
 8000fcc:	709a      	strb	r2, [r3, #2]
				 }
				 if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	4a35      	ldr	r2, [pc, #212]	; (80010a8 <button_reading+0x138>)
 8000fd2:	5cd2      	ldrb	r2, [r2, r3]
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	4935      	ldr	r1, [pc, #212]	; (80010ac <button_reading+0x13c>)
 8000fd8:	5ccb      	ldrb	r3, [r1, r3]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d14e      	bne.n	800107c <button_reading+0x10c>
					 buttonBuffer[i] = debounceButtonBuffer1[i];
 8000fde:	79fa      	ldrb	r2, [r7, #7]
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	4931      	ldr	r1, [pc, #196]	; (80010a8 <button_reading+0x138>)
 8000fe4:	5c89      	ldrb	r1, [r1, r2]
 8000fe6:	4a33      	ldr	r2, [pc, #204]	; (80010b4 <button_reading+0x144>)
 8000fe8:	54d1      	strb	r1, [r2, r3]
					 if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	4a31      	ldr	r2, [pc, #196]	; (80010b4 <button_reading+0x144>)
 8000fee:	5cd3      	ldrb	r3, [r2, r3]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d14c      	bne.n	800108e <button_reading+0x11e>
						 if(i == 0){
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d102      	bne.n	8001000 <button_reading+0x90>
							 Button1Run();
 8000ffa:	f7ff ff5f 	bl	8000ebc <Button1Run>
 8000ffe:	e00a      	b.n	8001016 <button_reading+0xa6>
						 }
						 else if(i == 1){
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d102      	bne.n	800100c <button_reading+0x9c>
							 Button2Run();
 8001006:	f7ff ff77 	bl	8000ef8 <Button2Run>
 800100a:	e004      	b.n	8001016 <button_reading+0xa6>
						 }
						 else if(i == 2){
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b02      	cmp	r3, #2
 8001010:	d101      	bne.n	8001016 <button_reading+0xa6>
							 Button3Run();
 8001012:	f7ff ff8f 	bl	8000f34 <Button3Run>
						 }
						 if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING && flagForButtonPress1s[i] == 0){
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4a27      	ldr	r2, [pc, #156]	; (80010b8 <button_reading+0x148>)
 800101a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800101e:	2b09      	cmp	r3, #9
 8001020:	d80e      	bhi.n	8001040 <button_reading+0xd0>
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	4a25      	ldr	r2, [pc, #148]	; (80010bc <button_reading+0x14c>)
 8001026:	5cd3      	ldrb	r3, [r2, r3]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d109      	bne.n	8001040 <button_reading+0xd0>
							 counterForButtonPress1s[i]++;
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	4a22      	ldr	r2, [pc, #136]	; (80010b8 <button_reading+0x148>)
 8001030:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001034:	3201      	adds	r2, #1
 8001036:	b291      	uxth	r1, r2
 8001038:	4a1f      	ldr	r2, [pc, #124]	; (80010b8 <button_reading+0x148>)
 800103a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800103e:	e026      	b.n	800108e <button_reading+0x11e>
						 }
						 else{
							 flagForButtonPress1s[i] = 1;
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	4a1e      	ldr	r2, [pc, #120]	; (80010bc <button_reading+0x14c>)
 8001044:	2101      	movs	r1, #1
 8001046:	54d1      	strb	r1, [r2, r3]

							 if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING2){
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <button_reading+0x148>)
 800104c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001050:	2b0e      	cmp	r3, #14
 8001052:	d809      	bhi.n	8001068 <button_reading+0xf8>
								counterForButtonPress1s[i]++;
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	4a18      	ldr	r2, [pc, #96]	; (80010b8 <button_reading+0x148>)
 8001058:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800105c:	3201      	adds	r2, #1
 800105e:	b291      	uxth	r1, r2
 8001060:	4a15      	ldr	r2, [pc, #84]	; (80010b8 <button_reading+0x148>)
 8001062:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001066:	e012      	b.n	800108e <button_reading+0x11e>
							 }
							 else{
								buttonBuffer[i] = BUTTON_IS_RELEASED;
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <button_reading+0x144>)
 800106c:	2101      	movs	r1, #1
 800106e:	54d1      	strb	r1, [r2, r3]
								counterForButtonPress1s[i] = 10;
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	4a11      	ldr	r2, [pc, #68]	; (80010b8 <button_reading+0x148>)
 8001074:	210a      	movs	r1, #10
 8001076:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800107a:	e008      	b.n	800108e <button_reading+0x11e>

						 }
					 }
				 }
					 else{
						 counterForButtonPress1s[i] = 0;
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <button_reading+0x148>)
 8001080:	2100      	movs	r1, #0
 8001082:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						 flagForButtonPress1s[i] = 0;
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	4a0c      	ldr	r2, [pc, #48]	; (80010bc <button_reading+0x14c>)
 800108a:	2100      	movs	r1, #0
 800108c:	54d1      	strb	r1, [r2, r3]
			 for(unsigned char i = 0;i < N0_OF_BUTTONS;i++){
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	3301      	adds	r3, #1
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b02      	cmp	r3, #2
 8001098:	f67f af70 	bls.w	8000f7c <button_reading+0xc>
					 }
				 }
			}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000078 	.word	0x20000078
 80010ac:	2000007c 	.word	0x2000007c
 80010b0:	40010c00 	.word	0x40010c00
 80010b4:	20000074 	.word	0x20000074
 80010b8:	20000084 	.word	0x20000084
 80010bc:	20000080 	.word	0x20000080

080010c0 <is_button_pressed>:
unsigned char is_button_pressed(uint8_t index){
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <is_button_pressed+0x14>
 80010d0:	2300      	movs	r3, #0
 80010d2:	e007      	b.n	80010e4 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <is_button_pressed+0x30>)
 80010d8:	5cd3      	ldrb	r3, [r2, r3]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	bf0c      	ite	eq
 80010de:	2301      	moveq	r3, #1
 80010e0:	2300      	movne	r3, #0
 80010e2:	b2db      	uxtb	r3, r3
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000074 	.word	0x20000074

080010f4 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char index){
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff;
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	2b02      	cmp	r3, #2
 8001102:	d901      	bls.n	8001108 <is_button_pressed_1s+0x14>
 8001104:	23ff      	movs	r3, #255	; 0xff
 8001106:	e007      	b.n	8001118 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1) ;
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	4a06      	ldr	r2, [pc, #24]	; (8001124 <is_button_pressed_1s+0x30>)
 800110c:	5cd3      	ldrb	r3, [r2, r3]
 800110e:	2b01      	cmp	r3, #1
 8001110:	bf0c      	ite	eq
 8001112:	2301      	moveq	r3, #1
 8001114:	2300      	movne	r3, #0
 8001116:	b2db      	uxtb	r3, r3
}
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000080 	.word	0x20000080

08001128 <Display7Seg>:
 *
 *  Created on: Sep 27, 2024
 *      Author: Genki
 */
#include "main.h"
void Display7Seg(int x){
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	if(x == 0){
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d128      	bne.n	8001188 <Display7Seg+0x60>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	2180      	movs	r1, #128	; 0x80
 800113a:	48d2      	ldr	r0, [pc, #840]	; (8001484 <Display7Seg+0x35c>)
 800113c:	f001 f8d1 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001146:	48cf      	ldr	r0, [pc, #828]	; (8001484 <Display7Seg+0x35c>)
 8001148:	f001 f8cb 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001152:	48cc      	ldr	r0, [pc, #816]	; (8001484 <Display7Seg+0x35c>)
 8001154:	f001 f8c5 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800115e:	48c9      	ldr	r0, [pc, #804]	; (8001484 <Display7Seg+0x35c>)
 8001160:	f001 f8bf 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800116a:	48c6      	ldr	r0, [pc, #792]	; (8001484 <Display7Seg+0x35c>)
 800116c:	f001 f8b9 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001176:	48c3      	ldr	r0, [pc, #780]	; (8001484 <Display7Seg+0x35c>)
 8001178:	f001 f8b3 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 800117c:	2201      	movs	r2, #1
 800117e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001182:	48c0      	ldr	r0, [pc, #768]	; (8001484 <Display7Seg+0x35c>)
 8001184:	f001 f8ad 	bl	80022e2 <HAL_GPIO_WritePin>
	}
	if(x == 1){
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d128      	bne.n	80011e0 <Display7Seg+0xb8>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800118e:	2201      	movs	r2, #1
 8001190:	2180      	movs	r1, #128	; 0x80
 8001192:	48bc      	ldr	r0, [pc, #752]	; (8001484 <Display7Seg+0x35c>)
 8001194:	f001 f8a5 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119e:	48b9      	ldr	r0, [pc, #740]	; (8001484 <Display7Seg+0x35c>)
 80011a0:	f001 f89f 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011aa:	48b6      	ldr	r0, [pc, #728]	; (8001484 <Display7Seg+0x35c>)
 80011ac:	f001 f899 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b6:	48b3      	ldr	r0, [pc, #716]	; (8001484 <Display7Seg+0x35c>)
 80011b8:	f001 f893 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011c2:	48b0      	ldr	r0, [pc, #704]	; (8001484 <Display7Seg+0x35c>)
 80011c4:	f001 f88d 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ce:	48ad      	ldr	r0, [pc, #692]	; (8001484 <Display7Seg+0x35c>)
 80011d0:	f001 f887 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011da:	48aa      	ldr	r0, [pc, #680]	; (8001484 <Display7Seg+0x35c>)
 80011dc:	f001 f881 	bl	80022e2 <HAL_GPIO_WritePin>
		}
	if(x == 2){
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d128      	bne.n	8001238 <Display7Seg+0x110>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2180      	movs	r1, #128	; 0x80
 80011ea:	48a6      	ldr	r0, [pc, #664]	; (8001484 <Display7Seg+0x35c>)
 80011ec:	f001 f879 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f6:	48a3      	ldr	r0, [pc, #652]	; (8001484 <Display7Seg+0x35c>)
 80011f8:	f001 f873 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001202:	48a0      	ldr	r0, [pc, #640]	; (8001484 <Display7Seg+0x35c>)
 8001204:	f001 f86d 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800120e:	489d      	ldr	r0, [pc, #628]	; (8001484 <Display7Seg+0x35c>)
 8001210:	f001 f867 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800121a:	489a      	ldr	r0, [pc, #616]	; (8001484 <Display7Seg+0x35c>)
 800121c:	f001 f861 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001226:	4897      	ldr	r0, [pc, #604]	; (8001484 <Display7Seg+0x35c>)
 8001228:	f001 f85b 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001232:	4894      	ldr	r0, [pc, #592]	; (8001484 <Display7Seg+0x35c>)
 8001234:	f001 f855 	bl	80022e2 <HAL_GPIO_WritePin>
		}
	if(x == 3){
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b03      	cmp	r3, #3
 800123c:	d128      	bne.n	8001290 <Display7Seg+0x168>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	2180      	movs	r1, #128	; 0x80
 8001242:	4890      	ldr	r0, [pc, #576]	; (8001484 <Display7Seg+0x35c>)
 8001244:	f001 f84d 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800124e:	488d      	ldr	r0, [pc, #564]	; (8001484 <Display7Seg+0x35c>)
 8001250:	f001 f847 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	f44f 7100 	mov.w	r1, #512	; 0x200
 800125a:	488a      	ldr	r0, [pc, #552]	; (8001484 <Display7Seg+0x35c>)
 800125c:	f001 f841 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001266:	4887      	ldr	r0, [pc, #540]	; (8001484 <Display7Seg+0x35c>)
 8001268:	f001 f83b 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 800126c:	2201      	movs	r2, #1
 800126e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001272:	4884      	ldr	r0, [pc, #528]	; (8001484 <Display7Seg+0x35c>)
 8001274:	f001 f835 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8001278:	2201      	movs	r2, #1
 800127a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800127e:	4881      	ldr	r0, [pc, #516]	; (8001484 <Display7Seg+0x35c>)
 8001280:	f001 f82f 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800128a:	487e      	ldr	r0, [pc, #504]	; (8001484 <Display7Seg+0x35c>)
 800128c:	f001 f829 	bl	80022e2 <HAL_GPIO_WritePin>
		}
	if(x == 4){
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b04      	cmp	r3, #4
 8001294:	d128      	bne.n	80012e8 <Display7Seg+0x1c0>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001296:	2201      	movs	r2, #1
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	487a      	ldr	r0, [pc, #488]	; (8001484 <Display7Seg+0x35c>)
 800129c:	f001 f821 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a6:	4877      	ldr	r0, [pc, #476]	; (8001484 <Display7Seg+0x35c>)
 80012a8:	f001 f81b 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b2:	4874      	ldr	r0, [pc, #464]	; (8001484 <Display7Seg+0x35c>)
 80012b4:	f001 f815 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012be:	4871      	ldr	r0, [pc, #452]	; (8001484 <Display7Seg+0x35c>)
 80012c0:	f001 f80f 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ca:	486e      	ldr	r0, [pc, #440]	; (8001484 <Display7Seg+0x35c>)
 80012cc:	f001 f809 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d6:	486b      	ldr	r0, [pc, #428]	; (8001484 <Display7Seg+0x35c>)
 80012d8:	f001 f803 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e2:	4868      	ldr	r0, [pc, #416]	; (8001484 <Display7Seg+0x35c>)
 80012e4:	f000 fffd 	bl	80022e2 <HAL_GPIO_WritePin>
		}
	if(x == 5){
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b05      	cmp	r3, #5
 80012ec:	d128      	bne.n	8001340 <Display7Seg+0x218>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2180      	movs	r1, #128	; 0x80
 80012f2:	4864      	ldr	r0, [pc, #400]	; (8001484 <Display7Seg+0x35c>)
 80012f4:	f000 fff5 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80012f8:	2201      	movs	r2, #1
 80012fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012fe:	4861      	ldr	r0, [pc, #388]	; (8001484 <Display7Seg+0x35c>)
 8001300:	f000 ffef 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 7100 	mov.w	r1, #512	; 0x200
 800130a:	485e      	ldr	r0, [pc, #376]	; (8001484 <Display7Seg+0x35c>)
 800130c:	f000 ffe9 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001316:	485b      	ldr	r0, [pc, #364]	; (8001484 <Display7Seg+0x35c>)
 8001318:	f000 ffe3 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 800131c:	2201      	movs	r2, #1
 800131e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001322:	4858      	ldr	r0, [pc, #352]	; (8001484 <Display7Seg+0x35c>)
 8001324:	f000 ffdd 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800132e:	4855      	ldr	r0, [pc, #340]	; (8001484 <Display7Seg+0x35c>)
 8001330:	f000 ffd7 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800133a:	4852      	ldr	r0, [pc, #328]	; (8001484 <Display7Seg+0x35c>)
 800133c:	f000 ffd1 	bl	80022e2 <HAL_GPIO_WritePin>
		}
	if(x == 6){
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b06      	cmp	r3, #6
 8001344:	d128      	bne.n	8001398 <Display7Seg+0x270>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	2180      	movs	r1, #128	; 0x80
 800134a:	484e      	ldr	r0, [pc, #312]	; (8001484 <Display7Seg+0x35c>)
 800134c:	f000 ffc9 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001350:	2201      	movs	r2, #1
 8001352:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001356:	484b      	ldr	r0, [pc, #300]	; (8001484 <Display7Seg+0x35c>)
 8001358:	f000 ffc3 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001362:	4848      	ldr	r0, [pc, #288]	; (8001484 <Display7Seg+0x35c>)
 8001364:	f000 ffbd 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800136e:	4845      	ldr	r0, [pc, #276]	; (8001484 <Display7Seg+0x35c>)
 8001370:	f000 ffb7 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800137a:	4842      	ldr	r0, [pc, #264]	; (8001484 <Display7Seg+0x35c>)
 800137c:	f000 ffb1 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001386:	483f      	ldr	r0, [pc, #252]	; (8001484 <Display7Seg+0x35c>)
 8001388:	f000 ffab 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001392:	483c      	ldr	r0, [pc, #240]	; (8001484 <Display7Seg+0x35c>)
 8001394:	f000 ffa5 	bl	80022e2 <HAL_GPIO_WritePin>
		}
	if(x == 7){
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b07      	cmp	r3, #7
 800139c:	d128      	bne.n	80013f0 <Display7Seg+0x2c8>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	2180      	movs	r1, #128	; 0x80
 80013a2:	4838      	ldr	r0, [pc, #224]	; (8001484 <Display7Seg+0x35c>)
 80013a4:	f000 ff9d 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80013a8:	2200      	movs	r2, #0
 80013aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ae:	4835      	ldr	r0, [pc, #212]	; (8001484 <Display7Seg+0x35c>)
 80013b0:	f000 ff97 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ba:	4832      	ldr	r0, [pc, #200]	; (8001484 <Display7Seg+0x35c>)
 80013bc:	f000 ff91 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80013c0:	2201      	movs	r2, #1
 80013c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013c6:	482f      	ldr	r0, [pc, #188]	; (8001484 <Display7Seg+0x35c>)
 80013c8:	f000 ff8b 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 80013cc:	2201      	movs	r2, #1
 80013ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013d2:	482c      	ldr	r0, [pc, #176]	; (8001484 <Display7Seg+0x35c>)
 80013d4:	f000 ff85 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 80013d8:	2201      	movs	r2, #1
 80013da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013de:	4829      	ldr	r0, [pc, #164]	; (8001484 <Display7Seg+0x35c>)
 80013e0:	f000 ff7f 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 80013e4:	2201      	movs	r2, #1
 80013e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ea:	4826      	ldr	r0, [pc, #152]	; (8001484 <Display7Seg+0x35c>)
 80013ec:	f000 ff79 	bl	80022e2 <HAL_GPIO_WritePin>
		}
	if(x == 8){
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d128      	bne.n	8001448 <Display7Seg+0x320>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2180      	movs	r1, #128	; 0x80
 80013fa:	4822      	ldr	r0, [pc, #136]	; (8001484 <Display7Seg+0x35c>)
 80013fc:	f000 ff71 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001406:	481f      	ldr	r0, [pc, #124]	; (8001484 <Display7Seg+0x35c>)
 8001408:	f000 ff6b 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001412:	481c      	ldr	r0, [pc, #112]	; (8001484 <Display7Seg+0x35c>)
 8001414:	f000 ff65 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800141e:	4819      	ldr	r0, [pc, #100]	; (8001484 <Display7Seg+0x35c>)
 8001420:	f000 ff5f 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800142a:	4816      	ldr	r0, [pc, #88]	; (8001484 <Display7Seg+0x35c>)
 800142c:	f000 ff59 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001436:	4813      	ldr	r0, [pc, #76]	; (8001484 <Display7Seg+0x35c>)
 8001438:	f000 ff53 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001442:	4810      	ldr	r0, [pc, #64]	; (8001484 <Display7Seg+0x35c>)
 8001444:	f000 ff4d 	bl	80022e2 <HAL_GPIO_WritePin>
			}
	if(x == 9){
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b09      	cmp	r3, #9
 800144c:	d12b      	bne.n	80014a6 <Display7Seg+0x37e>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	480c      	ldr	r0, [pc, #48]	; (8001484 <Display7Seg+0x35c>)
 8001454:	f000 ff45 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800145e:	4809      	ldr	r0, [pc, #36]	; (8001484 <Display7Seg+0x35c>)
 8001460:	f000 ff3f 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	f44f 7100 	mov.w	r1, #512	; 0x200
 800146a:	4806      	ldr	r0, [pc, #24]	; (8001484 <Display7Seg+0x35c>)
 800146c:	f000 ff39 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001476:	4803      	ldr	r0, [pc, #12]	; (8001484 <Display7Seg+0x35c>)
 8001478:	f000 ff33 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 800147c:	2201      	movs	r2, #1
 800147e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001482:	e001      	b.n	8001488 <Display7Seg+0x360>
 8001484:	40010800 	.word	0x40010800
 8001488:	4809      	ldr	r0, [pc, #36]	; (80014b0 <Display7Seg+0x388>)
 800148a:	f000 ff2a 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001494:	4806      	ldr	r0, [pc, #24]	; (80014b0 <Display7Seg+0x388>)
 8001496:	f000 ff24 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a0:	4803      	ldr	r0, [pc, #12]	; (80014b0 <Display7Seg+0x388>)
 80014a2:	f000 ff1e 	bl	80022e2 <HAL_GPIO_WritePin>
	}
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40010800 	.word	0x40010800

080014b4 <Display>:
void Display(int x){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d86e      	bhi.n	80015a0 <Display+0xec>
 80014c2:	a201      	add	r2, pc, #4	; (adr r2, 80014c8 <Display+0x14>)
 80014c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c8:	080014d9 	.word	0x080014d9
 80014cc:	0800150b 	.word	0x0800150b
 80014d0:	0800153d 	.word	0x0800153d
 80014d4:	0800156f 	.word	0x0800156f
	switch(x){
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014de:	4833      	ldr	r0, [pc, #204]	; (80015ac <Display+0xf8>)
 80014e0:	f000 feff 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80014e4:	2201      	movs	r2, #1
 80014e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ea:	4830      	ldr	r0, [pc, #192]	; (80015ac <Display+0xf8>)
 80014ec:	f000 fef9 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80014f0:	2201      	movs	r2, #1
 80014f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014f6:	482d      	ldr	r0, [pc, #180]	; (80015ac <Display+0xf8>)
 80014f8:	f000 fef3 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80014fc:	2201      	movs	r2, #1
 80014fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001502:	482a      	ldr	r0, [pc, #168]	; (80015ac <Display+0xf8>)
 8001504:	f000 feed 	bl	80022e2 <HAL_GPIO_WritePin>
		break;
 8001508:	e04b      	b.n	80015a2 <Display+0xee>
	case 1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800150a:	2201      	movs	r2, #1
 800150c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001510:	4826      	ldr	r0, [pc, #152]	; (80015ac <Display+0xf8>)
 8001512:	f000 fee6 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800151c:	4823      	ldr	r0, [pc, #140]	; (80015ac <Display+0xf8>)
 800151e:	f000 fee0 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001522:	2201      	movs	r2, #1
 8001524:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001528:	4820      	ldr	r0, [pc, #128]	; (80015ac <Display+0xf8>)
 800152a:	f000 feda 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800152e:	2201      	movs	r2, #1
 8001530:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001534:	481d      	ldr	r0, [pc, #116]	; (80015ac <Display+0xf8>)
 8001536:	f000 fed4 	bl	80022e2 <HAL_GPIO_WritePin>
		break;
 800153a:	e032      	b.n	80015a2 <Display+0xee>
	case 2:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800153c:	2201      	movs	r2, #1
 800153e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001542:	481a      	ldr	r0, [pc, #104]	; (80015ac <Display+0xf8>)
 8001544:	f000 fecd 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001548:	2201      	movs	r2, #1
 800154a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800154e:	4817      	ldr	r0, [pc, #92]	; (80015ac <Display+0xf8>)
 8001550:	f000 fec7 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800155a:	4814      	ldr	r0, [pc, #80]	; (80015ac <Display+0xf8>)
 800155c:	f000 fec1 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8001560:	2201      	movs	r2, #1
 8001562:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001566:	4811      	ldr	r0, [pc, #68]	; (80015ac <Display+0xf8>)
 8001568:	f000 febb 	bl	80022e2 <HAL_GPIO_WritePin>
		break;
 800156c:	e019      	b.n	80015a2 <Display+0xee>
	case 3:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800156e:	2201      	movs	r2, #1
 8001570:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001574:	480d      	ldr	r0, [pc, #52]	; (80015ac <Display+0xf8>)
 8001576:	f000 feb4 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800157a:	2201      	movs	r2, #1
 800157c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001580:	480a      	ldr	r0, [pc, #40]	; (80015ac <Display+0xf8>)
 8001582:	f000 feae 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001586:	2201      	movs	r2, #1
 8001588:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800158c:	4807      	ldr	r0, [pc, #28]	; (80015ac <Display+0xf8>)
 800158e:	f000 fea8 	bl	80022e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001598:	4804      	ldr	r0, [pc, #16]	; (80015ac <Display+0xf8>)
 800159a:	f000 fea2 	bl	80022e2 <HAL_GPIO_WritePin>

		break;
 800159e:	e000      	b.n	80015a2 <Display+0xee>
	default:
		break;
 80015a0:	bf00      	nop
	}
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40010c00 	.word	0x40010c00

080015b0 <DisplayREDX>:
void DisplayREDX(void){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, SET);
 80015b4:	2201      	movs	r2, #1
 80015b6:	2108      	movs	r1, #8
 80015b8:	4807      	ldr	r0, [pc, #28]	; (80015d8 <DisplayREDX+0x28>)
 80015ba:	f000 fe92 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2120      	movs	r1, #32
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <DisplayREDX+0x28>)
 80015c4:	f000 fe8d 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2110      	movs	r1, #16
 80015cc:	4802      	ldr	r0, [pc, #8]	; (80015d8 <DisplayREDX+0x28>)
 80015ce:	f000 fe88 	bl	80022e2 <HAL_GPIO_WritePin>
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40010c00 	.word	0x40010c00

080015dc <DisplayYELLOWX>:
void DisplayYELLOWX(void){
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, RESET);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2108      	movs	r1, #8
 80015e4:	4807      	ldr	r0, [pc, #28]	; (8001604 <DisplayYELLOWX+0x28>)
 80015e6:	f000 fe7c 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, RESET);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2120      	movs	r1, #32
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <DisplayYELLOWX+0x28>)
 80015f0:	f000 fe77 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, SET);
 80015f4:	2201      	movs	r2, #1
 80015f6:	2110      	movs	r1, #16
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <DisplayYELLOWX+0x28>)
 80015fa:	f000 fe72 	bl	80022e2 <HAL_GPIO_WritePin>
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40010c00 	.word	0x40010c00

08001608 <DisplayGREENX>:
void DisplayGREENX(void){
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	2108      	movs	r1, #8
 8001610:	4807      	ldr	r0, [pc, #28]	; (8001630 <DisplayGREENX+0x28>)
 8001612:	f000 fe66 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, SET);
 8001616:	2201      	movs	r2, #1
 8001618:	2120      	movs	r1, #32
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <DisplayGREENX+0x28>)
 800161c:	f000 fe61 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	2110      	movs	r1, #16
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <DisplayGREENX+0x28>)
 8001626:	f000 fe5c 	bl	80022e2 <HAL_GPIO_WritePin>
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40010c00 	.word	0x40010c00

08001634 <DisplayREDY>:
void DisplayREDY(void){
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, SET);
 8001638:	2201      	movs	r2, #1
 800163a:	2140      	movs	r1, #64	; 0x40
 800163c:	4807      	ldr	r0, [pc, #28]	; (800165c <DisplayREDY+0x28>)
 800163e:	f000 fe50 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001648:	4804      	ldr	r0, [pc, #16]	; (800165c <DisplayREDY+0x28>)
 800164a:	f000 fe4a 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	4802      	ldr	r0, [pc, #8]	; (800165c <DisplayREDY+0x28>)
 8001654:	f000 fe45 	bl	80022e2 <HAL_GPIO_WritePin>
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40010c00 	.word	0x40010c00

08001660 <DisplayYELLOWY>:
void DisplayYELLOWY(void){
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	2140      	movs	r1, #64	; 0x40
 8001668:	4807      	ldr	r0, [pc, #28]	; (8001688 <DisplayYELLOWY+0x28>)
 800166a:	f000 fe3a 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <DisplayYELLOWY+0x28>)
 8001676:	f000 fe34 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, SET);
 800167a:	2201      	movs	r2, #1
 800167c:	2180      	movs	r1, #128	; 0x80
 800167e:	4802      	ldr	r0, [pc, #8]	; (8001688 <DisplayYELLOWY+0x28>)
 8001680:	f000 fe2f 	bl	80022e2 <HAL_GPIO_WritePin>
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40010c00 	.word	0x40010c00

0800168c <DisplayGREENY>:
void DisplayGREENY(void){
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	2140      	movs	r1, #64	; 0x40
 8001694:	4807      	ldr	r0, [pc, #28]	; (80016b4 <DisplayGREENY+0x28>)
 8001696:	f000 fe24 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, SET);
 800169a:	2201      	movs	r2, #1
 800169c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a0:	4804      	ldr	r0, [pc, #16]	; (80016b4 <DisplayGREENY+0x28>)
 80016a2:	f000 fe1e 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, RESET);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2180      	movs	r1, #128	; 0x80
 80016aa:	4802      	ldr	r0, [pc, #8]	; (80016b4 <DisplayGREENY+0x28>)
 80016ac:	f000 fe19 	bl	80022e2 <HAL_GPIO_WritePin>
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40010c00 	.word	0x40010c00

080016b8 <DisplayMAN_REDX>:
void DisplayMAN_REDX(void){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin);
 80016bc:	2108      	movs	r1, #8
 80016be:	4802      	ldr	r0, [pc, #8]	; (80016c8 <DisplayMAN_REDX+0x10>)
 80016c0:	f000 fe27 	bl	8002312 <HAL_GPIO_TogglePin>
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40010c00 	.word	0x40010c00

080016cc <DisplayMAN_REDY>:
void DisplayMAN_REDY(void){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin);
 80016d0:	2140      	movs	r1, #64	; 0x40
 80016d2:	4802      	ldr	r0, [pc, #8]	; (80016dc <DisplayMAN_REDY+0x10>)
 80016d4:	f000 fe1d 	bl	8002312 <HAL_GPIO_TogglePin>
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40010c00 	.word	0x40010c00

080016e0 <DisplayMAN_GREENX>:
void DisplayMAN_GREENX(void){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin);
 80016e4:	2120      	movs	r1, #32
 80016e6:	4802      	ldr	r0, [pc, #8]	; (80016f0 <DisplayMAN_GREENX+0x10>)
 80016e8:	f000 fe13 	bl	8002312 <HAL_GPIO_TogglePin>
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40010c00 	.word	0x40010c00

080016f4 <DisplayMAN_GREENY>:
void DisplayMAN_GREENY(void){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin);
 80016f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <DisplayMAN_GREENY+0x14>)
 80016fe:	f000 fe08 	bl	8002312 <HAL_GPIO_TogglePin>
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40010c00 	.word	0x40010c00

0800170c <DisplayMAN_YELLOWX>:
void DisplayMAN_YELLOWX(void){
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin);
 8001710:	2110      	movs	r1, #16
 8001712:	4802      	ldr	r0, [pc, #8]	; (800171c <DisplayMAN_YELLOWX+0x10>)
 8001714:	f000 fdfd 	bl	8002312 <HAL_GPIO_TogglePin>
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40010c00 	.word	0x40010c00

08001720 <DisplayMAN_YELLOWY>:
void DisplayMAN_YELLOWY(void){
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin);
 8001724:	2180      	movs	r1, #128	; 0x80
 8001726:	4802      	ldr	r0, [pc, #8]	; (8001730 <DisplayMAN_YELLOWY+0x10>)
 8001728:	f000 fdf3 	bl	8002312 <HAL_GPIO_TogglePin>
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40010c00 	.word	0x40010c00

08001734 <InitLED>:
void InitLED(void){
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	2108      	movs	r1, #8
 800173c:	480f      	ldr	r0, [pc, #60]	; (800177c <InitLED+0x48>)
 800173e:	f000 fdd0 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	2120      	movs	r1, #32
 8001746:	480d      	ldr	r0, [pc, #52]	; (800177c <InitLED+0x48>)
 8001748:	f000 fdcb 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	2110      	movs	r1, #16
 8001750:	480a      	ldr	r0, [pc, #40]	; (800177c <InitLED+0x48>)
 8001752:	f000 fdc6 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, RESET);
 8001756:	2200      	movs	r2, #0
 8001758:	2140      	movs	r1, #64	; 0x40
 800175a:	4808      	ldr	r0, [pc, #32]	; (800177c <InitLED+0x48>)
 800175c:	f000 fdc1 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, RESET);
 8001760:	2200      	movs	r2, #0
 8001762:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <InitLED+0x48>)
 8001768:	f000 fdbb 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, RESET);
 800176c:	2200      	movs	r2, #0
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <InitLED+0x48>)
 8001772:	f000 fdb6 	bl	80022e2 <HAL_GPIO_WritePin>
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40010c00 	.word	0x40010c00

08001780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001784:	f000 faac 	bl	8001ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001788:	f000 f8f6 	bl	8001978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800178c:	f000 f97c 	bl	8001a88 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001790:	f000 f92e 	bl	80019f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001794:	485e      	ldr	r0, [pc, #376]	; (8001910 <main+0x190>)
 8001796:	f001 fa01 	bl	8002b9c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800179a:	2201      	movs	r2, #1
 800179c:	2180      	movs	r1, #128	; 0x80
 800179e:	485d      	ldr	r0, [pc, #372]	; (8001914 <main+0x194>)
 80017a0:	f000 fd9f 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80017a4:	2201      	movs	r2, #1
 80017a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017aa:	485a      	ldr	r0, [pc, #360]	; (8001914 <main+0x194>)
 80017ac:	f000 fd99 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80017b0:	2201      	movs	r2, #1
 80017b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b6:	4857      	ldr	r0, [pc, #348]	; (8001914 <main+0x194>)
 80017b8:	f000 fd93 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80017bc:	2201      	movs	r2, #1
 80017be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017c2:	4854      	ldr	r0, [pc, #336]	; (8001914 <main+0x194>)
 80017c4:	f000 fd8d 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 80017c8:	2201      	movs	r2, #1
 80017ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017ce:	4851      	ldr	r0, [pc, #324]	; (8001914 <main+0x194>)
 80017d0:	f000 fd87 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 80017d4:	2201      	movs	r2, #1
 80017d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017da:	484e      	ldr	r0, [pc, #312]	; (8001914 <main+0x194>)
 80017dc:	f000 fd81 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 80017e0:	2201      	movs	r2, #1
 80017e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017e6:	484b      	ldr	r0, [pc, #300]	; (8001914 <main+0x194>)
 80017e8:	f000 fd7b 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80017ec:	2201      	movs	r2, #1
 80017ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017f2:	4849      	ldr	r0, [pc, #292]	; (8001918 <main+0x198>)
 80017f4:	f000 fd75 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80017f8:	2201      	movs	r2, #1
 80017fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017fe:	4846      	ldr	r0, [pc, #280]	; (8001918 <main+0x198>)
 8001800:	f000 fd6f 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001804:	2201      	movs	r2, #1
 8001806:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800180a:	4843      	ldr	r0, [pc, #268]	; (8001918 <main+0x198>)
 800180c:	f000 fd69 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001810:	2201      	movs	r2, #1
 8001812:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001816:	4840      	ldr	r0, [pc, #256]	; (8001918 <main+0x198>)
 8001818:	f000 fd63 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 800181c:	2201      	movs	r2, #1
 800181e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001822:	483d      	ldr	r0, [pc, #244]	; (8001918 <main+0x198>)
 8001824:	f000 fd5d 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, GPIO_PIN_SET);
 8001828:	2201      	movs	r2, #1
 800182a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800182e:	483a      	ldr	r0, [pc, #232]	; (8001918 <main+0x198>)
 8001830:	f000 fd57 	bl	80022e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN6_GPIO_Port, EN6_Pin, GPIO_PIN_SET);
 8001834:	2201      	movs	r2, #1
 8001836:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800183a:	4837      	ldr	r0, [pc, #220]	; (8001918 <main+0x198>)
 800183c:	f000 fd51 	bl	80022e2 <HAL_GPIO_WritePin>
	statusx = INIT;
 8001840:	4b36      	ldr	r3, [pc, #216]	; (800191c <main+0x19c>)
 8001842:	2201      	movs	r2, #1
 8001844:	601a      	str	r2, [r3, #0]
	statusy = INIT;
 8001846:	4b36      	ldr	r3, [pc, #216]	; (8001920 <main+0x1a0>)
 8001848:	2201      	movs	r2, #1
 800184a:	601a      	str	r2, [r3, #0]
	counter_x = 0;
 800184c:	4b35      	ldr	r3, [pc, #212]	; (8001924 <main+0x1a4>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
	counter_y = 0;
 8001852:	4b35      	ldr	r3, [pc, #212]	; (8001928 <main+0x1a8>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
	counterMode = 1;
 8001858:	4b34      	ldr	r3, [pc, #208]	; (800192c <main+0x1ac>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]
	counterTimeSet = 0;
 800185e:	4b34      	ldr	r3, [pc, #208]	; (8001930 <main+0x1b0>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
	DisplayCounter = 0;
 8001864:	4b33      	ldr	r3, [pc, #204]	; (8001934 <main+0x1b4>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
	SCH_Add_Task(task1, 50, 50);
 800186a:	2232      	movs	r2, #50	; 0x32
 800186c:	2132      	movs	r1, #50	; 0x32
 800186e:	4832      	ldr	r0, [pc, #200]	; (8001938 <main+0x1b8>)
 8001870:	f7fe fcda 	bl	8000228 <SCH_Add_Task>
	SCH_Add_Task(task2, 100, 100);
 8001874:	2264      	movs	r2, #100	; 0x64
 8001876:	2164      	movs	r1, #100	; 0x64
 8001878:	4830      	ldr	r0, [pc, #192]	; (800193c <main+0x1bc>)
 800187a:	f7fe fcd5 	bl	8000228 <SCH_Add_Task>
	SCH_Add_Task(task3, 150, 150);
 800187e:	2296      	movs	r2, #150	; 0x96
 8001880:	2196      	movs	r1, #150	; 0x96
 8001882:	482f      	ldr	r0, [pc, #188]	; (8001940 <main+0x1c0>)
 8001884:	f7fe fcd0 	bl	8000228 <SCH_Add_Task>
	SCH_Add_Task(task4, 200, 200);
 8001888:	22c8      	movs	r2, #200	; 0xc8
 800188a:	21c8      	movs	r1, #200	; 0xc8
 800188c:	482d      	ldr	r0, [pc, #180]	; (8001944 <main+0x1c4>)
 800188e:	f7fe fccb 	bl	8000228 <SCH_Add_Task>
	SCH_Add_Task(task5, 250, 250);
 8001892:	22fa      	movs	r2, #250	; 0xfa
 8001894:	21fa      	movs	r1, #250	; 0xfa
 8001896:	482c      	ldr	r0, [pc, #176]	; (8001948 <main+0x1c8>)
 8001898:	f7fe fcc6 	bl	8000228 <SCH_Add_Task>
	SCH_Add_Task(fsm_automatic_runx, 0, 10);
 800189c:	220a      	movs	r2, #10
 800189e:	2100      	movs	r1, #0
 80018a0:	482a      	ldr	r0, [pc, #168]	; (800194c <main+0x1cc>)
 80018a2:	f7fe fcc1 	bl	8000228 <SCH_Add_Task>
	SCH_Add_Task(fsm_automatic_runy, 0, 10);
 80018a6:	220a      	movs	r2, #10
 80018a8:	2100      	movs	r1, #0
 80018aa:	4829      	ldr	r0, [pc, #164]	; (8001950 <main+0x1d0>)
 80018ac:	f7fe fcbc 	bl	8000228 <SCH_Add_Task>
	SCH_Add_Task(fsm_clock, 100, 25);
 80018b0:	2219      	movs	r2, #25
 80018b2:	2164      	movs	r1, #100	; 0x64
 80018b4:	4827      	ldr	r0, [pc, #156]	; (8001954 <main+0x1d4>)
 80018b6:	f7fe fcb7 	bl	8000228 <SCH_Add_Task>
	SCH_Add_Task(clockX, 100, 100);
 80018ba:	2264      	movs	r2, #100	; 0x64
 80018bc:	2164      	movs	r1, #100	; 0x64
 80018be:	4826      	ldr	r0, [pc, #152]	; (8001958 <main+0x1d8>)
 80018c0:	f7fe fcb2 	bl	8000228 <SCH_Add_Task>
	SCH_Add_Task(clockY, 100, 100);
 80018c4:	2264      	movs	r2, #100	; 0x64
 80018c6:	2164      	movs	r1, #100	; 0x64
 80018c8:	4824      	ldr	r0, [pc, #144]	; (800195c <main+0x1dc>)
 80018ca:	f7fe fcad 	bl	8000228 <SCH_Add_Task>
	SCH_Add_Task(fsm_mode, 100, 25);
 80018ce:	2219      	movs	r2, #25
 80018d0:	2164      	movs	r1, #100	; 0x64
 80018d2:	4823      	ldr	r0, [pc, #140]	; (8001960 <main+0x1e0>)
 80018d4:	f7fe fca8 	bl	8000228 <SCH_Add_Task>
	SCH_Add_Task(fsm_manual_run1, 10, 10);
 80018d8:	220a      	movs	r2, #10
 80018da:	210a      	movs	r1, #10
 80018dc:	4821      	ldr	r0, [pc, #132]	; (8001964 <main+0x1e4>)
 80018de:	f7fe fca3 	bl	8000228 <SCH_Add_Task>
	SCH_Add_Task(fsm_manual_run2, 10, 10);
 80018e2:	220a      	movs	r2, #10
 80018e4:	210a      	movs	r1, #10
 80018e6:	4820      	ldr	r0, [pc, #128]	; (8001968 <main+0x1e8>)
 80018e8:	f7fe fc9e 	bl	8000228 <SCH_Add_Task>
	SCH_Add_Task(fsm_for_input_processing1, 10, 10);
 80018ec:	220a      	movs	r2, #10
 80018ee:	210a      	movs	r1, #10
 80018f0:	481e      	ldr	r0, [pc, #120]	; (800196c <main+0x1ec>)
 80018f2:	f7fe fc99 	bl	8000228 <SCH_Add_Task>
	SCH_Add_Task(fsm_for_input_processing2, 10, 10);
 80018f6:	220a      	movs	r2, #10
 80018f8:	210a      	movs	r1, #10
 80018fa:	481d      	ldr	r0, [pc, #116]	; (8001970 <main+0x1f0>)
 80018fc:	f7fe fc94 	bl	8000228 <SCH_Add_Task>
	SCH_Add_Task(fsm_for_input_processing3, 10, 10);
 8001900:	220a      	movs	r2, #10
 8001902:	210a      	movs	r1, #10
 8001904:	481b      	ldr	r0, [pc, #108]	; (8001974 <main+0x1f4>)
 8001906:	f7fe fc8f 	bl	8000228 <SCH_Add_Task>

  while (1)
  {
	  SCH_Dispatch_Tasks();
 800190a:	f7fe fcdf 	bl	80002cc <SCH_Dispatch_Tasks>
 800190e:	e7fc      	b.n	800190a <main+0x18a>
 8001910:	200003b8 	.word	0x200003b8
 8001914:	40010800 	.word	0x40010800
 8001918:	40010c00 	.word	0x40010c00
 800191c:	20000058 	.word	0x20000058
 8001920:	2000005c 	.word	0x2000005c
 8001924:	20000048 	.word	0x20000048
 8001928:	2000004c 	.word	0x2000004c
 800192c:	2000006c 	.word	0x2000006c
 8001930:	20000070 	.word	0x20000070
 8001934:	20000038 	.word	0x20000038
 8001938:	08000411 	.word	0x08000411
 800193c:	08000425 	.word	0x08000425
 8001940:	08000439 	.word	0x08000439
 8001944:	0800044d 	.word	0x0800044d
 8001948:	08000461 	.word	0x08000461
 800194c:	080008a1 	.word	0x080008a1
 8001950:	080009dd 	.word	0x080009dd
 8001954:	08000685 	.word	0x08000685
 8001958:	0800076d 	.word	0x0800076d
 800195c:	080007a5 	.word	0x080007a5
 8001960:	080007dd 	.word	0x080007dd
 8001964:	08000b19 	.word	0x08000b19
 8001968:	08000c09 	.word	0x08000c09
 800196c:	08000cf1 	.word	0x08000cf1
 8001970:	08000d9d 	.word	0x08000d9d
 8001974:	08000e41 	.word	0x08000e41

08001978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b090      	sub	sp, #64	; 0x40
 800197c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197e:	f107 0318 	add.w	r3, r7, #24
 8001982:	2228      	movs	r2, #40	; 0x28
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f001 fcb8 	bl	80032fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	60da      	str	r2, [r3, #12]
 8001998:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800199a:	2302      	movs	r3, #2
 800199c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800199e:	2301      	movs	r3, #1
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019a2:	2310      	movs	r3, #16
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019aa:	f107 0318 	add.w	r3, r7, #24
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 fcc8 	bl	8002344 <HAL_RCC_OscConfig>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <SystemClock_Config+0x46>
  {
    Error_Handler();
 80019ba:	f000 f8d8 	bl	8001b6e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019be:	230f      	movs	r3, #15
 80019c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 ff34 	bl	8002844 <HAL_RCC_ClockConfig>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80019e2:	f000 f8c4 	bl	8001b6e <Error_Handler>
  }
}
 80019e6:	bf00      	nop
 80019e8:	3740      	adds	r7, #64	; 0x40
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f6:	f107 0308 	add.w	r3, r7, #8
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a04:	463b      	mov	r3, r7
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <MX_TIM2_Init+0x94>)
 8001a0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <MX_TIM2_Init+0x94>)
 8001a16:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001a1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1c:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <MX_TIM2_Init+0x94>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <MX_TIM2_Init+0x94>)
 8001a24:	2209      	movs	r2, #9
 8001a26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a28:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <MX_TIM2_Init+0x94>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <MX_TIM2_Init+0x94>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a34:	4813      	ldr	r0, [pc, #76]	; (8001a84 <MX_TIM2_Init+0x94>)
 8001a36:	f001 f861 	bl	8002afc <HAL_TIM_Base_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a40:	f000 f895 	bl	8001b6e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480c      	ldr	r0, [pc, #48]	; (8001a84 <MX_TIM2_Init+0x94>)
 8001a52:	f001 f9df 	bl	8002e14 <HAL_TIM_ConfigClockSource>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a5c:	f000 f887 	bl	8001b6e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a60:	2300      	movs	r3, #0
 8001a62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a68:	463b      	mov	r3, r7
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_TIM2_Init+0x94>)
 8001a6e:	f001 fbb7 	bl	80031e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a78:	f000 f879 	bl	8001b6e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	200003b8 	.word	0x200003b8

08001a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8e:	f107 0308 	add.w	r3, r7, #8
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9c:	4b28      	ldr	r3, [pc, #160]	; (8001b40 <MX_GPIO_Init+0xb8>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	4a27      	ldr	r2, [pc, #156]	; (8001b40 <MX_GPIO_Init+0xb8>)
 8001aa2:	f043 0304 	orr.w	r3, r3, #4
 8001aa6:	6193      	str	r3, [r2, #24]
 8001aa8:	4b25      	ldr	r3, [pc, #148]	; (8001b40 <MX_GPIO_Init+0xb8>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab4:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <MX_GPIO_Init+0xb8>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	4a21      	ldr	r2, [pc, #132]	; (8001b40 <MX_GPIO_Init+0xb8>)
 8001aba:	f043 0308 	orr.w	r3, r3, #8
 8001abe:	6193      	str	r3, [r2, #24]
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <MX_GPIO_Init+0xb8>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	603b      	str	r3, [r7, #0]
 8001aca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED8_Pin|LED9_Pin|LED10_Pin|LED11_Pin
 8001acc:	2200      	movs	r2, #0
 8001ace:	f643 71fc 	movw	r1, #16380	; 0x3ffc
 8001ad2:	481c      	ldr	r0, [pc, #112]	; (8001b44 <MX_GPIO_Init+0xbc>)
 8001ad4:	f000 fc05 	bl	80022e2 <HAL_GPIO_WritePin>
                          |LED12_Pin|LED1_Pin|LED2_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN1_Pin|EN2_Pin|EN3_Pin|EN4_Pin
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 8001ade:	481a      	ldr	r0, [pc, #104]	; (8001b48 <MX_GPIO_Init+0xc0>)
 8001ae0:	f000 fbff 	bl	80022e2 <HAL_GPIO_WritePin>
                          |EN0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED8_Pin LED9_Pin LED10_Pin LED11_Pin
                           LED12_Pin LED1_Pin LED2_Pin LED3_Pin
                           LED4_Pin LED5_Pin LED6_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED8_Pin|LED9_Pin|LED10_Pin|LED11_Pin
 8001ae4:	f643 73fc 	movw	r3, #16380	; 0x3ffc
 8001ae8:	60bb      	str	r3, [r7, #8]
                          |LED12_Pin|LED1_Pin|LED2_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aea:	2301      	movs	r3, #1
 8001aec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2302      	movs	r3, #2
 8001af4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af6:	f107 0308 	add.w	r3, r7, #8
 8001afa:	4619      	mov	r1, r3
 8001afc:	4811      	ldr	r0, [pc, #68]	; (8001b44 <MX_GPIO_Init+0xbc>)
 8001afe:	f000 fa5f 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button_Pin|Button1_Pin|Button2_Pin;
 8001b02:	2307      	movs	r3, #7
 8001b04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0e:	f107 0308 	add.w	r3, r7, #8
 8001b12:	4619      	mov	r1, r3
 8001b14:	480c      	ldr	r0, [pc, #48]	; (8001b48 <MX_GPIO_Init+0xc0>)
 8001b16:	f000 fa53 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin EN4_Pin
                           EN5_Pin EN6_Pin LED_RED_X_Pin LED_YELLOW_X_Pin
                           LED_GREEN_X_Pin LED_RED_Y_Pin LED_YELLOW_Y_Pin LED_GREEN_Y_Pin
                           EN0_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin|EN4_Pin
 8001b1a:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001b1e:	60bb      	str	r3, [r7, #8]
                          |EN5_Pin|EN6_Pin|LED_RED_X_Pin|LED_YELLOW_X_Pin
                          |LED_GREEN_X_Pin|LED_RED_Y_Pin|LED_YELLOW_Y_Pin|LED_GREEN_Y_Pin
                          |EN0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b20:	2301      	movs	r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2c:	f107 0308 	add.w	r3, r7, #8
 8001b30:	4619      	mov	r1, r3
 8001b32:	4805      	ldr	r0, [pc, #20]	; (8001b48 <MX_GPIO_Init+0xc0>)
 8001b34:	f000 fa44 	bl	8001fc0 <HAL_GPIO_Init>

}
 8001b38:	bf00      	nop
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010800 	.word	0x40010800
 8001b48:	40010c00 	.word	0x40010c00

08001b4c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b5c:	d103      	bne.n	8001b66 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 8001b5e:	f7ff fa07 	bl	8000f70 <button_reading>
		SCH_Update();
 8001b62:	f7fe faf3 	bl	800014c <SCH_Update>
	}
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b72:	b672      	cpsid	i
}
 8001b74:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <Error_Handler+0x8>

08001b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <HAL_MspInit+0x5c>)
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	4a14      	ldr	r2, [pc, #80]	; (8001bd4 <HAL_MspInit+0x5c>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6193      	str	r3, [r2, #24]
 8001b8a:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <HAL_MspInit+0x5c>)
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <HAL_MspInit+0x5c>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	; (8001bd4 <HAL_MspInit+0x5c>)
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	61d3      	str	r3, [r2, #28]
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <HAL_MspInit+0x5c>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_MspInit+0x60>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <HAL_MspInit+0x60>)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40010000 	.word	0x40010000

08001bdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bec:	d113      	bne.n	8001c16 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <HAL_TIM_Base_MspInit+0x44>)
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <HAL_TIM_Base_MspInit+0x44>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	61d3      	str	r3, [r2, #28]
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_TIM_Base_MspInit+0x44>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	201c      	movs	r0, #28
 8001c0c:	f000 f9a1 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c10:	201c      	movs	r0, #28
 8001c12:	f000 f9ba 	bl	8001f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000

08001c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <NMI_Handler+0x4>

08001c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c2e:	e7fe      	b.n	8001c2e <HardFault_Handler+0x4>

08001c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <MemManage_Handler+0x4>

08001c36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c3a:	e7fe      	b.n	8001c3a <BusFault_Handler+0x4>

08001c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <UsageFault_Handler+0x4>

08001c42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr

08001c4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr

08001c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c6a:	f000 f87f 	bl	8001d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <TIM2_IRQHandler+0x10>)
 8001c7a:	f000 ffdb 	bl	8002c34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200003b8 	.word	0x200003b8

08001c88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c94:	f7ff fff8 	bl	8001c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c98:	480b      	ldr	r0, [pc, #44]	; (8001cc8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c9a:	490c      	ldr	r1, [pc, #48]	; (8001ccc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c9c:	4a0c      	ldr	r2, [pc, #48]	; (8001cd0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca0:	e002      	b.n	8001ca8 <LoopCopyDataInit>

08001ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ca6:	3304      	adds	r3, #4

08001ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cac:	d3f9      	bcc.n	8001ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cae:	4a09      	ldr	r2, [pc, #36]	; (8001cd4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cb0:	4c09      	ldr	r4, [pc, #36]	; (8001cd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb4:	e001      	b.n	8001cba <LoopFillZerobss>

08001cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb8:	3204      	adds	r2, #4

08001cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cbc:	d3fb      	bcc.n	8001cb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cbe:	f001 faf9 	bl	80032b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cc2:	f7ff fd5d 	bl	8001780 <main>
  bx lr
 8001cc6:	4770      	bx	lr
  ldr r0, =_sdata
 8001cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ccc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001cd0:	08003350 	.word	0x08003350
  ldr r2, =_sbss
 8001cd4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001cd8:	20000404 	.word	0x20000404

08001cdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cdc:	e7fe      	b.n	8001cdc <ADC1_2_IRQHandler>
	...

08001ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_Init+0x28>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a07      	ldr	r2, [pc, #28]	; (8001d08 <HAL_Init+0x28>)
 8001cea:	f043 0310 	orr.w	r3, r3, #16
 8001cee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf0:	2003      	movs	r0, #3
 8001cf2:	f000 f923 	bl	8001f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf6:	200f      	movs	r0, #15
 8001cf8:	f000 f808 	bl	8001d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cfc:	f7ff ff3c 	bl	8001b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40022000 	.word	0x40022000

08001d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d14:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_InitTick+0x54>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_InitTick+0x58>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 f93b 	bl	8001fa6 <HAL_SYSTICK_Config>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00e      	b.n	8001d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b0f      	cmp	r3, #15
 8001d3e:	d80a      	bhi.n	8001d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d40:	2200      	movs	r2, #0
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295
 8001d48:	f000 f903 	bl	8001f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d4c:	4a06      	ldr	r2, [pc, #24]	; (8001d68 <HAL_InitTick+0x5c>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e000      	b.n	8001d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	2000000c 	.word	0x2000000c
 8001d64:	20000014 	.word	0x20000014
 8001d68:	20000010 	.word	0x20000010

08001d6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_IncTick+0x1c>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <HAL_IncTick+0x20>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4a03      	ldr	r2, [pc, #12]	; (8001d8c <HAL_IncTick+0x20>)
 8001d7e:	6013      	str	r3, [r2, #0]
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	20000014 	.word	0x20000014
 8001d8c:	20000400 	.word	0x20000400

08001d90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return uwTick;
 8001d94:	4b02      	ldr	r3, [pc, #8]	; (8001da0 <HAL_GetTick+0x10>)
 8001d96:	681b      	ldr	r3, [r3, #0]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	20000400 	.word	0x20000400

08001da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <__NVIC_SetPriorityGrouping+0x44>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd6:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	60d3      	str	r3, [r2, #12]
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <__NVIC_GetPriorityGrouping+0x18>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	0a1b      	lsrs	r3, r3, #8
 8001df6:	f003 0307 	and.w	r3, r3, #7
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	db0b      	blt.n	8001e32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	f003 021f 	and.w	r2, r3, #31
 8001e20:	4906      	ldr	r1, [pc, #24]	; (8001e3c <__NVIC_EnableIRQ+0x34>)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	095b      	lsrs	r3, r3, #5
 8001e28:	2001      	movs	r0, #1
 8001e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	e000e100 	.word	0xe000e100

08001e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	6039      	str	r1, [r7, #0]
 8001e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	db0a      	blt.n	8001e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	490c      	ldr	r1, [pc, #48]	; (8001e8c <__NVIC_SetPriority+0x4c>)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	0112      	lsls	r2, r2, #4
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	440b      	add	r3, r1
 8001e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e68:	e00a      	b.n	8001e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4908      	ldr	r1, [pc, #32]	; (8001e90 <__NVIC_SetPriority+0x50>)
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	3b04      	subs	r3, #4
 8001e78:	0112      	lsls	r2, r2, #4
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	761a      	strb	r2, [r3, #24]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000e100 	.word	0xe000e100
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	; 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f1c3 0307 	rsb	r3, r3, #7
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	bf28      	it	cs
 8001eb2:	2304      	movcs	r3, #4
 8001eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	2b06      	cmp	r3, #6
 8001ebc:	d902      	bls.n	8001ec4 <NVIC_EncodePriority+0x30>
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3b03      	subs	r3, #3
 8001ec2:	e000      	b.n	8001ec6 <NVIC_EncodePriority+0x32>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001edc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee6:	43d9      	mvns	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	4313      	orrs	r3, r2
         );
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3724      	adds	r7, #36	; 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f08:	d301      	bcc.n	8001f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00f      	b.n	8001f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <SysTick_Config+0x40>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f16:	210f      	movs	r1, #15
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1c:	f7ff ff90 	bl	8001e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <SysTick_Config+0x40>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <SysTick_Config+0x40>)
 8001f28:	2207      	movs	r2, #7
 8001f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	e000e010 	.word	0xe000e010

08001f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ff2d 	bl	8001da4 <__NVIC_SetPriorityGrouping>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
 8001f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f64:	f7ff ff42 	bl	8001dec <__NVIC_GetPriorityGrouping>
 8001f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	6978      	ldr	r0, [r7, #20]
 8001f70:	f7ff ff90 	bl	8001e94 <NVIC_EncodePriority>
 8001f74:	4602      	mov	r2, r0
 8001f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff5f 	bl	8001e40 <__NVIC_SetPriority>
}
 8001f82:	bf00      	nop
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	4603      	mov	r3, r0
 8001f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff35 	bl	8001e08 <__NVIC_EnableIRQ>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff ffa2 	bl	8001ef8 <SysTick_Config>
 8001fb4:	4603      	mov	r3, r0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b08b      	sub	sp, #44	; 0x2c
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd2:	e148      	b.n	8002266 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	f040 8137 	bne.w	8002260 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4aa3      	ldr	r2, [pc, #652]	; (8002284 <HAL_GPIO_Init+0x2c4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d05e      	beq.n	80020ba <HAL_GPIO_Init+0xfa>
 8001ffc:	4aa1      	ldr	r2, [pc, #644]	; (8002284 <HAL_GPIO_Init+0x2c4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d875      	bhi.n	80020ee <HAL_GPIO_Init+0x12e>
 8002002:	4aa1      	ldr	r2, [pc, #644]	; (8002288 <HAL_GPIO_Init+0x2c8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d058      	beq.n	80020ba <HAL_GPIO_Init+0xfa>
 8002008:	4a9f      	ldr	r2, [pc, #636]	; (8002288 <HAL_GPIO_Init+0x2c8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d86f      	bhi.n	80020ee <HAL_GPIO_Init+0x12e>
 800200e:	4a9f      	ldr	r2, [pc, #636]	; (800228c <HAL_GPIO_Init+0x2cc>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d052      	beq.n	80020ba <HAL_GPIO_Init+0xfa>
 8002014:	4a9d      	ldr	r2, [pc, #628]	; (800228c <HAL_GPIO_Init+0x2cc>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d869      	bhi.n	80020ee <HAL_GPIO_Init+0x12e>
 800201a:	4a9d      	ldr	r2, [pc, #628]	; (8002290 <HAL_GPIO_Init+0x2d0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d04c      	beq.n	80020ba <HAL_GPIO_Init+0xfa>
 8002020:	4a9b      	ldr	r2, [pc, #620]	; (8002290 <HAL_GPIO_Init+0x2d0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d863      	bhi.n	80020ee <HAL_GPIO_Init+0x12e>
 8002026:	4a9b      	ldr	r2, [pc, #620]	; (8002294 <HAL_GPIO_Init+0x2d4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d046      	beq.n	80020ba <HAL_GPIO_Init+0xfa>
 800202c:	4a99      	ldr	r2, [pc, #612]	; (8002294 <HAL_GPIO_Init+0x2d4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d85d      	bhi.n	80020ee <HAL_GPIO_Init+0x12e>
 8002032:	2b12      	cmp	r3, #18
 8002034:	d82a      	bhi.n	800208c <HAL_GPIO_Init+0xcc>
 8002036:	2b12      	cmp	r3, #18
 8002038:	d859      	bhi.n	80020ee <HAL_GPIO_Init+0x12e>
 800203a:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <HAL_GPIO_Init+0x80>)
 800203c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002040:	080020bb 	.word	0x080020bb
 8002044:	08002095 	.word	0x08002095
 8002048:	080020a7 	.word	0x080020a7
 800204c:	080020e9 	.word	0x080020e9
 8002050:	080020ef 	.word	0x080020ef
 8002054:	080020ef 	.word	0x080020ef
 8002058:	080020ef 	.word	0x080020ef
 800205c:	080020ef 	.word	0x080020ef
 8002060:	080020ef 	.word	0x080020ef
 8002064:	080020ef 	.word	0x080020ef
 8002068:	080020ef 	.word	0x080020ef
 800206c:	080020ef 	.word	0x080020ef
 8002070:	080020ef 	.word	0x080020ef
 8002074:	080020ef 	.word	0x080020ef
 8002078:	080020ef 	.word	0x080020ef
 800207c:	080020ef 	.word	0x080020ef
 8002080:	080020ef 	.word	0x080020ef
 8002084:	0800209d 	.word	0x0800209d
 8002088:	080020b1 	.word	0x080020b1
 800208c:	4a82      	ldr	r2, [pc, #520]	; (8002298 <HAL_GPIO_Init+0x2d8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d013      	beq.n	80020ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002092:	e02c      	b.n	80020ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	623b      	str	r3, [r7, #32]
          break;
 800209a:	e029      	b.n	80020f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	3304      	adds	r3, #4
 80020a2:	623b      	str	r3, [r7, #32]
          break;
 80020a4:	e024      	b.n	80020f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	3308      	adds	r3, #8
 80020ac:	623b      	str	r3, [r7, #32]
          break;
 80020ae:	e01f      	b.n	80020f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	330c      	adds	r3, #12
 80020b6:	623b      	str	r3, [r7, #32]
          break;
 80020b8:	e01a      	b.n	80020f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d102      	bne.n	80020c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020c2:	2304      	movs	r3, #4
 80020c4:	623b      	str	r3, [r7, #32]
          break;
 80020c6:	e013      	b.n	80020f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d105      	bne.n	80020dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020d0:	2308      	movs	r3, #8
 80020d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69fa      	ldr	r2, [r7, #28]
 80020d8:	611a      	str	r2, [r3, #16]
          break;
 80020da:	e009      	b.n	80020f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020dc:	2308      	movs	r3, #8
 80020de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69fa      	ldr	r2, [r7, #28]
 80020e4:	615a      	str	r2, [r3, #20]
          break;
 80020e6:	e003      	b.n	80020f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020e8:	2300      	movs	r3, #0
 80020ea:	623b      	str	r3, [r7, #32]
          break;
 80020ec:	e000      	b.n	80020f0 <HAL_GPIO_Init+0x130>
          break;
 80020ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	2bff      	cmp	r3, #255	; 0xff
 80020f4:	d801      	bhi.n	80020fa <HAL_GPIO_Init+0x13a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	e001      	b.n	80020fe <HAL_GPIO_Init+0x13e>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3304      	adds	r3, #4
 80020fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	2bff      	cmp	r3, #255	; 0xff
 8002104:	d802      	bhi.n	800210c <HAL_GPIO_Init+0x14c>
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	e002      	b.n	8002112 <HAL_GPIO_Init+0x152>
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	3b08      	subs	r3, #8
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	210f      	movs	r1, #15
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	fa01 f303 	lsl.w	r3, r1, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	401a      	ands	r2, r3
 8002124:	6a39      	ldr	r1, [r7, #32]
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	431a      	orrs	r2, r3
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 8090 	beq.w	8002260 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002140:	4b56      	ldr	r3, [pc, #344]	; (800229c <HAL_GPIO_Init+0x2dc>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	4a55      	ldr	r2, [pc, #340]	; (800229c <HAL_GPIO_Init+0x2dc>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6193      	str	r3, [r2, #24]
 800214c:	4b53      	ldr	r3, [pc, #332]	; (800229c <HAL_GPIO_Init+0x2dc>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002158:	4a51      	ldr	r2, [pc, #324]	; (80022a0 <HAL_GPIO_Init+0x2e0>)
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	089b      	lsrs	r3, r3, #2
 800215e:	3302      	adds	r3, #2
 8002160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002164:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	220f      	movs	r2, #15
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4013      	ands	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a49      	ldr	r2, [pc, #292]	; (80022a4 <HAL_GPIO_Init+0x2e4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d00d      	beq.n	80021a0 <HAL_GPIO_Init+0x1e0>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a48      	ldr	r2, [pc, #288]	; (80022a8 <HAL_GPIO_Init+0x2e8>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d007      	beq.n	800219c <HAL_GPIO_Init+0x1dc>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a47      	ldr	r2, [pc, #284]	; (80022ac <HAL_GPIO_Init+0x2ec>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d101      	bne.n	8002198 <HAL_GPIO_Init+0x1d8>
 8002194:	2302      	movs	r3, #2
 8002196:	e004      	b.n	80021a2 <HAL_GPIO_Init+0x1e2>
 8002198:	2303      	movs	r3, #3
 800219a:	e002      	b.n	80021a2 <HAL_GPIO_Init+0x1e2>
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <HAL_GPIO_Init+0x1e2>
 80021a0:	2300      	movs	r3, #0
 80021a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a4:	f002 0203 	and.w	r2, r2, #3
 80021a8:	0092      	lsls	r2, r2, #2
 80021aa:	4093      	lsls	r3, r2
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021b2:	493b      	ldr	r1, [pc, #236]	; (80022a0 <HAL_GPIO_Init+0x2e0>)
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	089b      	lsrs	r3, r3, #2
 80021b8:	3302      	adds	r3, #2
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d006      	beq.n	80021da <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021cc:	4b38      	ldr	r3, [pc, #224]	; (80022b0 <HAL_GPIO_Init+0x2f0>)
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	4937      	ldr	r1, [pc, #220]	; (80022b0 <HAL_GPIO_Init+0x2f0>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	608b      	str	r3, [r1, #8]
 80021d8:	e006      	b.n	80021e8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021da:	4b35      	ldr	r3, [pc, #212]	; (80022b0 <HAL_GPIO_Init+0x2f0>)
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	4933      	ldr	r1, [pc, #204]	; (80022b0 <HAL_GPIO_Init+0x2f0>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d006      	beq.n	8002202 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021f4:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <HAL_GPIO_Init+0x2f0>)
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	492d      	ldr	r1, [pc, #180]	; (80022b0 <HAL_GPIO_Init+0x2f0>)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	60cb      	str	r3, [r1, #12]
 8002200:	e006      	b.n	8002210 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002202:	4b2b      	ldr	r3, [pc, #172]	; (80022b0 <HAL_GPIO_Init+0x2f0>)
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	43db      	mvns	r3, r3
 800220a:	4929      	ldr	r1, [pc, #164]	; (80022b0 <HAL_GPIO_Init+0x2f0>)
 800220c:	4013      	ands	r3, r2
 800220e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d006      	beq.n	800222a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800221c:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <HAL_GPIO_Init+0x2f0>)
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	4923      	ldr	r1, [pc, #140]	; (80022b0 <HAL_GPIO_Init+0x2f0>)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
 8002228:	e006      	b.n	8002238 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800222a:	4b21      	ldr	r3, [pc, #132]	; (80022b0 <HAL_GPIO_Init+0x2f0>)
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	43db      	mvns	r3, r3
 8002232:	491f      	ldr	r1, [pc, #124]	; (80022b0 <HAL_GPIO_Init+0x2f0>)
 8002234:	4013      	ands	r3, r2
 8002236:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d006      	beq.n	8002252 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002244:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <HAL_GPIO_Init+0x2f0>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4919      	ldr	r1, [pc, #100]	; (80022b0 <HAL_GPIO_Init+0x2f0>)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	600b      	str	r3, [r1, #0]
 8002250:	e006      	b.n	8002260 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002252:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <HAL_GPIO_Init+0x2f0>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	43db      	mvns	r3, r3
 800225a:	4915      	ldr	r1, [pc, #84]	; (80022b0 <HAL_GPIO_Init+0x2f0>)
 800225c:	4013      	ands	r3, r2
 800225e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	3301      	adds	r3, #1
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	fa22 f303 	lsr.w	r3, r2, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	f47f aeaf 	bne.w	8001fd4 <HAL_GPIO_Init+0x14>
  }
}
 8002276:	bf00      	nop
 8002278:	bf00      	nop
 800227a:	372c      	adds	r7, #44	; 0x2c
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	10320000 	.word	0x10320000
 8002288:	10310000 	.word	0x10310000
 800228c:	10220000 	.word	0x10220000
 8002290:	10210000 	.word	0x10210000
 8002294:	10120000 	.word	0x10120000
 8002298:	10110000 	.word	0x10110000
 800229c:	40021000 	.word	0x40021000
 80022a0:	40010000 	.word	0x40010000
 80022a4:	40010800 	.word	0x40010800
 80022a8:	40010c00 	.word	0x40010c00
 80022ac:	40011000 	.word	0x40011000
 80022b0:	40010400 	.word	0x40010400

080022b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	887b      	ldrh	r3, [r7, #2]
 80022c6:	4013      	ands	r3, r2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022cc:	2301      	movs	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
 80022d0:	e001      	b.n	80022d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022d2:	2300      	movs	r3, #0
 80022d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr

080022e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	460b      	mov	r3, r1
 80022ec:	807b      	strh	r3, [r7, #2]
 80022ee:	4613      	mov	r3, r2
 80022f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022f2:	787b      	ldrb	r3, [r7, #1]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022f8:	887a      	ldrh	r2, [r7, #2]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022fe:	e003      	b.n	8002308 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002300:	887b      	ldrh	r3, [r7, #2]
 8002302:	041a      	lsls	r2, r3, #16
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	611a      	str	r2, [r3, #16]
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002312:	b480      	push	{r7}
 8002314:	b085      	sub	sp, #20
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	460b      	mov	r3, r1
 800231c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002324:	887a      	ldrh	r2, [r7, #2]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4013      	ands	r3, r2
 800232a:	041a      	lsls	r2, r3, #16
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	43d9      	mvns	r1, r3
 8002330:	887b      	ldrh	r3, [r7, #2]
 8002332:	400b      	ands	r3, r1
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	611a      	str	r2, [r3, #16]
}
 800233a:	bf00      	nop
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr

08002344 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e26c      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 8087 	beq.w	8002472 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002364:	4b92      	ldr	r3, [pc, #584]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 030c 	and.w	r3, r3, #12
 800236c:	2b04      	cmp	r3, #4
 800236e:	d00c      	beq.n	800238a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002370:	4b8f      	ldr	r3, [pc, #572]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 030c 	and.w	r3, r3, #12
 8002378:	2b08      	cmp	r3, #8
 800237a:	d112      	bne.n	80023a2 <HAL_RCC_OscConfig+0x5e>
 800237c:	4b8c      	ldr	r3, [pc, #560]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002388:	d10b      	bne.n	80023a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238a:	4b89      	ldr	r3, [pc, #548]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d06c      	beq.n	8002470 <HAL_RCC_OscConfig+0x12c>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d168      	bne.n	8002470 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e246      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023aa:	d106      	bne.n	80023ba <HAL_RCC_OscConfig+0x76>
 80023ac:	4b80      	ldr	r3, [pc, #512]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a7f      	ldr	r2, [pc, #508]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80023b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	e02e      	b.n	8002418 <HAL_RCC_OscConfig+0xd4>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10c      	bne.n	80023dc <HAL_RCC_OscConfig+0x98>
 80023c2:	4b7b      	ldr	r3, [pc, #492]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a7a      	ldr	r2, [pc, #488]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	4b78      	ldr	r3, [pc, #480]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a77      	ldr	r2, [pc, #476]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e01d      	b.n	8002418 <HAL_RCC_OscConfig+0xd4>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0xbc>
 80023e6:	4b72      	ldr	r3, [pc, #456]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a71      	ldr	r2, [pc, #452]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	4b6f      	ldr	r3, [pc, #444]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a6e      	ldr	r2, [pc, #440]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e00b      	b.n	8002418 <HAL_RCC_OscConfig+0xd4>
 8002400:	4b6b      	ldr	r3, [pc, #428]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a6a      	ldr	r2, [pc, #424]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 8002406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b68      	ldr	r3, [pc, #416]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a67      	ldr	r2, [pc, #412]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 8002412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002416:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d013      	beq.n	8002448 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7ff fcb6 	bl	8001d90 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002428:	f7ff fcb2 	bl	8001d90 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b64      	cmp	r3, #100	; 0x64
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e1fa      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243a:	4b5d      	ldr	r3, [pc, #372]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0xe4>
 8002446:	e014      	b.n	8002472 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7ff fca2 	bl	8001d90 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002450:	f7ff fc9e 	bl	8001d90 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	; 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e1e6      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002462:	4b53      	ldr	r3, [pc, #332]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x10c>
 800246e:	e000      	b.n	8002472 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d063      	beq.n	8002546 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800247e:	4b4c      	ldr	r3, [pc, #304]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00b      	beq.n	80024a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800248a:	4b49      	ldr	r3, [pc, #292]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b08      	cmp	r3, #8
 8002494:	d11c      	bne.n	80024d0 <HAL_RCC_OscConfig+0x18c>
 8002496:	4b46      	ldr	r3, [pc, #280]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d116      	bne.n	80024d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a2:	4b43      	ldr	r3, [pc, #268]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d005      	beq.n	80024ba <HAL_RCC_OscConfig+0x176>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d001      	beq.n	80024ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e1ba      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ba:	4b3d      	ldr	r3, [pc, #244]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4939      	ldr	r1, [pc, #228]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ce:	e03a      	b.n	8002546 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d020      	beq.n	800251a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d8:	4b36      	ldr	r3, [pc, #216]	; (80025b4 <HAL_RCC_OscConfig+0x270>)
 80024da:	2201      	movs	r2, #1
 80024dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024de:	f7ff fc57 	bl	8001d90 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e6:	f7ff fc53 	bl	8001d90 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e19b      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f8:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002504:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4927      	ldr	r1, [pc, #156]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 8002514:	4313      	orrs	r3, r2
 8002516:	600b      	str	r3, [r1, #0]
 8002518:	e015      	b.n	8002546 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800251a:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <HAL_RCC_OscConfig+0x270>)
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7ff fc36 	bl	8001d90 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002528:	f7ff fc32 	bl	8001d90 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e17a      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253a:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d03a      	beq.n	80025c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d019      	beq.n	800258e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800255a:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <HAL_RCC_OscConfig+0x274>)
 800255c:	2201      	movs	r2, #1
 800255e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002560:	f7ff fc16 	bl	8001d90 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002568:	f7ff fc12 	bl	8001d90 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e15a      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257a:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <HAL_RCC_OscConfig+0x26c>)
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002586:	2001      	movs	r0, #1
 8002588:	f000 fa9a 	bl	8002ac0 <RCC_Delay>
 800258c:	e01c      	b.n	80025c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <HAL_RCC_OscConfig+0x274>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002594:	f7ff fbfc 	bl	8001d90 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800259a:	e00f      	b.n	80025bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800259c:	f7ff fbf8 	bl	8001d90 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d908      	bls.n	80025bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e140      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
 80025ae:	bf00      	nop
 80025b0:	40021000 	.word	0x40021000
 80025b4:	42420000 	.word	0x42420000
 80025b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025bc:	4b9e      	ldr	r3, [pc, #632]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1e9      	bne.n	800259c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 80a6 	beq.w	8002722 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d6:	2300      	movs	r3, #0
 80025d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025da:	4b97      	ldr	r3, [pc, #604]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10d      	bne.n	8002602 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e6:	4b94      	ldr	r3, [pc, #592]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	4a93      	ldr	r2, [pc, #588]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 80025ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f0:	61d3      	str	r3, [r2, #28]
 80025f2:	4b91      	ldr	r3, [pc, #580]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025fe:	2301      	movs	r3, #1
 8002600:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002602:	4b8e      	ldr	r3, [pc, #568]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	2b00      	cmp	r3, #0
 800260c:	d118      	bne.n	8002640 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800260e:	4b8b      	ldr	r3, [pc, #556]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a8a      	ldr	r2, [pc, #552]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 8002614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002618:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800261a:	f7ff fbb9 	bl	8001d90 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002622:	f7ff fbb5 	bl	8001d90 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b64      	cmp	r3, #100	; 0x64
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e0fd      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002634:	4b81      	ldr	r3, [pc, #516]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d106      	bne.n	8002656 <HAL_RCC_OscConfig+0x312>
 8002648:	4b7b      	ldr	r3, [pc, #492]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	4a7a      	ldr	r2, [pc, #488]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6213      	str	r3, [r2, #32]
 8002654:	e02d      	b.n	80026b2 <HAL_RCC_OscConfig+0x36e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10c      	bne.n	8002678 <HAL_RCC_OscConfig+0x334>
 800265e:	4b76      	ldr	r3, [pc, #472]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	4a75      	ldr	r2, [pc, #468]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	6213      	str	r3, [r2, #32]
 800266a:	4b73      	ldr	r3, [pc, #460]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	4a72      	ldr	r2, [pc, #456]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 8002670:	f023 0304 	bic.w	r3, r3, #4
 8002674:	6213      	str	r3, [r2, #32]
 8002676:	e01c      	b.n	80026b2 <HAL_RCC_OscConfig+0x36e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	2b05      	cmp	r3, #5
 800267e:	d10c      	bne.n	800269a <HAL_RCC_OscConfig+0x356>
 8002680:	4b6d      	ldr	r3, [pc, #436]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	4a6c      	ldr	r2, [pc, #432]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 8002686:	f043 0304 	orr.w	r3, r3, #4
 800268a:	6213      	str	r3, [r2, #32]
 800268c:	4b6a      	ldr	r3, [pc, #424]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	4a69      	ldr	r2, [pc, #420]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	6213      	str	r3, [r2, #32]
 8002698:	e00b      	b.n	80026b2 <HAL_RCC_OscConfig+0x36e>
 800269a:	4b67      	ldr	r3, [pc, #412]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	4a66      	ldr	r2, [pc, #408]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 80026a0:	f023 0301 	bic.w	r3, r3, #1
 80026a4:	6213      	str	r3, [r2, #32]
 80026a6:	4b64      	ldr	r3, [pc, #400]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	4a63      	ldr	r2, [pc, #396]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	f023 0304 	bic.w	r3, r3, #4
 80026b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d015      	beq.n	80026e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ba:	f7ff fb69 	bl	8001d90 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c0:	e00a      	b.n	80026d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c2:	f7ff fb65 	bl	8001d90 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e0ab      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d8:	4b57      	ldr	r3, [pc, #348]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0ee      	beq.n	80026c2 <HAL_RCC_OscConfig+0x37e>
 80026e4:	e014      	b.n	8002710 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e6:	f7ff fb53 	bl	8001d90 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ec:	e00a      	b.n	8002704 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ee:	f7ff fb4f 	bl	8001d90 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e095      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002704:	4b4c      	ldr	r3, [pc, #304]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1ee      	bne.n	80026ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002710:	7dfb      	ldrb	r3, [r7, #23]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d105      	bne.n	8002722 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002716:	4b48      	ldr	r3, [pc, #288]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	4a47      	ldr	r2, [pc, #284]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 800271c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002720:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 8081 	beq.w	800282e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800272c:	4b42      	ldr	r3, [pc, #264]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 030c 	and.w	r3, r3, #12
 8002734:	2b08      	cmp	r3, #8
 8002736:	d061      	beq.n	80027fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d146      	bne.n	80027ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002740:	4b3f      	ldr	r3, [pc, #252]	; (8002840 <HAL_RCC_OscConfig+0x4fc>)
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002746:	f7ff fb23 	bl	8001d90 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274e:	f7ff fb1f 	bl	8001d90 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e067      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002760:	4b35      	ldr	r3, [pc, #212]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1f0      	bne.n	800274e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002774:	d108      	bne.n	8002788 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002776:	4b30      	ldr	r3, [pc, #192]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	492d      	ldr	r1, [pc, #180]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 8002784:	4313      	orrs	r3, r2
 8002786:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002788:	4b2b      	ldr	r3, [pc, #172]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a19      	ldr	r1, [r3, #32]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	430b      	orrs	r3, r1
 800279a:	4927      	ldr	r1, [pc, #156]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a0:	4b27      	ldr	r3, [pc, #156]	; (8002840 <HAL_RCC_OscConfig+0x4fc>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a6:	f7ff faf3 	bl	8001d90 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ae:	f7ff faef 	bl	8001d90 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e037      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027c0:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x46a>
 80027cc:	e02f      	b.n	800282e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ce:	4b1c      	ldr	r3, [pc, #112]	; (8002840 <HAL_RCC_OscConfig+0x4fc>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d4:	f7ff fadc 	bl	8001d90 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027dc:	f7ff fad8 	bl	8001d90 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e020      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ee:	4b12      	ldr	r3, [pc, #72]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x498>
 80027fa:	e018      	b.n	800282e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e013      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_RCC_OscConfig+0x4f4>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	429a      	cmp	r2, r3
 800281a:	d106      	bne.n	800282a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d001      	beq.n	800282e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40021000 	.word	0x40021000
 800283c:	40007000 	.word	0x40007000
 8002840:	42420060 	.word	0x42420060

08002844 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0d0      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002858:	4b6a      	ldr	r3, [pc, #424]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d910      	bls.n	8002888 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b67      	ldr	r3, [pc, #412]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 0207 	bic.w	r2, r3, #7
 800286e:	4965      	ldr	r1, [pc, #404]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002876:	4b63      	ldr	r3, [pc, #396]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d001      	beq.n	8002888 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0b8      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d020      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028a0:	4b59      	ldr	r3, [pc, #356]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4a58      	ldr	r2, [pc, #352]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028b8:	4b53      	ldr	r3, [pc, #332]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4a52      	ldr	r2, [pc, #328]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c4:	4b50      	ldr	r3, [pc, #320]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	494d      	ldr	r1, [pc, #308]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d040      	beq.n	8002964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d107      	bne.n	80028fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ea:	4b47      	ldr	r3, [pc, #284]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d115      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e07f      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d107      	bne.n	8002912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002902:	4b41      	ldr	r3, [pc, #260]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d109      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e073      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002912:	4b3d      	ldr	r3, [pc, #244]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e06b      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002922:	4b39      	ldr	r3, [pc, #228]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f023 0203 	bic.w	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4936      	ldr	r1, [pc, #216]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002934:	f7ff fa2c 	bl	8001d90 <HAL_GetTick>
 8002938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293a:	e00a      	b.n	8002952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800293c:	f7ff fa28 	bl	8001d90 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	; 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e053      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	4b2d      	ldr	r3, [pc, #180]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 020c 	and.w	r2, r3, #12
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	429a      	cmp	r2, r3
 8002962:	d1eb      	bne.n	800293c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002964:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d210      	bcs.n	8002994 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 0207 	bic.w	r2, r3, #7
 800297a:	4922      	ldr	r1, [pc, #136]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e032      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a0:	4b19      	ldr	r3, [pc, #100]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4916      	ldr	r1, [pc, #88]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d009      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029be:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	490e      	ldr	r1, [pc, #56]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029d2:	f000 f821 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 80029d6:	4602      	mov	r2, r0
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	490a      	ldr	r1, [pc, #40]	; (8002a0c <HAL_RCC_ClockConfig+0x1c8>)
 80029e4:	5ccb      	ldrb	r3, [r1, r3]
 80029e6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ea:	4a09      	ldr	r2, [pc, #36]	; (8002a10 <HAL_RCC_ClockConfig+0x1cc>)
 80029ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <HAL_RCC_ClockConfig+0x1d0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff f98a 	bl	8001d0c <HAL_InitTick>

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40022000 	.word	0x40022000
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	08003324 	.word	0x08003324
 8002a10:	2000000c 	.word	0x2000000c
 8002a14:	20000010 	.word	0x20000010

08002a18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	2300      	movs	r3, #0
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a32:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <HAL_RCC_GetSysClockFreq+0x94>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d002      	beq.n	8002a48 <HAL_RCC_GetSysClockFreq+0x30>
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d003      	beq.n	8002a4e <HAL_RCC_GetSysClockFreq+0x36>
 8002a46:	e027      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a48:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a4a:	613b      	str	r3, [r7, #16]
      break;
 8002a4c:	e027      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	0c9b      	lsrs	r3, r3, #18
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	4a17      	ldr	r2, [pc, #92]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a58:	5cd3      	ldrb	r3, [r2, r3]
 8002a5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d010      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a66:	4b11      	ldr	r3, [pc, #68]	; (8002aac <HAL_RCC_GetSysClockFreq+0x94>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	0c5b      	lsrs	r3, r3, #17
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	4a11      	ldr	r2, [pc, #68]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a72:	5cd3      	ldrb	r3, [r2, r3]
 8002a74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a0d      	ldr	r2, [pc, #52]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a7a:	fb02 f203 	mul.w	r2, r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	e004      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a0c      	ldr	r2, [pc, #48]	; (8002abc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a8c:	fb02 f303 	mul.w	r3, r2, r3
 8002a90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	613b      	str	r3, [r7, #16]
      break;
 8002a96:	e002      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a9a:	613b      	str	r3, [r7, #16]
      break;
 8002a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a9e:	693b      	ldr	r3, [r7, #16]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	007a1200 	.word	0x007a1200
 8002ab4:	08003334 	.word	0x08003334
 8002ab8:	08003344 	.word	0x08003344
 8002abc:	003d0900 	.word	0x003d0900

08002ac0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <RCC_Delay+0x34>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0a      	ldr	r2, [pc, #40]	; (8002af8 <RCC_Delay+0x38>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	0a5b      	lsrs	r3, r3, #9
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	fb02 f303 	mul.w	r3, r2, r3
 8002ada:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002adc:	bf00      	nop
  }
  while (Delay --);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	1e5a      	subs	r2, r3, #1
 8002ae2:	60fa      	str	r2, [r7, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f9      	bne.n	8002adc <RCC_Delay+0x1c>
}
 8002ae8:	bf00      	nop
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	2000000c 	.word	0x2000000c
 8002af8:	10624dd3 	.word	0x10624dd3

08002afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e041      	b.n	8002b92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d106      	bne.n	8002b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff f85a 	bl	8001bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3304      	adds	r3, #4
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	f000 fa56 	bl	8002fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d001      	beq.n	8002bb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e035      	b.n	8002c20 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a16      	ldr	r2, [pc, #88]	; (8002c2c <HAL_TIM_Base_Start_IT+0x90>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d009      	beq.n	8002bea <HAL_TIM_Base_Start_IT+0x4e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bde:	d004      	beq.n	8002bea <HAL_TIM_Base_Start_IT+0x4e>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a12      	ldr	r2, [pc, #72]	; (8002c30 <HAL_TIM_Base_Start_IT+0x94>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d111      	bne.n	8002c0e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2b06      	cmp	r3, #6
 8002bfa:	d010      	beq.n	8002c1e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c0c:	e007      	b.n	8002c1e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0201 	orr.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40012c00 	.word	0x40012c00
 8002c30:	40000400 	.word	0x40000400

08002c34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d020      	beq.n	8002c98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d01b      	beq.n	8002c98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0202 	mvn.w	r2, #2
 8002c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f998 	bl	8002fb4 <HAL_TIM_IC_CaptureCallback>
 8002c84:	e005      	b.n	8002c92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f98b 	bl	8002fa2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f99a 	bl	8002fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d020      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01b      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0204 	mvn.w	r2, #4
 8002cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f972 	bl	8002fb4 <HAL_TIM_IC_CaptureCallback>
 8002cd0:	e005      	b.n	8002cde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f965 	bl	8002fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f974 	bl	8002fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d020      	beq.n	8002d30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d01b      	beq.n	8002d30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f06f 0208 	mvn.w	r2, #8
 8002d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2204      	movs	r2, #4
 8002d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f94c 	bl	8002fb4 <HAL_TIM_IC_CaptureCallback>
 8002d1c:	e005      	b.n	8002d2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f93f 	bl	8002fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f94e 	bl	8002fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d020      	beq.n	8002d7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d01b      	beq.n	8002d7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f06f 0210 	mvn.w	r2, #16
 8002d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2208      	movs	r2, #8
 8002d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f926 	bl	8002fb4 <HAL_TIM_IC_CaptureCallback>
 8002d68:	e005      	b.n	8002d76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f919 	bl	8002fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f928 	bl	8002fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00c      	beq.n	8002da0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d007      	beq.n	8002da0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0201 	mvn.w	r2, #1
 8002d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7fe fed6 	bl	8001b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00c      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d007      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fa6f 	bl	80032a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00c      	beq.n	8002de8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d007      	beq.n	8002de8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f8f8 	bl	8002fd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00c      	beq.n	8002e0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d007      	beq.n	8002e0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0220 	mvn.w	r2, #32
 8002e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fa42 	bl	8003290 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_TIM_ConfigClockSource+0x1c>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e0b4      	b.n	8002f9a <HAL_TIM_ConfigClockSource+0x186>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e68:	d03e      	beq.n	8002ee8 <HAL_TIM_ConfigClockSource+0xd4>
 8002e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e6e:	f200 8087 	bhi.w	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
 8002e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e76:	f000 8086 	beq.w	8002f86 <HAL_TIM_ConfigClockSource+0x172>
 8002e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e7e:	d87f      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
 8002e80:	2b70      	cmp	r3, #112	; 0x70
 8002e82:	d01a      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0xa6>
 8002e84:	2b70      	cmp	r3, #112	; 0x70
 8002e86:	d87b      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
 8002e88:	2b60      	cmp	r3, #96	; 0x60
 8002e8a:	d050      	beq.n	8002f2e <HAL_TIM_ConfigClockSource+0x11a>
 8002e8c:	2b60      	cmp	r3, #96	; 0x60
 8002e8e:	d877      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
 8002e90:	2b50      	cmp	r3, #80	; 0x50
 8002e92:	d03c      	beq.n	8002f0e <HAL_TIM_ConfigClockSource+0xfa>
 8002e94:	2b50      	cmp	r3, #80	; 0x50
 8002e96:	d873      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
 8002e98:	2b40      	cmp	r3, #64	; 0x40
 8002e9a:	d058      	beq.n	8002f4e <HAL_TIM_ConfigClockSource+0x13a>
 8002e9c:	2b40      	cmp	r3, #64	; 0x40
 8002e9e:	d86f      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea0:	2b30      	cmp	r3, #48	; 0x30
 8002ea2:	d064      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0x15a>
 8002ea4:	2b30      	cmp	r3, #48	; 0x30
 8002ea6:	d86b      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d060      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0x15a>
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	d867      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d05c      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0x15a>
 8002eb4:	2b10      	cmp	r3, #16
 8002eb6:	d05a      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0x15a>
 8002eb8:	e062      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	6899      	ldr	r1, [r3, #8]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f000 f96a 	bl	80031a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002edc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	609a      	str	r2, [r3, #8]
      break;
 8002ee6:	e04f      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	6899      	ldr	r1, [r3, #8]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f000 f953 	bl	80031a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f0a:	609a      	str	r2, [r3, #8]
      break;
 8002f0c:	e03c      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6859      	ldr	r1, [r3, #4]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	f000 f8ca 	bl	80030b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2150      	movs	r1, #80	; 0x50
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 f921 	bl	800316e <TIM_ITRx_SetConfig>
      break;
 8002f2c:	e02c      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6818      	ldr	r0, [r3, #0]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	6859      	ldr	r1, [r3, #4]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	f000 f8e8 	bl	8003110 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2160      	movs	r1, #96	; 0x60
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f911 	bl	800316e <TIM_ITRx_SetConfig>
      break;
 8002f4c:	e01c      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	6859      	ldr	r1, [r3, #4]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f000 f8aa 	bl	80030b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2140      	movs	r1, #64	; 0x40
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f901 	bl	800316e <TIM_ITRx_SetConfig>
      break;
 8002f6c:	e00c      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4619      	mov	r1, r3
 8002f78:	4610      	mov	r0, r2
 8002f7a:	f000 f8f8 	bl	800316e <TIM_ITRx_SetConfig>
      break;
 8002f7e:	e003      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
      break;
 8002f84:	e000      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr
	...

08002fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a2b      	ldr	r2, [pc, #172]	; (80030ac <TIM_Base_SetConfig+0xc0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d007      	beq.n	8003014 <TIM_Base_SetConfig+0x28>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300a:	d003      	beq.n	8003014 <TIM_Base_SetConfig+0x28>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a28      	ldr	r2, [pc, #160]	; (80030b0 <TIM_Base_SetConfig+0xc4>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d108      	bne.n	8003026 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a20      	ldr	r2, [pc, #128]	; (80030ac <TIM_Base_SetConfig+0xc0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d007      	beq.n	800303e <TIM_Base_SetConfig+0x52>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003034:	d003      	beq.n	800303e <TIM_Base_SetConfig+0x52>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a1d      	ldr	r2, [pc, #116]	; (80030b0 <TIM_Base_SetConfig+0xc4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d108      	bne.n	8003050 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a0d      	ldr	r2, [pc, #52]	; (80030ac <TIM_Base_SetConfig+0xc0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d103      	bne.n	8003084 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f023 0201 	bic.w	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	611a      	str	r2, [r3, #16]
  }
}
 80030a2:	bf00      	nop
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr
 80030ac:	40012c00 	.word	0x40012c00
 80030b0:	40000400 	.word	0x40000400

080030b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	f023 0201 	bic.w	r2, r3, #1
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f023 030a 	bic.w	r3, r3, #10
 80030f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	621a      	str	r2, [r3, #32]
}
 8003106:	bf00      	nop
 8003108:	371c      	adds	r7, #28
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	f023 0210 	bic.w	r2, r3, #16
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800313a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	031b      	lsls	r3, r3, #12
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800314c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	621a      	str	r2, [r3, #32]
}
 8003164:	bf00      	nop
 8003166:	371c      	adds	r7, #28
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr

0800316e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800316e:	b480      	push	{r7}
 8003170:	b085      	sub	sp, #20
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003184:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	f043 0307 	orr.w	r3, r3, #7
 8003190:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	609a      	str	r2, [r3, #8]
}
 8003198:	bf00      	nop
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr

080031a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b087      	sub	sp, #28
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
 80031ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	021a      	lsls	r2, r3, #8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	431a      	orrs	r2, r3
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	609a      	str	r2, [r3, #8]
}
 80031d6:	bf00      	nop
 80031d8:	371c      	adds	r7, #28
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr

080031e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e041      	b.n	800327c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	4313      	orrs	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a14      	ldr	r2, [pc, #80]	; (8003288 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d009      	beq.n	8003250 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003244:	d004      	beq.n	8003250 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a10      	ldr	r2, [pc, #64]	; (800328c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d10c      	bne.n	800326a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003256:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	4313      	orrs	r3, r2
 8003260:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40012c00 	.word	0x40012c00
 800328c:	40000400 	.word	0x40000400

08003290 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	bc80      	pop	{r7}
 80032a0:	4770      	bx	lr

080032a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr

080032b4 <__libc_init_array>:
 80032b4:	b570      	push	{r4, r5, r6, lr}
 80032b6:	2600      	movs	r6, #0
 80032b8:	4d0c      	ldr	r5, [pc, #48]	; (80032ec <__libc_init_array+0x38>)
 80032ba:	4c0d      	ldr	r4, [pc, #52]	; (80032f0 <__libc_init_array+0x3c>)
 80032bc:	1b64      	subs	r4, r4, r5
 80032be:	10a4      	asrs	r4, r4, #2
 80032c0:	42a6      	cmp	r6, r4
 80032c2:	d109      	bne.n	80032d8 <__libc_init_array+0x24>
 80032c4:	f000 f822 	bl	800330c <_init>
 80032c8:	2600      	movs	r6, #0
 80032ca:	4d0a      	ldr	r5, [pc, #40]	; (80032f4 <__libc_init_array+0x40>)
 80032cc:	4c0a      	ldr	r4, [pc, #40]	; (80032f8 <__libc_init_array+0x44>)
 80032ce:	1b64      	subs	r4, r4, r5
 80032d0:	10a4      	asrs	r4, r4, #2
 80032d2:	42a6      	cmp	r6, r4
 80032d4:	d105      	bne.n	80032e2 <__libc_init_array+0x2e>
 80032d6:	bd70      	pop	{r4, r5, r6, pc}
 80032d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032dc:	4798      	blx	r3
 80032de:	3601      	adds	r6, #1
 80032e0:	e7ee      	b.n	80032c0 <__libc_init_array+0xc>
 80032e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032e6:	4798      	blx	r3
 80032e8:	3601      	adds	r6, #1
 80032ea:	e7f2      	b.n	80032d2 <__libc_init_array+0x1e>
 80032ec:	08003348 	.word	0x08003348
 80032f0:	08003348 	.word	0x08003348
 80032f4:	08003348 	.word	0x08003348
 80032f8:	0800334c 	.word	0x0800334c

080032fc <memset>:
 80032fc:	4603      	mov	r3, r0
 80032fe:	4402      	add	r2, r0
 8003300:	4293      	cmp	r3, r2
 8003302:	d100      	bne.n	8003306 <memset+0xa>
 8003304:	4770      	bx	lr
 8003306:	f803 1b01 	strb.w	r1, [r3], #1
 800330a:	e7f9      	b.n	8003300 <memset+0x4>

0800330c <_init>:
 800330c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330e:	bf00      	nop
 8003310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003312:	bc08      	pop	{r3}
 8003314:	469e      	mov	lr, r3
 8003316:	4770      	bx	lr

08003318 <_fini>:
 8003318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331a:	bf00      	nop
 800331c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331e:	bc08      	pop	{r3}
 8003320:	469e      	mov	lr, r3
 8003322:	4770      	bx	lr
